{"version":3,"sources":["webpack:///build.js","webpack:///webpack/bootstrap 8d4620bb544111cfa687","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/vue-loader/lib/component-normalizer.js","webpack:///./~/vue-style-loader/lib/addStylesClient.js","webpack:///./~/bootstrap-vue/dist/bootstrap-vue.esm.js","webpack:///./src/App.vue","webpack:///./~/vue/dist/vue.esm.js","webpack:///App.vue","webpack:///musique.vue","webpack:///note.vue","webpack:///./src/main.js","webpack:///./src/components/musique.vue?ecb8","webpack:///./src/App.vue?04dd","webpack:///./src/components/note.vue?533e","webpack:///./~/tether/dist/js/tether.js","webpack:///./~/tone/build/Tone.js","webpack:///./src/components/musique.vue","webpack:///./src/components/note.vue","webpack:///./src/components/musique.vue?dd9c","webpack:///./src/App.vue?3eec","webpack:///./src/components/note.vue?bbe9","webpack:///./src/components/musique.vue?be30","webpack:///./src/App.vue?3ff2","webpack:///./src/components/note.vue?2fe8","webpack:///./~/vue-style-loader/lib/listToStyles.js","webpack:///(webpack)/buildin/global.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","list","toString","result","this","length","item","push","join","mediaQuery","alreadyImportedModules","id","rawScriptExports","compiledTemplate","scopeId","cssModules","esModule","scriptExports","type","default","options","render","staticRenderFns","_scopeId","computed","create","keys","forEach","key","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","createStyleElement","styleElement","document","createElement","head","appendChild","obj","update","remove","querySelector","isProduction","noop","parentNode","removeChild","isOldIE","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","applyToTag","newObj","css","media","sourceMap","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","sources","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","hasDocument","DEBUG","Error","listToStyles","getElementsByTagName","navigator","test","userAgent","toLowerCase","parentId","_isProduction","newList","mayRemove","textStore","replacement","filter","Boolean","__webpack_exports__","observeDOM","t","e","window","MutationObserver","WebKitMutationObserver","addEventListener","addedNodes","removedNodes","observe","assign","childList","subtree","targets","__vue__","console","warn","modifiers","all_listen_types","r","vm","isElement","nodeType","closest","$QSA","Array","slice","querySelectorAll","$QS","getVm","toType","match","typeCheckConfig","RegExp","error","ScrollSpy","_$el","_selector","Selector","NAV_LINKS","LIST_ITEMS","DROPDOWN_ITEMS","_config","Default","_offsets","_targets","_activeTarget","_scrollHeight","_$root","_resizeTimeout","updateConfig","__WEBPACK_IMPORTED_MODULE_0_tether__","__WEBPACK_IMPORTED_MODULE_0_tether___default","alert","$createElement","_self","_c","localShow","class","classObject","attrs","role","aria-live","aria-atomic","dismissible","staticClass","data-dismiss","aria-label","on","click","stopPropagation","preventDefault","dismiss","aria-hidden","_v","_e","_t","data","countDownTimerId","dismissed","created","state","alertVariant","variant","show","props","String","dismissLabel","Number","watch","showChanged","mounted","methods","$emit","clearCounter","clearInterval","setInterval","linkMixin","isRouterLink","$router","to","disabled","_href","href","linkClassObject","active","exact","exactActiveClass","activeClass","tag","append","replace","event","linkClick","$root","bLink","active-class","exact-active-class","aria-disabled","mixins","breadcrumb","_l","items2","__active","onclick","domProps","innerHTML","_s","text","link","components","componentType","items","map","required","bBtn","btnVariant","btnSize","btnBlock","btnDisabled","inactive","block","size","ITEM_SELECTOR","buttonToolbar","tabindex","keyNav","focusin","target","currentTarget","focusFirst","keydown","_k","keyCode","button","focusNext","shiftKey","focusLast","justify","vertical","KeyNav","setItemFocus","$nextTick","focus","getItems","indexOf","$el","tabIndex","buttonGroup","clickOut","documentElement","_clickOutListener","destroyed","removeEventListener","contains","clickOutListener","ITEM_SELECTOR$1","dropdown","split","dropup","right","visible","$on","body","children","toggle","onTab","onEsc","$refs","menu","buttonGroupDropdown","ref","dropdown-toggle","btn-link","aria-expanded","kedown","dropdown-menu-right","aria-labelledby","keyup","dropdownToggle","caret","inputGroup","left","inputGroupAddon","inputGroupButton","card","cardVariant","cardAlign","cardInverse","img","src","alt","imgAlt","header","showHeader","headerTag","noBlock","blockClass","title","subTitle","footer","showFooter","footerTag","overlay","inverse","align","cardGroup","deck","columns","DIRECTION","next","current","prev","carousel","style","background","height","aria-busy","isSliding","mouseenter","pause","mouseleave","start","focusout","restart","directives","rawName","indicators","expression","labelIndicators","aria-owns","indictors","aria-activedescendant","slides","focusActiveIndicator","focusPrevIndicator","focusNextIndicator","refInFor","aria-current","aria-posinset","aria-setsize","labelGotoSlide","aria-describedby","aria-controls","controls","data-slide","labelPrev","labelNext","interval","_intervalId","relatedTarget","activeElement","classList","add","_carouselAnimation","setTimeout","clearTimeout","carouselSlide","contentClasses","caption","contentVisibleUp","carousel-caption","collapse","enter","after-enter","clearHeight","leave","after-leave","navbar-collapse","isNav","emitState","getComputedStyle","offsetHeight","dropdown$1","aria-haspopup","toggleText","bButton","dropdownItem","dropdownDivider","dropdownHeader","dropdownSelect","open","displayItem","position","select","selected","returnObject","model","forceDefault","defaultText","form","inline","formFieldset","inputState","describedBy","label","labelSrOnly","labelLayout","labelAlignClass","for","labelId","inputLayout","feedback","feedbackId","description","descriptionId","horizontal","labelSize","labelTextAlign","updateTarget","content","inputSelector","updated","formMixin","inputClass","custom","plain","formCheckBoxMixin","checkboxClass","custom-control","form-check-inline","inBrowser","UNSAFE_UID","NODE_ENV","generateId","_id","_uid","formCheckbox","checked","change","uncheckedValue","prop","formOptions","isArray","valueField","textField","selectedValue","localValue","formRadio","stacked","_q","__c","bFormInputStatic","staticValue","formatter","Function","formInput","static","textarea","rows","rowsCount","placeholder","input","onInput","onChange","onKeyUp","blur","format","lazyFormatter","formFile","dragover","dragging","data-drop","dropLabel","drop","dragleave","accept","multiple","webkitdirectory","directory","onFileChange","data-choose","computedChooseLabel","data-selected","selectedLabel","selectedFile","selectedFormat","chooseLabel","dataTransfer","noTraverse","webkitGetAsEntry","traverseFileTree","Promise","all","then","setFiles","concat","apply","files","noDrop","dropEffect","isFile","file","$path","isDirectory","createReader","readEntries","formSelect","_value","jumbotron","fluid","containerFluid","lead","badge","badgeVariant","badgePill","pill","listGroup","flush","actionTags","listGroupItem","myTag","listState","isAction","action","rightAlign","verticalAlignClass","verticalAlign","FOCUS_SELECTOR","modal","enter-class","enter-to-class","enter-active-class","leave-class","leave-active-class","leave-to-class","is_visible","fade","onClickOut","hideHeader","hideHeaderClose","closeTitle","hide","hideFooter","okOnly","okTitle","return_focus","returnFocus","closeOnBackdrop","closeOnEsc","enforceFocus","isOK","cancel","returnFocusTo","nav","isNavBar","navbar-nav","nav-tabs","tabs","nav-pills","pills","flex-column","nav-fill","fill","navItem","navItemDropdown","navToggle","aria-explanded","toggleState","navbar","fixed","sticky","toggleable","toggleBreakpoint","bPagination","ariaLabel","focusCurrent","focusPrev","secondaryVariant","isActive","_return","currentPage","showPrev","labelPage","numberOfPages","pageLinks","diff","showNext","Math","ceil","totalRows","perPage","limit","getButtons","buttonPrev","buttonFirst","buttonPages","buttonLast","buttonNext","setBtnFocus","find","reverse","parseInt","getAttribute","labelPrevPage","labelNextPage","TRIGGER_LISTENERS","hover","PLACEMENT_PARAMS","top","bottom","TETHER_CLASSES","element","enabled","bPopover","classState","popoverAlignment","popoverStyle","constraints","debounce","validator","delay","offset","placement","targetOffset","triggers","triggerState","lastEvent","normalizedTriggers","showState","setOptions","updateListeners","getDelay","_timeout","togglePopover","addListener","_trigger","eventHandler","destroyTether","_tether","destroy","className","timeStamp","getTetherOptions","attachment","_popover","classes","classPrefix","hidePopover","display","refreshPosition","removeListener","showPopover","a","trigger","popover","beforeDestroy","progress","styleObject","aria-valuenow","aria-valuemin","aria-valuemax","max","showProgress","showValue","progressVariant","striped","animated","width","pow","precision","round","defaultSortCompare","localeCompare","numeric","table","fields","sortable","sortBy","sortDesc","headClick","_items","items_key","rowClicked","showEmpty","colspan","emptyText","emptyFilteredText","sortCompare","itemsProvider","lastIndex","sort","card-block","card-header","navStyle","currentTab","previousTab","nextTab","setTab","headHtml","small","localActive","aria-selected","controlledBy","noFade","lazy","$set","sign","updateTabs","$slots","componentInstance","tabsContainer","tab","mode","before-leave","beforeLeave","aria-lablelledby","buttonId","tooltip","opacity","extends","freeze","bAlert","bBreadcrumb","bButtonToolbar","bButtonGroup","bButtonGroupDropdown","bInputGroup","bInputGroupAddon","bInputGroupButton","bCard","bCardGroup","bDropdown","bDropdownItem","bDropdownDivider","bDropdownHeader","bDropdownSelect","bForm","bFormCheckbox","bFormFieldset","bFormFile","bFormRadio","bFormInput","bFormSelect","bJumbotron","bBadge","bMedia","bModal","bNavbar","bProgress","bTable","bTooltip","bTab","bTabs","bNav","bNavItem","bNavItemDropdown","bNavToggle","bListGroupItem","bListGroup","bCarouselSlide","bCarousel","bCollapse","listen_types","listen_types$1","modal$1","inBrowser$1","isServer","Element","ownerDocument","parentElement","BVSS","method","throttle","DefaultType","ClassName","DROPDOWN_ITEM","DROPDOWN_MENU","DROPDOWN_TOGGLE","NAV_LINK","LIST_ITEM","ACTIVE","NAV_LIST_GROUP","NAV","LIST_GROUP","DROPDOWN","OffsetMethod","OFFSET","POSITION","arg","listen","_getScroller","tagName","unListen","refresh","_getScrollTop","_getScrollHeight","charAt","getBoundingClientRect","offsetTop","process","_getOffsetHeight","_activate","_clear","dispose","handleEvent","pageYOffset","scrollTop","scrollHeight","innerHeight","_setActiveState","_setParentsSiblingActiveState","$props","previousElementSibling","scrollspy","inserted","componentUpdated","unbind","bToggle","bScrollspy","VuePlugin","install","_bootstrap_vue_installed","component","directive","Vue","use","Component","global","isUndef","v","undefined","isDef","isTrue","isFalse","isPrimitive","isObject","isPlainObject","_toString","isRegExp","val","toNumber","parseFloat","isNaN","makeMap","str","expectsLowerCase","arr","splice","hasOwn","cached","fn","cache","ctx","boundFn","arguments","_length","toArray","ret","extend","_from","toObject","res","looseEqual","b","isObjectA","isObjectB","looseIndexOf","once","called","isReserved","charCodeAt","def","writable","parsePath","path","bailRE","segments","handleError","err","info","config","errorHandler","isNative","Ctor","pushTarget","_target","Dep","targetStack","popTarget","pop","protoAugment","__proto__","copyAugment","asRootData","ob","__ob__","Observer","observerState","shouldConvert","isServerRendering","isExtensible","_isVue","vmCount","defineReactive$$1","customSetter","dep","getOwnPropertyDescriptor","setter","set","childOb","depend","dependArray","newVal","notify","del","mergeData","from","toVal","fromVal","mergeHook","parentVal","childVal","mergeAssets","normalizeProps","camelize","normalizeDirectives","dirs","mergeOptions","parent","child","mergeField","strat","strats","defaultStrat","extendsFrom","resolveAsset","warnMissing","assets","camelizedId","PascalCaseId","capitalize","validateProp","propOptions","propsData","absent","isType","hyphenate","getPropDefaultValue","prevShouldConvert","$options","_props","getType","len","createTextVNode","VNode","cloneVNode","vnode","cloned","elm","context","componentOptions","ns","isStatic","isComment","isCloned","cloneVNodes","vnodes","createFnInvoker","fns","invoker","arguments$1","oldOn","remove$$1","cur","old","normalizeEvent","capture","passive","mergeVNodeHook","hookKey","hook","wrappedHook","oldHook","merged","extractPropsFromVNodeData","altKey","checkProp","hash","preserve","simpleNormalizeChildren","normalizeChildren","normalizeArrayChildren","isTextNode","node","nestedIndex","last","_isVList","ensureCtor","comp","base","resolveAsyncComponent","factory","baseCtor","errorComp","resolved","loading","loadingComp","contexts","sync","forceRender","$forceUpdate","resolve","reject","reason","timeout","getFirstComponentChild","initEvents","_events","_hasHookEvent","listeners","_parentListeners","updateComponentListeners","once$$1","$once","remove$1","$off","oldListeners","resolveSlots","slots","defaultSlot","functionalContext","slot","every","isWhitespace","resolveScopedSlots","initLifecycle","abstract","$parent","$children","_watcher","_inactive","_directInactive","_isMounted","_isDestroyed","_isBeingDestroyed","mountComponent","el","hydrating","createEmptyVNode","callHook","updateComponent","_update","_render","Watcher","$vnode","updateChildComponent","parentVnode","renderChildren","hasChildren","_renderChildren","scopedSlots","$scopedSlots","emptyObject","_parentVnode","_vnode","propKeys","_propKeys","isInInactiveTree","activateChildComponent","direct","deactivateChildComponent","handlers","resetSchedulerState","queue","activatedChildren","has","waiting","flushing","flushSchedulerQueue","watcher","run","activatedQueue","updatedQueue","callActivatedHooks","callUpdateHooks","devtools","emit","queueActivatedComponent","queueWatcher","nextTick","traverse","seenObjects","clear","_traverse","seen","isA","depId","proxy","sourceKey","sharedPropertyDefinition","initState","_watchers","opts","initProps","initMethods","initData","_data","initComputed","initWatch","propsOptions","isRoot","getData","watchers","_computedWatchers","userDef","computedWatcherOptions","defineComputed","createComputedGetter","dirty","evaluate","handler","createWatcher","$watch","initProvide","provide","_provided","initInjections","resolveInject","inject","hasSymbol","Reflect","ownKeys","provideKey","source","createFunctionalComponent","mergeProps","_context","h","injections","functionalOptions","createComponent","_base","cid","resolveConstructorOptions","transformModel","functional","nativeOn","mergeHooks","createComponentInstanceForVnode","parentElm","refElm","vnodeComponentOptions","_isComponent","_componentTag","_parentElm","_refElm","inlineTemplate","hooksToMerge","fromParent","ours","componentVNodeHooks","mergeHook$1","one","two","callback","normalizationType","alwaysNormalize","ALWAYS_NORMALIZE","_createElement","SIMPLE_NORMALIZE","getTagNamespace","isReservedTag","parsePlatformTagName","applyNS","renderList","renderSlot","fallback","bindObject","scopedSlotFn","slotNodes","resolveFilter","identity","checkKeyCodes","eventKeyCode","builtInAlias","keyCodes","bindObjectProps","asProp","mustUseProp","renderStatic","isInFor","tree","_staticTrees","_renderProxy","markStatic","markOnce","isOnce","markStaticNode","initRender","renderContext","initInternalComponent","constructor","super","superOptions","modifiedOptions","resolveModifiedOptions","extendOptions","modified","latest","extended","sealed","sealedOptions","dedupe","Vue$3","_init","initUse","plugin","installed","args","unshift","initMixin$1","mixin","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","initProps$1","initComputed$1","ASSET_TYPES","Comp","initAssetRegisters","definition","getComponentName","matches","pattern","pruneCache","cachedNode","pruneCacheEntry","$destroy","genClassForVnode","childNode","mergeClassData","genClassFromData","dynamicClass","stringifyClass","stringified","isSVG","isUnknownElement","unknownElementCache","HTMLUnknownElement","HTMLElement","query","createElement$1","createElementNS","namespace","namespaceMap","createComment","newNode","referenceNode","nextSibling","setTextContent","textContent","registerRef","isRemoval","sameVnode","sameInputType","createKeyToOldIdx","beginIdx","endIdx","updateDirectives","oldVnode","oldDir","dir","isCreate","emptyNode","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","oldValue","callHook$1","callInsert","emptyModifiers","getRawDirName","updateAttrs","oldAttrs","setAttr","isIE9","isXlink","removeAttributeNS","xlinkNS","getXlinkProp","isEnumeratedAttr","removeAttribute","isBooleanAttr","isFalsyAttrValue","setAttributeNS","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","parseFilters","exp","pushFilter","filters","lastFilterIndex","trim","inSingle","inDouble","inTemplateString","inRegex","curly","square","paren","validDivisionCharRE","wrapFilter","baseWarn","msg","pluckModuleFunction","_","addProp","addAttr","addDirective","addHandler","important","events","native","nativeEvents","newHandler","getBindingAttr","getStatic","dynamicValue","getAndRemoveAttr","attrsMap","attrsList","genComponentModel","number","valueExpression","assignment","genAssignmentCode","modelRs","parseModel","idx","index$1","expressionPos","expressionEndPos","lastIndexOf","eof","chr","isStringStart","parseString","parseBracket","substring","inBracket","stringQuote","_warn","warn$1","genSelect","genCheckboxModel","genRadioModel","genDefaultModel","valueBinding","trueValueBinding","falseValueBinding","CHECKBOX_RADIO_TOKEN","selectedVal","code","needCompositionGuard","RANGE_TOKEN","normalizeEvents","isIE","isChrome","add$1","oldHandler","target$1","ev","remove$2","supportsPassive","updateDOMListeners","updateDOMProps","oldProps","strCur","shouldUpdateValue","checkVal","composing","isDirty","isInputChanged","_vModifiers","normalizeStyleData","normalizeStyleBinding","staticStyle","bindingStyle","parseStyleText","getStyle","checkChild","styleData","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","setProp","addClass","removeClass","tar","resolveTransition","def$$1","autoCssTransition","nextFrame","raf","addTransitionClass","removeTransitionClass","whenTransitionEnds","expectedType","cb","getTransitionInfo","propCount","TRANSITION","transitionEndEvent","animationEndEvent","ended","end","onEnd","transitionDelays","transitionProp","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationProp","animationDurations","animationTimeout","ANIMATION","hasTransform","transformRE","delays","durations","toMs","toggleDisplay","_leaveCb","cancelled","transition","_enterCb","enterClass","enterToClass","enterActiveClass","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","activeInstance","transitionNode","isAppear","isRootInsert","startClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","pendingNode","_pending","isValidDuration","rm","performLeave","leaveClass","leaveActiveClass","leaveToClass","explicitLeaveDuration","afterLeave","leaveCancelled","delayLeave","invokerFns","_enter","setSelected","binding","isMultiple","option","getValue","selectedIndex","hasNoMatchingOption","onCompositionStart","onCompositionEnd","createEvent","initEvent","dispatchEvent","locateNode","getRealChild","compOptions","extractTransitionData","key$1","rawChild","hasParentTransition","isSameChild","oldChild","callPendingCbs","_moveCb","recordPosition","newPos","applyTranslation","oldPos","pos","dx","dy","moved","transform","WebkitTransform","transitionDuration","decode","html","decoder","decodeAttr","shouldDecodeNewlines","re","encodedAttrWithNewLines","encodedAttr","decodingMap","parseHTML","advance","parseEndTag","lowerCasedTagName","stack","lowerCasedTag","lastTag","expectHTML","isUnaryTag$$1","isUnaryTag","no","canBeLeftOpenTag$$1","canBeLeftOpenTag","isPlainTextElement","stackedTag","reStackedTag","reCache","endTagLength","rest","endTag","chars","textEnd","comment","commentEnd","conditionalComment","conditionalEnd","doctypeMatch","doctype","endTagMatch","curIndex","startTagMatch","startTagOpen","attr","startTagClose","attribute","unarySlash","isNonPhrasingTag","unary","IS_REGEX_CAPTURING_BROKEN","rest$1","parseText","delimiters","tagRE","buildRegex","defaultTagRE","tokens","exec","parse","template","endPre","pre","inVPre","platformIsPreTag","inPre","warn$2","platformGetTagNamespace","platformMustUseProp","isPreTag","preTransforms","transforms","postTransforms","root","currentParent","preserveWhitespace","guardIESVGBug","makeAttrsMap","isForbiddenTag","forbidden","processPre","processRawAttrs","processFor","processIf","processOnce","processKey","processRef","processSlot","processComponent","i$1","processAttrs","if","elseif","else","addIfCondition","processIfConditions","slotScope","slotTarget","i$2","lastNode","isTextTag","decodeHTMLCached","checkInFor","inMatch","forAliasRE","alias","iteratorMatch","forIteratorRE","iterator1","iterator2","findPrevElement","condition","ifConditions","slotName","isProp","dirRE","hasBindings","parseModifiers","modifierRE","bindRE","camel","onRE","argMatch","argRE","ieNSBug","ieNSPrefix","optimize","isStaticKey","genStaticKeysCached","staticKeys","isPlatformReservedTag","markStatic$1","markStaticRoots","genStaticKeys$1","staticInFor","staticRoot","walkThroughConditionsBlocks","conditionBlocks","isBuiltInTag","isDirectChildOfTemplateFor","genHandlers","genHandler","isMethodPath","simplePathRE","isFunctionExpression","fnExpRE","genModifierCode","modifierCode","genKeyFilter","genFilterCode","keyVal","bind$1","wrapData","generate","ast","prevStaticRenderFns","currentStaticRenderFns","prevOnceCount","onceCount","currentOptions","warn$3","transforms$1","dataGenFns","platformDirectives$1","isPlatformReservedTag$1","genElement","staticProcessed","genStatic","onceProcessed","genOnce","forProcessed","genFor","ifProcessed","genIf","genSlot","genComponent","genData","genChildren","genIfConditions","conditions","genTernaryExp","shift","genDirectives","genProps","genScopedSlots","genInlineTemplate","needRuntime","hasRuntime","gen","baseDirectives","inlineRenderFns","genScopedSlot","genForScopedSlot","scope","checkSkip","el$1","getNormalizationType","genNode","needsNormalization","some","maybeComponent","genText","transformSpecialNewlines","bind$$1","componentName","baseCompile","makeFunction","errors","transformNode","classBinding","genData$1","transformNode$1","styleBinding","genData$2","getOuterHTML","outerHTML","container","cloneNode","toUpperCase","SSR_ATTR","LIFECYCLE_HOOKS","optionMergeStrategies","silent","productionTip","performance","ignoredElements","isReservedAttr","_lifecycleHooks","hasProto","UA","isEdge","isAndroid","isIOS","_isServer","_Set","env","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","Symbol","nextTickHandler","pending","copies","callbacks","timerFunc","logError","catch","counter","observer","textNode","characterData","_resolve","Set","uid","subs","addSub","sub","removeSub","addDep","arrayProto","arrayMethods","original","observeArray","arrayKeys","getOwnPropertyNames","isSettingProps","walk","instanceData","defaultData","raw","prototypeAccessors","defineProperties","uid$2","expOrFn","deep","user","deps","newDeps","depIds","newDepIds","cleanupDeps","this$1","tmp","teardown","init","$mount","keepAlive","mountedNode","prepatch","insert","uid$1","dataDef","propsDef","$delete","immediate","hookRE","cbs","prevEl","prevVnode","prevActiveInstance","__patch__","_o","_n","_i","_m","_f","_b","_u","patternTypes","KeepAlive","include","exclude","builtInComponents","configDef","util","defineReactive","delete","ssrContext","version","testEl","acceptValue","svg","math","isHTMLTag","nodeOps","hooks","baseModules","klass","cssVarRE","importantRE","setProperty","normalizedName","normalize","prefixes","upper","prefixed","hasTransition","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","requestAnimationFrame","activate","platformModules","patch","backend","emptyNodeAt","createRmCb","childElm","removeNode","createElm","insertedVnodeQueue","nested","setScope","createChildren","invokeCreateHooks","isReactivated","initComponent","reactivateComponent","pendingInsert","isPatchable","innerNode","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","updateChildren","oldCh","newCh","removeOnly","oldKeyToIdx","idxInOld","elmToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","patchVnode","postpatch","invokeInsertHook","initial","hydrate","hasChildNodes","childrenMatch","isRenderedModule","isInitialPatch","isRealElement","hasAttribute","oldElm","parentElm$1","vmodel","model$1","originalDisplay","__vOriginalDisplay","platformDirectives","transitionProps","Transition","_leaving","oldRawChild","delayedLeave","moveClass","TransitionGroup","prevChildren","rawChildren","transitionData","kept","removed","c$1","beforeUpdate","hasMove","propertyName","_hasMove","clone","platformComponents","encoded","div","singleAttrValues","ncname","qnameCapture","g","&lt;","&gt;","&quot;","&amp;","&#10;","close","esc","space","up","down","genGuard","stop","prevent","self","ctrl","meta","middle","cloak","klass$1","style$1","modules$1","directives$1","baseOptions","reduce","ref$1","compile","finalOptions","tips","tip$$1","compiled","compileToFunctions","functionCompileCache","fnGenErrors","idToTemplate","mount","__WEBPACK_IMPORTED_MODULE_0__components_musique_vue__","__WEBPACK_IMPORTED_MODULE_0__components_musique_vue___default","musique","__WEBPACK_IMPORTED_MODULE_0_tone__","__WEBPACK_IMPORTED_MODULE_0_tone___default","__WEBPACK_IMPORTED_MODULE_1__note_vue__","__WEBPACK_IMPORTED_MODULE_1__note_vue___default","Synth","toMaster","Transport","note","sequence","Sequence","log","melodie","_this","removeAll","play","prout","__WEBPACK_IMPORTED_MODULE_0_vue__","__WEBPACK_IMPORTED_MODULE_1__App_vue__","__WEBPACK_IMPORTED_MODULE_1__App_vue___default","__WEBPACK_IMPORTED_MODULE_2_bootstrap_vue__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","require","_classCallCheck","instance","Constructor","TypeError","getActualBoundingClientRect","boundingRect","rect","k","_frameElement","defaultView","frameElement","frameRect","getScrollParents","computedStyle","parents","_style","overflow","overflowX","overflowY","removeUtilElements","zeroElement","getBounds","doc","docEl","box","origin","getOrigin","scrollWidth","clientTop","clientLeft","clientWidth","clientHeight","getOffsetParent","offsetParent","getScrollBarSize","_scrollBarSize","inner","outer","pointerEvents","visibility","widthContained","offsetWidth","widthScroll","out","regex","getClassName","setClassName","hasClass","SVGAnimatedString","baseVal","updateClasses","_inherits","subClass","superClass","setPrototypeOf","within","now","Date","addOffset","_len","offsets","_key","_ref","offsetToPx","getBoundingRect","tether","scrollParents","pageXOffset","innerWidth","win","BOUNDS_FORMAT","side","substr","_createClass","descriptor","protoProps","staticProps","TetherBase","uniqueId","zeroPosCache","defer","deferred","Evented","bindings","_bindings$event$i","Utils","_slicedToArray","sliceIterator","_arr","_d","iterator","done","_get","_x6","_x7","_x8","_again","receiver","desc","getPrototypeOf","_TetherBase$Utils","transformKey","tethers","lastCall","lastDuration","pendingTimeout","tick","min","MIRROR_LR","center","MIRROR_TB","OFFSET_MAP","autoToFixedAttachment","relativeToAttachment","attachmentToOffset","parseOffset","_value$split","_value$split2","parseAttachment","TetherClass","_Evented","history","initialize","_this2","defaults","targetAttachment","_options","targetModifier","jquery","getClass","addTargetClasses","disable","enable","bounds","hasBottomScroll","scrollBottom","borderTopWidth","borderBottomWidth","borderLeftWidth","fitAdj","scrollPercentage","_cache","_this3","_this4","_this5","elementAttach","targetAttach","_this6","sides","_addAttachClasses","_this7","flushChanges","clearCache","updateAttachClasses","elementPos","lastSize","_lastSize","targetPos","getTargetBounds","targetSize","manualOffset","manualTargetOffset","_module2","scrollbarSize","page","viewport","optimizations","moveElement","offsetPosition","offsetParentStyle","offsetParentSize","offsetBorder","scrollLeft","move","_this8","same","found","point","transcribe","_same","_pos","gpu","yPos","xPos","matchMedia","bodyElement","offsetParentIsBody","currentNode","writeCSS","write","Tether","targetHeight","targetWidth","allClasses","constraint","outOfBoundsClass","pinnedClass","addClasses","tAttachment","eAttachment","pin","changeAttachX","changeAttachY","_attachment$split","_attachment$split2","pinned","oob","oobClass","abutted","targetPosSide","shiftTop","shiftLeft","_shift","_shift2","Module","func","Tone","inputs","outputs","createGain","output","params","rampTime","isString","tmpObj","paramLoop","attrSplit","innerParam","param","Signal","Param","rampTo","AudioParam","_collectDefaults","subRet","subAttr","isFunction","constr","_super","superDefs","isLetter","sameConstructor","AudioNode","disconnect","connect","unit","outputNum","inputNum","defaultArg","destination","isNumber","connectSeries","currentUnit","toUnit","chain","fan","given","givenProp","fallbackProp","optionsObject","values","isBoolean","noOp","_readOnly","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","PI","sin","dbToGain","db","gainToDb","gain","LN10","intervalToFrequencyRatio","TempConstructor","audioContext","Context","setContext","sampleRate","hasAudioContext","hasPromises","hasWorkers","TONE_SILENCE_VERSION_LOGGING","SignalBase","outputNumber","inputNumber","TimelineSignal","_param","cancelScheduledValues","overridden","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","normalized","oversample","oversampling","RangeError","TimeBase","units","_expr","_noOp","copy","_defaultUnits","_primaryExpressions","_defaultExpr","exprString","_parseExprString","time","regexp","_beatsToUnits","_timeSignature","_ticksToUnits","hz","_frequencyToUnits","tr","q","total","_secondsToUnits","samples","_binaryExpressions","+","precedence","lh","rh","-","*","/","_unaryExpressions","neg","_syntaxGlue","(",")","_tokenize","expr","token","expressions","group","opName","op","reg","SyntaxError","peek","_matchGroup","prec","_parseBinary","lexer","_parseUnary","_parsePrimary","matching","freq","beats","bpm","seconds","ticks","PPQ","timeSignature","_pushExpr","mult","valueOf","Time","_plusNow","quantize","nextSubdivision","subdiv","subdivision","toSeconds","addNow","toNotation","testNotations","retNotation","_toNotationHelper","testTripletNotations","retTripletNotation","threshold","_notationToUnits","notationTime","floor","notation","primaryExprs","notationExprs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","toFixed","toTicks","toSamples","toFrequency","toMilliseconds","Frequency","midi","midiToFrequency","pitch","octave","noteToScaleIndex","noteNumber","transpose","harmonize","intervals","toMidi","frequencyToMidi","toNote","A4","LN2","scaleIndexToNote","cbb","c#","cx","dbb","d#","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g#","gx","abb","ab","a#","ax","bbb","bb","b#","bx","frequency","TransportTime","_secondsToTicks","Emitter","eventName","off","eventList","functions","emitterFunc","AudioContext","webkitAudioContext","_defineProperty","_latencyHint","_lookAhead","_updateInterval","_computedUpdateInterval","_worker","_createWorker","_constants","currentTime","URL","webkitURL","blob","Blob","blobUrl","createObjectURL","worker","Worker","_lastUpdate","getConstant","buffer","createBuffer","getChannelData","constant","createBufferSource","channelCount","channelCountMode","loop","lA","blockTime","postMessage","hint","lookAhead","latencyHint","updateInterval","supported","toneConnect","B","outNum","inNum","nativeConnect","toneDisconnect","nativeDisconnect","Type","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","convert","_lfo","lfo","_toUnits","LFO","convertedVal","_fromUnits","_minOutput","setValueAtTime","setRampPoint","currentVal","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","exponentialRampToValue","startTime","linearRampToValue","setTargetAtTime","timeConstant","setValueCurveAtTime","GainNode","createGainNode","Gain","_gainNode","createInsOuts","_gain","Timeline","_timeline","_toRemove","_iterating","memory","Infinity","_search","getAfter","getBefore","after","cancelBefore","beginning","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachFrom","forEachAtTime","_initial","Linear","Exponential","Target","Curve","getValueAtTime","beforeEvent","_searchBefore","setValue","sampleTime","scaling","floats","segmentTime","before","_searchAfter","linearRampToValueBetween","finish","exponentialRampToValueBetween","previouVal","previous","_exponentialApproach","_curveInterpolate","_linearInterpolate","_exponentialInterpolate","t0","v0","v1","t1","lowerIndex","upperIndex","lowerVal","upperVal","Pow","_exp","_expScaler","_expFunc","abs","Envelope","attack","decay","sustain","release","_attackCurve","_releaseCurve","_sig","attackCurve","releaseCurve","In","curveDef","Out","triggerAttack","velocity","originalAttack","currentValue","percentComplete","sliceIndex","triggerRelease","triggerAttackRelease","invertCurve","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","cos","bounceCurve","linear","exponential","bounce","cosine","step","ripple","sine","AmplitudeEnvelope","AnalyserNode","getFloatTimeDomainData","array","uint8","Uint8Array","getByteTimeDomainData","Analyser","_analyser","createAnalyser","_type","_returnType","returnType","_buffer","minDecibels","maxDecibels","smoothing","Waveform","FFT","ReturnType","Byte","Float","analyse","getByteFrequencyData","getFloatFrequencyData","frequencyBinCount","fftSize","smoothingTimeConstant","Compressor","_compressor","createDynamicsCompressor","knee","ratio","Add","_sum","Multiply","_mult","Negate","_multiply","Subtract","_neg","GreaterThanZero","_thresh","_scale","GreaterThan","_gtz","Abs","_abs","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","mod","AudioToGain","_norm","x","applyBinary","_eval","applyUnary","getNumber","literalNumber","Expr","_replacements","inputCount","_parseInputs","_nodes","_parseTree","_disposeNodes","_Expressions","signal","glue",",","a2g","binary","!","NOT","inputArray","inputMax","matchSyntax","syn","matchGroup","groupName","parseExpression","parseUnary","operator","parsePrimary","parseFunctionCall","parseArgumentList","EqualPowerGain","_eqPower","CrossFade","initialFade","_equalPowerA","_equalPowerB","_invert","Filter","_filters","detune","Q","_rolloff","rolloff","possibilities","cascadingCount","count","createBiquadFilter","connectionChain","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Scale","outputMin","outputMax","_outputMin","_outputMax","_add","_setRange","ScaleExp","exponent","DelayNode","createDelay","createDelayNode","Delay","_delayNode","maxDelay","delayTime","FeedbackCombFilter","_delay","_feedback","resonance","Follower","_filter","_frequencyValues","_sub","_attack","_release","_setAttackRelease","minTime","ScaledEnvelope","FrequencyEnvelope","_octaves","octaves","baseFrequency","Gate","_follower","_gt","thresh","attackTime","releaseTime","TimelineState","setStateAtTime","Clock","_nextTick","_lastState","_state","_boundLoop","_loop","lagCompensation","lag","loopInterval","currentState","tickTime","getStateAtTime","IntervalTimeline","_root","IntervalNode","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","isLeftChild","temp","balance","getBalance","_rotateLeft","pivotNode","_rotateRight","allNodes","searchAfter","_left","_right","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_scheduledEvents","_eventID","_repeatedEvents","_onceEvents","_syncedSignals","_swingTicks","_swingAmount","swing","swingSubdivision","loopStart","loopEnd","amount","schedule","timeline","scheduleRepeat","scheduleOnce","eventId","timeSig","startPosition","endPosition","setLoopPoints","ppq","transportPos","remainingTime","syncSignal","ratioSignal","unsyncSignal","syncedSignal","Volume","volume","_unmutedVolume","mute","Master","_volume","MasterConstructor","Source","_synced","_scheduled","_start","_stop","retrigger","sched","stateEvent","startOffset","unsync","OscillatorNode","noteOn","noteOff","setPeriodicWave","setWaveTable","createPeriodicWave","createWaveTable","Oscillator","_oscillator","_wave","_partials","partials","_phase","phase","Sine","Triangle","Sawtooth","Square","Custom","createOscillator","syncFrequency","unsyncFrequency","coefs","_getRealImaginary","periodicWave","periodicWaveSize","real","imag","partialCount","partial","_inverseFFT","sum","_getInitialValue","maxValue","twoPi","Zero","amplitude","_stoppedSignal","_zeros","_stoppedValue","_a2g","_scaler","_units","currentMin","currentMax","Limiter","LowpassCombFilter","_lowpass","dampening","Merge","_merger","createChannelMerger","Meter","_lastValue","Level","rms","sqrt","Split","_splitter","createChannelSplitter","MidSideSplit","_split","SQRT1_2","MidSideMerge","_merge","MidSideCompressor","_midSideSplit","_midSideMerge","Mono","MultibandCompressor","Panner","initialPan","_hasStereoPanner","_panner","createStereoPanner","pan","_crossFade","_zero","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","y","z","setOrientation","_aliasProperty","PanVol","CtrlInterpolate","lowerPosition","lower","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","random","dist","chosen","needsNormalizing","probability","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","randVal","CtrlRandom","integer","AudioBuffer","copyToChannel","chanNum","channel","copyFromChannel","dest","Buffer","_reversed","_xhr","url","onload","load","onerror","buff","_currentDownloads","abort","numberOfChannels","fromArray","isMultidimensional","channels","toMono","outputArray","numChannels","channelArray","sample","startSamples","endSamples","_reverse","loaded","rev","_downloadQueue","baseUrl","onError","onProgress","totalProgress","request","XMLHttpRequest","responseType","status","decodeAudioData","response","lengthComputable","send","cancelDownloads","supportsType","extension","canPlayType","removeEvents","success","fail","Buffers","urls","_buffers","_flattenUrls","_loadingCount","_bufferLoaded","isLoaded","buffName","toReturn","flatObject","Buses","channelName","sendKnob","receive","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","listener","OfflineAudioContext","webkitOfflineAudioContext","OfflineContext","offlineContext","_duration","_currentTime","oncomplete","renderedBuffer","startRendering","Offline","originalContext","rendered","Effect","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","AutoFilter","depth","oct","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","sensitivy","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","StereoEffect","effectSendL","effectSendR","effectReturnL","effectReturnR","FeedbackEffect","_feedbackGain","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","spread","deviation","Convolver","_convolver","createConvolver","Distortion","_distortion","distortion","deg","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","allpassL","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","MidSideEffect","midSend","sideSend","midReturn","sideReturn","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","PingPongDelay","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","factor","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","_midMult","_sideMult","_two","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Event","_playbackRate","_startOffset","humanize","playbackRate","_rescheduleEvents","startTick","_getLoopDuration","_tick","previousEvent","reschedulTime","variation","rate","loopDuration","Loop","_event","iterations","prob","iters","Part","_probability","_humanize","_forEach","_startNote","at","_restartEvent","_setAll","_testLoopBoundries","Pattern","_pattern","vals","_subdivision","_indexTime","subSubdivision","PulseOscillator","_widthGate","_sawtooth","PWMOscillator","_pulse","modulationFrequency","_modulator","FMOscillator","_carrier","modulationIndex","modulationType","harmonicity","_modulationNode","AMOscillator","_modulationScale","FatOscillator","_oscillators","_spread","osc","OmniOscillator","_sourceType","OmniOscType","Pulse","PWM","Osc","FM","AM","Fat","prefix","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","mType","Instrument","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","currentNote","portTime","oscillator","envelope","AMSynth","modulation","modulationEnvelope","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","vel","octs","AudioBufferSourceNode","noteGrainOn","BufferSource","onended","_startTime","_stopTime","_source","fadeIn","fadeOut","_onendedTimeout","fadeInTime","fadeOutTime","playbackState","_onended","createBuffers","_noiseArrays","_noiseBuffers","Noise","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","white","brown","lastOut","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","polyphony","MAX_POLYPHONY","voices","_triggers","voice","notes","oldest","releaseAll","Player","autostart","_onload","seek","Sampler","player","GainToAudio","Normalize","inputMin","_inputMin","_inputMax","_div","MultiPlayer","buffers","_activeSources","_makeSource","bufferName","startLoop","stopAll","GrainPlayer","_player","_grainSize","grainSize","_overlap","overlap","drift","_offset","bufferDuration","originalFadeIn","endSegmentDuration","scrub","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","device","deviceId","audio","echoCancellation","mediaDevices","getUserMedia","stream","createMediaStreamSource","getAudioTracks","track","kind","groupId","_vm","_h","__r","$event","locals","newStyles","part","eval"],"mappings":"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","file":"build.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 9);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = Object.create(options.computed || null)\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n    options.computed = computed\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(23)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tether__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tether___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_tether__);\nfunction observeDOM(t,e,n){var i=window.MutationObserver||window.WebKitMutationObserver,o=window.addEventListener;if(i){var s=new i(function(t){(t[0].addedNodes.length>0||t[0].removedNodes.length>0)&&e()});s.observe(t,Object.assign({childList:!0,subtree:!0},n))}else o&&(t.addEventListener(\"DOMNodeInserted\",e,!1),t.addEventListener(\"DOMNodeRemoved\",e,!1))}function targets(t,e,n,i){var o=t.__vue__;if(!o)return void console.warn(\"__vue__ is not available on element\",t);var s=Object.keys(e.modifiers||{}).filter(function(t){return!all_listen_types[t]});e.value&&s.push(e.value);var r=function(){i({targets:s,vm:o})};Object.keys(all_listen_types).forEach(function(i){(n[i]||e.modifiers[i])&&t.addEventListener(i,r)})}function isElement(t){return t.nodeType}function closest(t,e){var n=t.closest(e);return n===t?null:n}function $QSA(t,e){return e||(e=document),isElement(e)?Array.prototype.slice.call(e.querySelectorAll(t)):[]}function $QS(t,e){return e||(e=document),isElement(e)?e.querySelector(t)||null:null}function getVm(t){return t?t.__vue__:null}function toType(t){return{}.toString.call(t).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()}function typeCheckConfig(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],s=e[i],r=s&&isElement(s)?\"element\":toType(s);new RegExp(o).test(r)||console.error(t+': Option \"'+i+'\" provided type \"'+r+'\" but expected type \"'+o+'\"')}}function ScrollSpy(t,e){this._$el=t,this._selector=[Selector.NAV_LINKS,Selector.LIST_ITEMS,Selector.DROPDOWN_ITEMS].join(\",\"),this._config=Object.assign({},Default),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,this._$root=null,this._resizeTimeout=null,this.updateConfig(e)}var alert={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.localShow?n(\"div\",{class:t.classObject,attrs:{role:\"alert\",\"aria-live\":\"polite\",\"aria-atomic\":\"true\"}},[t.dismissible?n(\"button\",{staticClass:\"close\",attrs:{type:\"button\",\"data-dismiss\":\"alert\",\"aria-label\":\"dismissLabel\"},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.dismiss(e)}}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"×\")])]):t._e(),t._t(\"default\")],2):t._e()},staticRenderFns:[],data:function(){return{countDownTimerId:null,dismissed:!1}},created:function(){this.state&&console.warn(\"<b-alrt> state property is deprecated, please use variant instead.\")},computed:{classObject:function(){return[\"alert\",this.alertVariant,this.dismissible?\"alert-dismissible\":\"\"]},alertVariant:function(){var t=this.state||this.variant||\"info\";return\"alert-\"+t},localShow:function(){return!this.dismissed&&(this.countDownTimerId||this.show)}},props:{variant:{type:String,default:\"info\"},state:{type:String,default:null},dismissible:{type:Boolean,default:!1},dismissLabel:{type:String,default:\"Close\"},show:{type:[Boolean,Number],default:!1}},watch:{show:function(){this.showChanged()}},mounted:function(){this.showChanged()},methods:{dismiss:function(){this.dismissed=!0,this.$emit(\"dismissed\"),this.clearCounter()},clearCounter:function(){this.countDownTimerId&&clearInterval(this.countDownTimerId)},showChanged:function(){var t=this;if(this.dismissed=!1,this.show!==!0&&this.show!==!1&&null!==this.show&&0!==this.show){var e=this.show;this.$emit(\"dismiss-count-down\",e),this.clearCounter(),this.countDownTimerId=setInterval(function(){return e<2?t.dismiss():(e--,void t.$emit(\"dismiss-count-down\",e))},1e3)}}}},linkMixin={computed:{isRouterLink:function(){return Boolean(this.$router&&this.to&&!this.disabled)},_href:function(){return this.disabled?\"#\":this.href?this.href:this.to&&\"string\"==typeof this.to?this.to:void 0},linkClassObject:function(){return[this.active?this.exact?this.exactActiveClass:this.activeClass:null,this.disabled?\"disabled\":null]}},props:{active:{type:Boolean,default:!1},disabled:Boolean,href:{type:String,default:\"#\"},to:{type:[String,Object],default:null},tag:{type:String,default:\"a\"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:{type:String,default:\"active\"},exactActiveClass:{type:String,default:\"active\"},event:{type:[String,Array],default:\"click\"}},methods:{linkClick:function(t){this.disabled||(this.$root.$emit(\"clicked::link\",this),this.$emit(\"click\")),(this.disabled||!this.isRouterLink&&\"#\"===this._href)&&(t.preventDefault(),t.stopPropagation())}}},bLink={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.isRouterLink?n(\"router-link\",{tag:\"a\",class:t.linkClassObject,attrs:{\"active-class\":t.activeClass,\"exact-active-class\":t.exactActiveClass,disabled:t.disabled,\"aria-disabled\":t.disabled?\"true\":\"false\",to:t.to,exact:t.exact,append:t.append,replace:t.replace,event:t.event,tag:t.tag},on:{click:t.linkClick}},[t._t(\"default\")],2):n(\"a\",{class:t.linkClassObject,attrs:{disabled:t.disabled,\"aria-disabled\":t.disabled?\"true\":\"false\",href:t._href},on:{click:t.linkClick}},[t._t(\"default\")],2)},staticRenderFns:[],mixins:[linkMixin]},breadcrumb={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"ol\",{staticClass:\"breadcrumb\",attrs:{role:\"navigation\"}},[t._l(t.items2,function(e){return n(\"li\",{class:[\"breadcrumb-item\",e.__active?\"active\":null],attrs:{role:\"presentation\"},on:{click:function(n){t.onclick(e)}}},[e.active?n(\"span\",{domProps:{innerHTML:t._s(e.text)}}):n(\"b-link\",{attrs:{to:e.to,href:e.href||e.link},domProps:{innerHTML:t._s(e.text)},on:{click:t.onclick}})],1)}),t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},computed:{componentType:function(){return this.to?\"router-link\":\"a\"},items2:function(){var t=this.items.length>0&&this.items[this.items.length-1];return this.items.map(function(e){return\"string\"==typeof e?{text:e,link:\"#\",active:e===t}:(e.active!==!0&&e.active!==!1?e.__active=e===t:e.__active=e.active,e)})}},props:{items:{type:Array,default:function(){return[]},required:!0}},methods:{onclick:function(t){this.$emit(\"click\",t)}}},bBtn={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.componentType,{tag:\"button\",class:t.classObject,attrs:{to:t.to,href:t.href,disabled:t.disabled},on:{click:t.onclick}},[t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},computed:{classObject:function(){return[\"btn\",this.btnVariant,this.btnSize,this.btnBlock,this.btnDisabled,this.inactive?\"btn-inactive\":\"\"]},componentType:function(){return this.href||this.to?\"b-link\":\"button\"},btnBlock:function(){return this.block?\"btn-block\":\"\"},btnVariant:function(){return this.variant?\"btn-\"+this.variant:\"btn-secondary\"},btnSize:function(){return this.size?\"btn-\"+this.size:\"\"},btnDisabled:function(){return this.disabled?\"disabled\":\"\"}},props:{block:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},inactive:{type:Boolean,default:!1},size:{type:String,default:null},variant:{type:String,default:null},to:{type:[String,Object]},href:{type:String}},methods:{onclick:function(t){this.disabled?(t.stopPropagation(),t.preventDefault()):this.$emit(\"click\",t)}}},ITEM_SELECTOR=['.btn:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','.form-control:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','select:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','input[type=\"checkbox\"]:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','input[type=\"radio\"]:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),buttonToolbar={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:t.classObject,attrs:{role:\"toolbar\",tabindex:t.keyNav?\"0\":null},on:{focusin:function(e){return e.target!==e.currentTarget?null:void t.focusFirst(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:void t.focusNext(e,!1):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"left\",37))&&e.shiftKey?\"button\"in e&&0!==e.button?null:void t.focusFirst(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"up\",38))&&e.shiftKey?void t.focusFirst(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"right\",39))&&e.shiftKey?\"button\"in e&&2!==e.button?null:void t.focusLast(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"down\",40))&&e.shiftKey?void t.focusLast(e):null}]}},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[\"btn-toolbar\",this.justify&&!this.vertical?\"justify-content-between\":\"\"]}},props:{justify:{type:Boolean,default:!1},KeyNav:{type:Boolean,default:!1}},methods:{setItemFocus:function(t){this.$nextTick(function(){t.focus()})},focusNext:function(t,e){if(this.keyNav){t.preventDefault(),t.stopPropagation();var n=this.getItems();if(!(n.length<1)){var i=n.indexOf(t.target);e&&i>0?i--:!e&&i<n.length-1&&i++,i<0&&(i=0),this.setItemFocus(n[i])}}},focusFirst:function(t){if(this.keyNav){t.preventDefault(),t.stopPropagation();var e=this.getItems();e.length>0&&this.setItemFocus(e[0])}},focusLast:function(t){if(this.keyNav){t.preventDefault(),t.stopPropagation();var e=this.getItems();e.length>0&&this.setItemFocus([e.length-1])}},getItems:function(){var t=Array.prototype.slice.call(this.$el.querySelectorAll(ITEM_SELECTOR));return t.forEach(function(t){t.tabIndex=-1}),t}},mounted:function(){this.keyNav&&this.getItems()}},buttonGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:t.classObject},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[\"btn-group\",this.vertical?\"btn-group-vertical\":\"\",this.justify&&!this.vertical?\"justify-content-between\":\"\",this.size?\"btn-group-\"+this.size:\"\"]}},props:{vertical:{type:Boolean,default:!1},justify:{type:Boolean,default:!1},size:{type:String,default:null}}},clickOut={mounted:function(){\"undefined\"!=typeof document&&document.documentElement.addEventListener(\"click\",this._clickOutListener)},destroyed:function(){\"undefined\"!=typeof document&&document.removeEventListener(\"click\",this._clickOutListener)},methods:{_clickOutListener:function(t){this.$el.contains(t.target)||this.clickOutListener&&this.clickOutListener()}}},ITEM_SELECTOR$1=['.dropdown-item:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','.dropdown-header:not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),dropdown={props:{split:{type:Boolean,default:!1},text:{type:String,default:\"\"},dropup:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},right:{type:Boolean,default:!1}},created:function(){var t=this,e=function(e){e!==t&&(t.visible=!1)};this.$root.$on(\"shown::dropdown\",e),this.$root.$on(\"clicked::link\",e)},watch:{visible:function(t,e){var n=this;if(t!==e)if(t){if(this.$root.$emit(\"shown::dropdown\",this),\"undefined\"!=typeof document&&\"ontouchstart\"in document.documentElement){var i=Array.prototype.slice.call(document.body.children);i.forEach(function(t){t.addEventListener(\"mouseover\",n.noop)})}}else if(this.$root.$emit(\"hidden::dropdown\",this),\"undefined\"!=typeof document&&\"ontouchstart\"in document.documentElement){var o=Array.prototype.slice.call(document.body.children);o.forEach(function(t){t.removeEventListener(\"mouseover\",n.noop)})}}},methods:{noop:function(){},toggle:function(){return this.disabled?void(this.visible=!1):(this.visible=!this.visible,void(this.visible&&this.$nextTick(function(){var t=this.getItems();t.length>0&&t[0].focus()})))},onTab:function(){this.visible&&(this.visible=!1)},onEsc:function(t){this.visible&&(this.visible=!1,t.preventDefault(),t.stopPropagation(),this.$nextTick(function(){var t;t=this.split&&this.$refs.toggle?this.$refs.toggle.$el||this.$refs.toggle:this.$refs.button.$el||this.$refs.button,t&&t.focus&&t.focus()}))},focusNext:function(t,e){if(this.visible){t.preventDefault(),t.stopPropagation();var n=this.getItems();if(!(n.length<1)){var i=n.indexOf(t.target);e&&i>0?i--:!e&&i<n.length-1&&i++,i<0&&(i=0),n[i].focus()}}},getItems:function(){return Array.prototype.slice.call(this.$refs.menu.querySelectorAll(ITEM_SELECTOR$1))}}},buttonGroupDropdown={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"btn-group\",\"dropdown\",{dropup:t.dropup,show:t.visible}]},[n(\"b-button\",{ref:\"button\",class:{\"dropdown-toggle\":!t.split,\"btn-link\":t.link},attrs:{id:t.id?t.id+\"__BV_button_\":null,\"aria-expanded\":t.visible?\"true\":\"false\",variant:t.variant,size:t.size,disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.click(e)},kedown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.click(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.click(e)):null}]}},[t._t(\"text\",[t._v(t._s(t.text))])],2),n(\"div\",{ref:\"menu\",class:[\"dropdown-menu\",{\"dropdown-menu-right\":t.right}],attrs:{role:\"menu\",\"aria-labelledby\":t.id?t.id+\"__BV_button_\":null},on:{keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"tab\",9)?void t.onTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null}]}},[t._t(\"default\")],2)],1)},staticRenderFns:[],mixins:[clickOut,dropdown],data:function(){return{visible:!1}},computed:{dropdownToggle:function(){return this.caret?\"dropdown-toggle\":\"\"}},props:{id:{type:String},caret:{type:Boolean,default:!0}},methods:{clickOutListener:function(){this.visible=!1}}},inputGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:t.classObject,attrs:{role:\"group\"}},[t._t(\"left\",[t.left?n(\"div\",{staticClass:\"input-group-addon\",domProps:{innerHTML:t._s(t.left)}}):t._e()]),t._t(\"default\"),t._t(\"right\",[t.right?n(\"div\",{staticClass:\"input-group-addon\",domProps:{innerHTML:t._s(t.right)}}):t._e()])],2)},staticRenderFns:[],computed:{classObject:function(){return[\"input-group\",this.size?\"input-group-\"+this.size:\"\",this.state?\"has-\"+this.state:\"\"]}},props:{size:{type:String,default:null},state:{type:String,default:null},left:{type:String,default:null},right:{type:String,default:null}}},inputGroupAddon={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"input-group-addon\",attrs:{id:t.id}},[t._t(\"default\")],2)},staticRenderFns:[],props:{id:{type:String,default:null}}},inputGroupButton={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"input-group-btn\"},[t._t(\"default\")],2)},staticRenderFns:[],props:{}},card={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",class:[\"card\",t.cardVariant,t.cardAlign,t.cardInverse]},[t._t(\"img\",[t.img?n(\"img\",{staticClass:\"card-img\",attrs:{src:t.img,alt:t.imgAlt}}):t._e()]),t.header||t.showHeader?n(t.headerTag,{tag:\"component\",staticClass:\"card-header\"},[t._t(\"header\",[n(\"div\",{domProps:{innerHTML:t._s(t.header)}})])],2):t._e(),t.noBlock?[t._t(\"default\")]:n(\"div\",{class:t.blockClass},[t.title?n(\"h4\",{staticClass:\"card-title\",domProps:{innerHTML:t._s(t.title)}}):t._e(),t.subTitle?n(\"h6\",{staticClass:\"card-subtitle mb-2 text-muted\",domProps:{innerHTML:t._s(t.subTitle)}}):t._e(),t._t(\"default\")],2),t.footer||t.showFooter?n(t.footerTag,{tag:\"component\",staticClass:\"card-footer\"},[t._t(\"footer\",[n(\"div\",{domProps:{innerHTML:t._s(t.footer)}})])],2):t._e()],2)},staticRenderFns:[],computed:{blockClass:function(){return[\"card-block\",this.overlay?\"card-img-overlay\":null]},cardVariant:function(){return this.variant?\"card-\"+this.variant:null},cardInverse:function(){return this.overlay||this.inverse?\"card-inverse\":null===this.inverse&&this.variant&&this.variant.length>0&&this.variant.indexOf(\"outline\")===-1?\"card-inverse\":void 0},cardAlign:function(){return this.align?\"text-\"+this.align:null}},props:{align:{type:String,default:null},inverse:{type:Boolean,default:null},variant:{type:String,default:null},tag:{type:String,default:\"div\"},header:{type:String,default:null},showHeader:{type:Boolean,default:!1},headerTag:{type:String,default:\"div\"},footer:{type:String,default:null},showFooter:{type:Boolean,default:!1},footerTag:{type:String,default:\"div\"},title:{type:String,default:null},subTitle:{type:String,default:null},noBlock:{type:Boolean,default:!1},img:{type:String,default:null},imgAlt:{type:String,default:null},overlay:{type:Boolean,default:!1}}},cardGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",class:[\"card-\"+t.type]},[t._t(\"default\")],2)},staticRenderFns:[],computed:{type:function(){return this.deck?\"deck\":this.columns?\"columns\":\"group\"}},props:{tag:{type:String,default:\"div\"},deck:{type:Boolean,default:!1},columns:{type:Boolean,default:!1}}},DIRECTION={next:{current:\"carousel-item-left\",next:\"carousel-item-right\",overlay:\"carousel-item-next\"},prev:{current:\"carousel-item-right\",next:\"carousel-item-left\",overlay:\"carousel-item-prev\"}},carousel={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"carousel slide\",style:{background:t.background,height:t.height},attrs:{role:\"region\",id:t.id||null,\"aria-busy\":t.isSliding?\"true\":\"false\"},on:{mouseenter:t.pause,mouseleave:t.start,focusin:t.pause,focusout:function(e){t.restart(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:void t.prev(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:void t.next(e):null}]}},[n(\"ol\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.indicators,expression:\"indicators\"}],staticClass:\"carousel-indicators\",attrs:{role:\"group\",\"aria-hidden\":t.indicators?\"false\":\"true\",\"aria-label\":t.indicators&&t.labelIndicators?t.labelIndicators:null,\"aria-owns\":t.indictors&&t.id?t.id+\"__BV_inner_\":null,\"aria-activedescendant\":t.slides[t.index].id||null,tabindex:t.indicators?\"0\":\"-1\"},on:{focusin:function(e){return e.target!==e.currentTarget?null:void t.focusActiveIndicator(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:(e.stopPropagation(),e.preventDefault(),void t.focusPrevIndicator(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?(e.stopPropagation(),e.preventDefault(),void t.focusPrevIndicator(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:(e.stopPropagation(),e.preventDefault(),void t.focusNextIndicator(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?(e.stopPropagation(),e.preventDefault(),void t.focusNextIndicator(e)):null}]}},t._l(t.slides.length,function(e){return n(\"li\",{ref:\"indcators\",refInFor:!0,class:{active:e-1===t.index},attrs:{role:\"button\",tabindex:\"-1\",id:t.id?t.id+\"__BV_indicator_\"+e+\"_\":null,\"aria-current\":e-1===t.index?\"true\":\"false\",\"aria-posinset\":e,\"aria-setsize\":t.slides.length,\"aria-label\":t.labelGotoSlide+\" \"+e,\"aria-describedby\":t.slides[e-1].id||null,\"aria-controls\":t.id?t.id+\"__BV_inner_\":null},on:{click:function(n){t.index=e-1},keydown:[function(n){return\"button\"in n||!t._k(n.keyCode,\"enter\",13)?(n.stopPropagation(),n.preventDefault(),void(t.index=e-1)):null},function(n){return\"button\"in n||!t._k(n.keyCode,\"space\",32)?(n.stopPropagation(),n.preventDefault(),void(t.index=e-1)):null}]}})})),n(\"div\",{staticClass:\"carousel-inner\",attrs:{role:\"list\",id:t.id?t.id+\"__BV_inner_\":null}},[t._t(\"default\")],2),t.controls?[n(\"a\",{staticClass:\"carousel-control-prev\",attrs:{href:\"#\",role:\"button\",\"data-slide\":\"prev\",\"aria-controls\":t.id?t.id+\"__BV_inner_\":null},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.prev(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.prev(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.prev(e)):null}]}},[n(\"span\",{staticClass:\"carousel-control-prev-icon\",attrs:{\"aria-hidden\":\"true\"}}),t._v(\" \"),n(\"span\",{staticClass:\"sr-only\"},[t._v(t._s(t.labelPrev))])]),n(\"a\",{staticClass:\"carousel-control-next\",attrs:{href:\"#\",role:\"button\",\"data-slide\":\"next\",\"aria-controls\":t.id?t.id+\"__BV_inner_\":null},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.next(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.next(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.next(e)):null}]}},[n(\"span\",{staticClass:\"carousel-control-next-icon\",attrs:{\"aria-hidden\":\"true\"}}),t._v(\" \"),n(\"span\",{staticClass:\"sr-only\"},[t._v(t._s(t.labelNext))])])]:t._e()],2)},staticRenderFns:[],data:function(){return{index:0,isSliding:!1,slides:[]}},props:{id:{type:String},labelPrev:{type:String,default:\"Previous Slide\"},labelNext:{type:String,default:\"Next Slide\"},labelGotoSlide:{type:String,default:\"Goto Slide\"},labelIndicators:{type:String,default:\"Select a slide to display\"},interval:{type:Number,default:5e3},indicators:{type:Boolean,default:!1},controls:{type:Boolean,default:!1},height:{type:String},background:{type:String}},methods:{prev:function(){this.index<=0?this.index=this.slides.length-1:this.index--},next:function(){this.index>=this.slides.length-1?this.index=0:this.index++},pause:function(){0!==this.interval&&\"undefined\"!=typeof this.interval&&(clearInterval(this._intervalId),this._intervalId=null,this.slides[this.index].tabIndex=0)},start:function(){var t=this;0!==this.interval&&\"undefined\"!=typeof this.interval&&(this.slides.forEach(function(t){t.tabIndex=-1}),this._intervalId=setInterval(function(){t.next()},this.interval))},restart:function(t){t.relatedTarget&&this.$el.contains(t.relatedTarget)||this.start()},focusActiveIndicator:function(){var t=this;this.indicators&this.$refs.indicators.length>0&&this.$nextTick(function(){t.$refs.indicators[t.index].focus()})},focusPrevIndicator:function(){var t=this;if(this.indicators&this.$refs.indicators.length>0){var e=this.$refs.indicators.indexOf(function(t){return Boolean(t===document.activeElement)});e>0&&this.$nextTick(function(){t.$refs.indicators[e-1].focus()})}},focusNextIndicator:function(){var t=this;if(this.indicators&this.$refs.indicators.length>0){var e=this.$refs.indicators.indexOf(function(t){return Boolean(t===document.activeElement)});e>0&&e<this.$refs.indicators-1&&this.$nextTick(function(){t.$refs.indicators[e+1].focus()})}}},mounted:function(){var t=this;this.slides=this.$el.querySelectorAll(\".carousel-item\"),this.slides[0].classList.add(\"active\"),this.slides.forEach(function(e,n){var i=n+1;e.setAttribute(\"aria-current\",0===n?\"true\":\"false\"),e.setAttribute(\"aria-posinset\",String(i)),e.setAttribute(\"aria-setsize\",String(t.slides.length)),e.tabIndex=-1,t.id&&e.setAttribute(\"aria-controlledby\",t.id+\"__BV_indicator_\"+i+\"_\")}),this._intervalId=null,this.start()},watch:{index:function(t,e){var n=this;if(t!==e){if(this.isSliding)return void(this.index=e);var i=t>e?DIRECTION.next:DIRECTION.prev;0===e&&t===this.slides.length-1?i=DIRECTION.prev:e===this.slides.length-1&&0===t&&(i=DIRECTION.next);var o=this.slides[e],s=this.slides[t];o&&s&&(this.isSliding=!0,s.classList.add(i.next,i.overlay),o.classList.add(i.current),this._carouselAnimation=setTimeout(function(){n.isSliding=!1,n.$emit(\"slide\",t),o.classList.remove(\"active\"),o.setAttribute(\"aria-current\",\"false\"),o.setAttribute(\"aria-hidden\",\"true\"),o.tabIndex=-1,s.classList.add(\"active\"),s.setAttribute(\"aria-current\",\"true\"),o.setAttribute(\"aria-hidden\",\"false\"),o.tabIndex=-1,n._intervalId||(o.tabIndex=0,n.$nextTick(function(){o.focus()})),o.classList.remove(i.current),s.classList.remove(i.next,i.overlay)},500))}}},destroyed:function(){clearTimeout(this._carouselAnimation),clearInterval(this._intervalId)}},carouselSlide={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"carousel-item\",style:{background:t.background,height:t.height},attrs:{role:\"listitem\",id:t.id||null}},[t.img?n(\"img\",{staticClass:\"d-block img-fluid\",attrs:{src:t.img,alt:t.imgAlt}}):t._e(),n(\"div\",{class:t.contentClasses},[t.caption?n(\"h3\",{domProps:{innerHTML:t._s(t.caption)}}):t._e(),t.text?n(\"p\",{domProps:{innerHTML:t._s(t.text)}}):t._e(),t._t(\"default\")],2)])},staticRenderFns:[],props:{id:{type:String},img:{type:String},imgAlt:{type:String},contentVisibleUp:{type:String},caption:{type:String},text:{type:String},background:{type:String},height:{type:String}},computed:{contentClasses:function(){var t={\"carousel-caption\":Boolean(this.caption)};return this.contentVisibleUp&&(t[\"d-none\"]=!0,t[\"d-\"+this.contentVisibleUp+\"-block\"]=!0),t}}},collapse={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"transition\",{attrs:{name:\"collapse\"},on:{enter:t.enter,\"after-enter\":t.clearHeight,leave:t.leave,\"after-leave\":t.clearHeight}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.show,expression:\"show\"}],class:t.classObject,attrs:{\"aria-expanded\":t.show?\"true\":\"false\"}},[t._t(\"default\")],2)])},staticRenderFns:[],data:function(){return{show:!1}},computed:{classObject:function(){return{\"navbar-collapse\":this.isNav,show:this.show}}},props:{isNav:{type:Boolean,default:!1},id:{type:String,required:!0}},methods:{toggle:function(){this.show=!this.show,this.emitState()},enter:function(t){t.style.height=\"auto\";var e=getComputedStyle(t).height;t.style.height=\"0px\",t.offsetHeight,t.style.height=e},leave:function(t){t.style.height=\"auto\";var e=getComputedStyle(t).height;t.style.height=e,t.offsetHeight,t.style.height=\"0px\"},clearHeight:function(t){t.style.height=null},emitState:function(){this.$root.$emit(\"collapse::toggle::state\",this.id,this.state)}},created:function(){var t=this;this.$root.$on(\"collapse::toggle\",function(e){e===t.id&&t.toggle()})},mounted:function(){this.emitState()}},dropdown$1={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"dropdown\",\"btn-group\",{dropup:t.dropup,show:t.visible}],attrs:{id:t.id||null}},[n(\"b-button\",{ref:\"button\",class:{\"dropdown-toggle\":!t.split,\"btn-link\":t.link},attrs:{id:t.id?t.id+\"__BV_button_\":null,\"aria-haspopup\":t.split?null:\"true\",\"aria-expanded\":t.split?null:t.visible?\"true\":\"false\",variant:t.variant,size:t.size,disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.click(e)}}},[t._t(\"text\",[t._v(t._s(t.text))])],2),t.split?n(\"b-button\",{ref:\"toggle\",class:[\"dropdown-toggle\",\"dropdown-toggle-split\",{\"btn-link\":t.link}],attrs:{id:t.id?t.id+\"__BV_toggle_\":null,\"aria-haspopup\":t.split?\"true\":null,\"aria-expanded\":t.split?t.visible?\"true\":\"false\":null,variant:t.variant,size:t.size,disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.toggle(e)}}},[n(\"span\",{staticClass:\"sr-only\"},[t._v(t._s(t.toggleText))])]):t._e(),n(\"div\",{ref:\"menu\",class:[\"dropdown-menu\",{\"dropdown-menu-right\":t.right}],attrs:{role:\"menu\",\"aria-labelledby\":t.id?t.id+(t.split?\"__BV_toggle_\":\"__BV_button_\"):null},on:{keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"tab\",9)?void t.onTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null}]}},[t._t(\"default\")],2)],1)},staticRenderFns:[],mixins:[clickOut,dropdown],components:{bButton:bBtn},data:function(){return{visible:!1}},props:{id:{type:String},toggleText:{type:String,default:\"Toggle Dropdown\"},size:{type:String,default:null},variant:{type:String,default:null},link:{type:Boolean,default:!1}},methods:{clickOutListener:function(){this.visible=!1},click:function(t){return this.disabled?void(this.visible=!1):void(this.split?(this.$emit(\"click\",t),this.$root.$emit(\"shown::dropdown\",this)):this.toggle())}}},dropdownItem={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"b-link\",{staticClass:\"dropdown-item\",attrs:{active:t.active,disabled:t.disabled,href:t.href,to:t.to,tag:t.tag,exact:t.exact,append:t.append,replace:t.replace,\"active-class\":t.activeClass,\"exact-active-class\":t.exactActiveClass,event:t.event},on:{click:function(e){t.$emit(\"click\")}}},[t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},mixins:[linkMixin]},dropdownDivider={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"dropdown-divider\",attrs:{role:\"separator\"}})},staticRenderFns:[],props:{}},dropdownHeader={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",staticClass:\"dropdown-header\",attrs:{tabindex:\"-1\"}},[t._t(\"default\")],2)},staticRenderFns:[],props:{tag:{type:String,default:\"h6\"}}},dropdownSelect={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"dropdown-select\",class:{open:t.show,dropdown:!t.dropup,dropup:t.dropup}},[n(\"button\",{class:[\"btn\",\"dropdown\",t.dropdownToggle,t.btnVariant,t.btnSize],attrs:{id:t.id,role:\"button\",\"aria-haspopup\":\"true\",\"aria-expanded\":\"show\",disabled:t.disabled},on:{click:function(e){e.preventDefault(),t.toggle(e)}}},[n(\"span\",{staticClass:\"checked-items\",domProps:{innerHTML:t._s(t.displayItem)}})]),n(\"ul\",{staticClass:\"dropdown-menu\",class:{\"dropdown-menu-right\":\"right\"==t.position},attrs:{\"aria-labelledby\":\"dLabel\"}},t._l(t.list,function(e){return n(\"li\",[n(\"button\",{staticClass:\"dropdown-item\",attrs:{click:t.select(e)}},[t._v(t._s(e.text))])])}))])},staticRenderFns:[],data:function(){return{show:!1,selected:!1}},computed:{btnVariant:function(){return this.variant&&\"default\"!==this.variant?\"btn-\"+this.variant:\"btn-secondary\"},btnSize:function(){return this.size&&\"default\"!==this.size?\"btn-\"+this.size:\"\"},dropdownToggle:function(){return this.caret?\"dropdown-toggle\":\"\"},displayItem:function(){if(this.returnObject&&this.model&&!this.model.text||!this.returnObject&&this.model&&0===this.model.length||this.forceDefault)return this.defaultText;if(this.returnObject&&this.model&&this.model.text)return this.model.text;if(!this.returnObject&&this.model){var t=this.model||\"\";return this.list.forEach(function(e){e.value===this.model&&(t=e.text)}),t}return\"\"}},props:{id:{type:String},model:{required:!1},list:{type:Array,default:[],required:!0},caret:{type:Boolean,default:!0},position:{type:String,default:\"left\"},size:{type:String,default:\"\"},variant:{type:String,default:\"default\"},defaultText:{type:String,default:\"Plase select one\"},forceDefault:{type:Boolean,default:!1},returnObject:{type:Boolean,default:!1},dropup:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},methods:{toggle:function(t){this.show=!this.show,this.show?(this.$root.$emit(\"shown:dropdown\",this.id),t.stopPropagation()):this.$root.$emit(\"hidden::dropdown\",this.id)},select:function(t){this.returnObject?this.model=t:this.model=t.value,this.show=!1,this.$root.$emit(\"selected::dropdown\",this.id,this.model)}},created:function(){var t=this.$root;t.$on(\"hide::dropdown\",function(){this.show=!1})}},form={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"form\",{class:t.classObject},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[this.inline?\"form-inline\":\"\"]}},props:{inline:{type:Boolean,default:!1}}},formFieldset={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"form-group\",\"row\",t.inputState],attrs:{role:\"group\",\"aria-describedby\":t.describedBy}},[t.label?n(\"label\",{class:[t.labelSrOnly?\"sr-only\":\"col-form-label\",t.labelLayout,t.labelAlignClass],\nattrs:{for:t.target,id:t.labelId},domProps:{innerHTML:t._s(t.label)}}):t._e(),n(\"div\",{ref:\"content\",class:t.inputLayout},[t._t(\"default\"),t.feedback?n(\"div\",{staticClass:\"form-text form-control-feedback\",attrs:{id:t.feedbackId,role:\"alert\",\"aria-live\":\"assertive\",\"aria-atomic\":\"true\"},domProps:{innerHTML:t._s(t.feedback)}}):t._e(),t.description?n(\"small\",{staticClass:\"form-text text-muted\",attrs:{id:t.descriptionId},domProps:{innerHTML:t._s(t.description)}}):t._e()],2)])},staticRenderFns:[],data:function(){return{target:null}},computed:{labelId:function(){return this.id&&this.label?this.id+\"__BV_label_\":null},descriptionId:function(){return this.id&&this.description?this.id+\"__BV_description_\":null},feedbackId:function(){return this.id&&this.feedback?this.id+\"__BV_feedback_\":null},describedBy:function(){return this.id&&(this.label||this.feedback||this.description)?[this.labelId,this.descriptionId,this.feedbackId].filter(function(t){return t}).join(\" \"):null},inputState:function(){return this.state?\"has-\"+this.state:\"\"},labelLayout:function(){return this.labelSrOnly?null:this.horizontal?\"col-sm-\"+this.labelSize:\"col-12\"},labelAlignClass:function(){return this.labelSrOnly?null:this.labelTextAlign?\"text-\"+this.labelTextAlign:null},inputLayout:function(){return this.horizontal?\"col-sm-\"+(12-this.labelSize):\"col-12\"}},methods:{updateTarget:function(){var t=this.$refs.content;if(!t)return null;var e=t.querySelector(this.inputSelector);this.target=e&&e.id?e.id:null}},mounted:function(){this.updateTarget()},updated:function(){this.updateTarget()},props:{id:{type:String,default:null},state:{type:String,default:null},horizontal:{type:Boolean,default:!1},labelSize:{type:Number,default:3},labelTextAlign:{type:String,default:null},label:{type:String,default:null},labelSrOnly:{type:Boolean,default:!1},description:{type:String,default:null},feedback:{type:String,default:null},inputSelector:{type:String,default:\"input,select,textarea,.form-control,.form-control-static,.dropdown,.dropup\"}}},formMixin={computed:{inputClass:function(){return[this.size?\"form-control-\"+this.size:null,this.state?\"form-control-\"+this.state:null]},custom:function(){return!this.plain}},props:{name:{type:String},disabled:{type:Boolean},plain:{type:Boolean,default:!1},state:{type:String},size:{type:String},id:{type:String}}},formCheckBoxMixin={computed:{checkboxClass:function(){return{\"custom-control\":this.custom,\"form-check-inline\":this.inline}}}},inBrowser=\"undefined\"!=typeof window,UNSAFE_UID=inBrowser&&window.UNSAFE_UID===!0||!inBrowser&&__webpack_require__.i({\"NODE_ENV\":\"production\"}).UNSAFE_UID===!0,generateId={computed:{_id:function(){return!UNSAFE_UID||this.id?this.id:\"__b_\"+this._uid+\"__\"}}},formCheckbox={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"label\",{class:[t.inputClass,t.checkboxClass,t.custom?\"custom-checkbox\":null]},[n(\"input\",{class:[t.custom?\"custom-control-input\":null],attrs:{type:\"checkbox\",id:t._id,name:t.name,disabled:t.disabled},domProps:{value:t.value,checked:t.checked===t.value},on:{change:function(e){t.$emit(\"change\",e.target.checked?t.value:t.uncheckedValue)}}}),t._v(\" \"),t.custom?n(\"span\",{staticClass:\"custom-control-indicator\"}):t._e(),t._v(\" \"),n(\"span\",{class:[t.custom?\"custom-control-description\":null]},[t._t(\"default\")],2)])},staticRenderFns:[],mixins:[formMixin,formCheckBoxMixin,generateId],model:{prop:\"checked\",event:\"change\"},props:{value:{default:!0},uncheckedValue:{default:!1},checked:{default:!0}}},formOptions={computed:{formOptions:function(){var t=this,e=this.options||{};return e=Array.isArray(e)?e.map(function(e){return\"object\"==typeof e?{value:e[t.valueField],text:e[t.textField],disabled:e.disabled||!1}:{text:String(e),value:e||{}}}):Object.keys(e).map(function(n){var i=e[n]||{};return\"object\"!=typeof i&&(i={text:String(i)}),i.value=i[t.valueField]||n,i})},selectedValue:function(){for(var t=this,e=this.formOptions,n=0;n<e.length;n++)if(e[n].value===t.localValue)return t.returnObject?e[n]:e[n].value}},props:{valueField:{type:[String],default:\"value\"},textField:{type:[String],default:\"text\"}},watch:{localValue:function(t,e){t!==e&&this.$emit(\"input\",this.selectedValue)},value:function(t,e){t!==e&&(this.localValue=t)}}},formRadio={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[t.inputClass,this.stacked?\"custom-controls-stacked\":\"\"]},t._l(t.formOptions,function(e){return n(\"label\",{class:[t.checkboxClass,t.custom?\"custom-radio\":null]},[n(\"input\",{directives:[{name:\"model\",rawName:\"v-model\",value:t.localValue,expression:\"localValue\"}],ref:\"inputs\",refInFor:!0,class:t.custom?\"custom-control-input\":null,attrs:{type:\"radio\",name:e.name,id:e.id,disabled:e.disabled},domProps:{value:e.value,checked:t._q(t.localValue,e.value)},on:{__c:function(n){t.localValue=e.value}}}),t._v(\" \"),t.custom?n(\"span\",{staticClass:\"custom-control-indicator\"}):t._e(),t._v(\" \"),n(\"span\",{class:t.custom?\"custom-control-description\":null,domProps:{innerHTML:t._s(e.text)}})])}))},staticRenderFns:[],mixins:[formMixin,formCheckBoxMixin,formOptions],data:function(){return{localValue:this.value}},computed:{inputState:function(){return this.state?\"has-\"+this.state:\"\"}},props:{value:{},options:{type:[Array,Object],default:null,required:!0},stacked:{type:Boolean,default:!1},returnObject:{type:Boolean,default:!1}}},bFormInputStatic={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"p\",{class:[\"form-control-static\",t.inputClass],attrs:{id:t._id},domProps:{innerHTML:t._s(t.staticValue)}},[t._t(\"default\")],2)},staticRenderFns:[],mixins:[formMixin,generateId],computed:{staticValue:function(){return this.formatter?this.formatter(this.value):this.value}},props:{value:{default:null},formatter:{type:Function}}},formInput={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.static?n(\"b-form-input-static\",{attrs:{id:t._id,value:t.value,formatter:t.formatter}}):n(t.textarea?\"textarea\":\"input\",{ref:\"input\",tag:\"input\",class:[\"form-control\",t.inputClass],attrs:{type:t.type,name:t.name,id:t._id,disabled:t.disabled,rows:t.rows||t.rowsCount,placeholder:t.placeholder},domProps:{value:t.value},on:{input:function(e){t.onInput(e.target.value)},change:function(e){t.onChange(e.target.value)},keyup:function(e){t.onKeyUp(e)},focus:function(e){t.$emit(\"focus\")},blur:function(e){t.$emit(\"blur\")}}})},staticRenderFns:[],mixins:[formMixin,generateId],components:{bFormInputStatic:bFormInputStatic},computed:{rowsCount:function(){return(this.value||\"\").toString().split(\"\\n\").length}},methods:{format:function(t){if(this.formatter){var e=this.formatter(t);e!==t&&(t=e,this.$refs.input.value=e)}return t},onInput:function(t){this.lazyFormatter||(t=this.format(t)),this.$emit(\"input\",t)},onChange:function(t){t=this.format(t),this.$emit(\"input\",t),this.$emit(\"change\",t)},onKeyUp:function(t){this.$emit(\"keyup\",t)}},props:{value:{default:null},type:{type:String,default:\"text\"},static:{type:Boolean,default:!1},placeholder:{type:String,default:null},rows:{type:Number,default:null},textarea:{type:Boolean,default:!1},formatter:{type:Function},lazyFormatter:{type:Boolean,default:!1}}},formFile={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"label\",{class:[t.custom?\"custom-file\":null,t.inputClass],on:{dragover:function(e){e.stopPropagation(),e.preventDefault(),t.dragover(e)}}},[t.dragging?n(\"span\",{staticClass:\"drop-here\",attrs:{\"data-drop\":t.dropLabel},on:{dragover:function(e){e.stopPropagation(),e.preventDefault(),t.dragover(e)},drop:function(e){e.stopPropagation(),e.preventDefault(),t.drop(e)},dragleave:function(e){e.stopPropagation(),e.preventDefault(),t.dragging=!1}}}):t._e(),n(\"input\",{ref:\"input\",staticClass:\"custom-file-input\",attrs:{type:\"file\",name:t.name,id:t._id,disabled:t.disabled,accept:t.accept,multiple:t.multiple,webkitdirectory:t.directory},on:{change:t.onFileChange}}),t._v(\" \"),t.custom?n(\"span\",{class:[\"custom-file-control\",t.dragging?\"dragging\":null,t.inputClass],attrs:{\"data-choose\":t.computedChooseLabel,\"data-selected\":t.selectedLabel}}):t._e()])},staticRenderFns:[],mixins:[formMixin,generateId],data:function(){return{selectedFile:null,dragging:!1}},computed:{selectedLabel:function(){return this.selectedFile&&0!==this.selectedFile.length?this.multiple?1===this.selectedFile.length?this.selectedFile[0].name:this.selectedFormat.replace(\":names\",this.selectedFile.map(function(t){return t.name}).join(\",\")).replace(\":count\",this.selectedFile.length):this.selectedFile.name:this.placeholder||\"No file chosen\"},computedChooseLabel:function(){return this.chooseLabel||(this.multiple?\"Choose Files\":\"Choose File\")}},watch:{selectedFile:function(t,e){t!==e&&(!t&&this.multiple?this.$emit(\"input\",[]):this.$emit(\"input\",t))}},methods:{onFileChange:function(t){var e=this;this.$emit(\"change\",t);var n=t.dataTransfer&&t.dataTransfer.items;if(n&&!this.noTraverse){for(var i=[],o=0;o<n.length;o++){var s=n[o].webkitGetAsEntry();s&&i.push(e.traverseFileTree(s))}return void Promise.all(i).then(function(t){e.setFiles(Array.prototype.concat.apply([],t))})}this.setFiles(t.target.files||t.dataTransfer.files)},setFiles:function(t){var e=this;if(!t)return void(this.selectedFile=null);if(!this.multiple)return void(this.selectedFile=t[0]);for(var n=[],i=0;i<t.length;i++)t[i].type.match(e.accept)&&n.push(t[i]);this.selectedFile=n},dragover:function(t){this.noDrop||(this.dragging=!0,t.dataTransfer.dropEffect=\"copy\")},drop:function(t){this.noDrop||(this.dragging=!1,t.dataTransfer.files&&t.dataTransfer.files.length>0&&this.onFileChange(t))},traverseFileTree:function(t,e){var n=this;return new Promise(function(i){e=e||\"\",t.isFile?t.file(function(t){t.$path=e,i(t)}):t.isDirectory&&t.createReader().readEntries(function(o){for(var s=[],r=0;r<o.length;r++)s.push(n.traverseFileTree(o[r],e+t.name+\"/\"));Promise.all(s).then(function(t){i(Array.prototype.concat.apply([],t))})})})}},props:{accept:{type:String,default:\"\"},placeholder:{type:String,default:null},chooseLabel:{type:String,default:null},multiple:{type:Boolean,default:!1},directory:{type:Boolean,default:!1},noTraverse:{type:Boolean,default:!1},selectedFormat:{type:String,default:\":count Files\"},noDrop:{type:Boolean,default:!1},dropLabel:{type:String,default:\"Drop files here\"}}},formSelect={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"select\",{directives:[{name:\"model\",rawName:\"v-model\",value:t.localValue,expression:\"localValue\"}],ref:\"input\",class:[t.inputClass,t.custom?\"custom-select\":null],attrs:{name:t.name,id:t._id,disabled:t.disabled},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){var e=\"_value\"in t?t._value:t.value;return e});t.localValue=e.target.multiple?n:n[0]}}},t._l(t.formOptions,function(e){return n(\"option\",{attrs:{disabled:e.disabled},domProps:{value:e.value,innerHTML:t._s(e.text)}})}))},staticRenderFns:[],mixins:[formMixin,formOptions,generateId],data:function(){return{localValue:this.value}},props:{value:{},options:{type:[Array,Object],required:!0},returnObject:{type:Boolean,default:!1}}},jumbotron={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"jumbotron\",t.fluid?\"jumbotron-fluid\":null]},[n(\"div\",{class:t.containerFluid?\"container-fluid\":\"container\"},[t.header?n(\"h1\",{staticClass:\"display-3\",domProps:{innerHTML:t._s(t.header)}}):t._e(),t.lead?n(\"p\",{staticClass:\"lead\",domProps:{innerHTML:t._s(t.lead)}}):t._e(),t._t(\"default\")],2)])},staticRenderFns:[],computed:{},props:{fluid:{type:Boolean,default:!1},containerFluid:{type:Boolean,default:!1},header:{type:String,default:null},lead:{type:String,default:null}}},badge={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"span\",{class:[\"badge\",t.badgeVariant,t.badgePill]},[t._t(\"default\")],2)},staticRenderFns:[],computed:{badgeVariant:function(){return this.variant&&\"default\"!==this.variant?\"badge-\"+this.variant:\"badge-default\"},badgePill:function(){return this.pill?\"badge-pill\":\"\"}},props:{variant:{type:String,default:\"default\"},pill:{type:Boolean,default:!1}}},listGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",class:[\"list-group\",t.flush?\"list-group-flush\":null]},[t._t(\"default\")],2)},staticRenderFns:[],props:{tag:{type:String,default:\"div\"},flush:{type:Boolean,default:!1}}},actionTags=[\"a\",\"router-link\",\"button\",\"b-link\"],listGroupItem={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.myTag,{ref:\"item\",tag:\"component\",class:t.classObject,attrs:{to:t.to,href:t.href}},[t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},computed:{classObject:function(){return[\"list-group-item\",this.listState,this.active?\"active\":null,this.disabled?\"disabled\":null,this.isAction?\"list-group-item-action\":null]},isAction:function(){return this.action!==!1&&(this.action||this.to||this.href||actionTags.indexOf(this.tag)!==-1)},listState:function(){return this.variant?\"list-group-item-\"+this.variant:null},myTag:function(){return this.tag?this.tag:this.to||this.href?\"b-link\":\"div\"}},props:{tag:{type:String,default:null},active:{type:Boolean,default:!1},action:{type:Boolean,default:null},disabled:{type:Boolean,default:!1},variant:{type:String,default:null},to:{type:String,default:null},href:{type:String,default:null}}},media={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"media\"},[t.rightAlign?t._e():n(\"div\",{class:[\"d-flex\",\"mr-3\",t.verticalAlignClass]},[t._t(\"aside\")],2),n(\"div\",{staticClass:\"media-body\"},[t._t(\"default\")],2),t.rightAlign?n(\"div\",{class:[\"d-flex\",\"ml-3\",t.verticalAlignClass]},[t._t(\"aside\")],2):t._e()])},staticRenderFns:[],computed:{verticalAlignClass:function(){return\"align-self-\"+this.verticalAlign}},props:{rightAlign:{type:Boolean,default:!1},verticalAlign:{type:String,default:\"top\"}}},FOCUS_SELECTOR=['button:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','input:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','select:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','textarea:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','a:not([disabled]):not(.disabled):not([style*=\"display: none\"]):not([style*=\"display:none\"])','[tabindex]:not([disabled]):not(.disabled):not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),modal={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[n(\"transition-group\",{attrs:{\"enter-class\":\"hidden\",\"enter-to-class\":\"\",\"enter-active-class\":\"\",\"leave-class\":\"show\",\"leave-active-class\":\"\",\"leave-to-class\":\"hidden\"},on:{\"after-enter\":t.focusFirst}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.is_visible,expression:\"is_visible\"}],key:\"modal\",class:[\"modal\",{fade:t.fade,show:t.is_visible}],attrs:{id:t.id,role:\"dialog\"},on:{click:function(e){t.onClickOut(e)},keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null}}},[n(\"div\",{class:[\"modal-dialog\",\"modal-\"+t.size]},[n(\"div\",{ref:\"content\",staticClass:\"modal-content\",attrs:{tabindex:\"-1\",role:\"document\",\"aria-labelledby\":t.hideHeader||!t.id?null:t.id+\"_modal_title\",\"aria-describedby\":t.id?t.id+\"_modal_body\":null},on:{click:function(t){t.stopPropagation()}}},[t.hideHeader?t._e():n(\"header\",{ref:\"header\",staticClass:\"modal-header\"},[t._t(\"modal-header\",[n(\"h5\",{staticClass:\"modal-title\",attrs:{id:t.id?t.id+\"_modal_title\":null}},[t._t(\"modal-title\",[t._v(t._s(t.title))])],2),t.hideHeaderClose?t._e():n(\"button\",{staticClass:\"close\",attrs:{type:\"button\",\"aria-label\":t.closeTitle},on:{click:t.hide}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"×\")])])])],2),n(\"div\",{ref:\"body\",staticClass:\"modal-body\",attrs:{id:t.id?t.id+\"_modal_body\":null}},[t._t(\"default\")],2),t.hideFooter?t._e():n(\"footer\",{ref:\"footer\",staticClass:\"modal-footer\"},[t._t(\"modal-footer\",[t.okOnly?t._e():n(\"b-btn\",{attrs:{variant:\"secondary\"},on:{click:function(e){t.hide(!1)}}},[t._v(t._s(t.closeTitle))]),n(\"b-btn\",{attrs:{variant:\"primary\"},on:{click:function(e){t.hide(!0)}}},[t._v(t._s(t.okTitle))])])],2)])])]),t.is_visible?n(\"div\",{key:\"modal-backdrop\",class:[\"modal-backdrop\",{fade:t.fade,show:t.is_visible}]}):t._e()])],1)},staticRenderFns:[],components:{bBtn:bBtn},data:function(){return{is_visible:!1,return_focus:this.returnFocus||null}},model:{prop:\"visible\",event:\"change\"},computed:{body:function(){if(\"undefined\"!=typeof document)return document.querySelector(\"body\")}},watch:{visible:function(t,e){t!==e&&(t?this.show():this.hide())}},props:{id:{type:String,default:null},title:{type:String,default:\"\"},size:{type:String,default:\"md\"},fade:{type:Boolean,default:!0},closeTitle:{type:String,default:\"Close\"},okTitle:{type:String,default:\"OK\"},closeOnBackdrop:{type:Boolean,default:!0},closeOnEsc:{type:Boolean,default:!0},hideHeader:{type:Boolean,default:!1},hideFooter:{type:Boolean,default:!1},okOnly:{type:Boolean,default:!1},hideHeaderClose:{type:Boolean,default:!1},returnFocus:{default:null}},methods:{show:function(){this.is_visible||(this.is_visible=!0,this.$root.$emit(\"shown::modal\",this.id),this.body.classList.add(\"modal-open\"),this.$emit(\"shown\"),this.$emit(\"change\",!0),\"undefined\"!=typeof document&&(document.removeEventListener(\"focusin\",this.enforceFocus,!1),document.addEventListener(\"focusin\",this.enforceFocus,!1)))},hide:function(t){if(this.is_visible){var e=!1,n={isOK:t,cancel:function(){e=!0}};this.$emit(\"change\",!1),this.$emit(\"hidden\",n),t===!0?this.$emit(\"ok\",n):t===!1&&this.$emit(\"cancel\",n),e||(\"undefined\"!=typeof document&&(document.removeEventListener(\"focusin\",this.enforceFocus,!1),this.returnFocusTo()),this.is_visible=!1,this.$root.$emit(\"hidden::modal\",this.id),this.body.classList.remove(\"modal-open\"))}},onClickOut:function(){this.closeOnBackdrop&&this.hide()},onEsc:function(){this.is_visible&&this.closeOnEsc&&this.hide()},focusFirst:function(){if(!document.activeElement||!this.$refs.content.contains(document.activeElement)){var t;this.$refs.footer&&(t=this.$refs.footer.querySelector(FOCUS_SELECTOR)),!t&&this.$refs.body&&(t=this.$refs.body.querySelector(FOCUS_SELECTOR)),!t&&this.$refs.header&&(t=this.$refs.header.querySelector(FOCUS_SELECTOR)),t||(t=this.$refs.content),t&&t.focus&&t.focus()}},returnFocusTo:function(){if(this.return_focus){var t=\"string\"==typeof this.return_focus?document.querySelector(this.returnFocus):this.return_focus;t&&t.$el&&\"function\"==typeof t.$el.focus?t.$el.focus():t&&\"function\"==typeof t.focus&&t.focus()}},enforceFocus:function(t){this.is_visible&&document!==t.target&&this.$refs.content&&this.$refs.content!==t.target&&!this.$refs.content.contains(t.target)&&this.$refs.content.focus()}},created:function(){var t=this;this.$root.$on(\"show::modal\",function(e,n){e===t.id&&(t.return_focus=n||t.return_focus||t.returnFocus||null,t.show())}),this.$root.$on(\"hide::modal\",function(e){e===t.id&&t.hide()})},mounted:function(){this.visible===!0&&this.show()},destroyed:function(){\"undefined\"!=typeof document&&document.removeEventListener(\"focusin\",this.enforceFocus,!1)}},nav={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.type,{tag:\"component\",class:t.classObject,attrs:{role:t.isNavBar?null:\"navigation\"}},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return{nav:!0,\"navbar-nav\":this.isNavBar,\"nav-tabs\":this.tabs,\"nav-pills\":this.pills,\"flex-column\":this.vertical,\"nav-fill\":this.fill}}},props:{type:{type:String,default:\"ul\"},fill:{type:Boolean,default:!1},tabs:{type:Boolean,default:!1},pills:{type:Boolean,default:!1},vertical:{type:Boolean,default:!1},isNavBar:{type:Boolean,default:!1}}},navItem={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"li\",{staticClass:\"nav-item\"},[n(\"b-link\",{staticClass:\"nav-link\",attrs:{active:t.active,disabled:t.disabled,href:t.href,to:t.to,tag:t.tag,exact:t.exact,append:t.append,replace:t.replace,\"active-class\":t.activeClass,\"exact-active-class\":t.exactActiveClass,event:t.event},on:{click:function(e){t.$emit(\"click\")}}},[t._t(\"default\")],2)],1)},staticRenderFns:[],components:{bLink:bLink},mixins:[linkMixin]},navItemDropdown={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"li\",{class:[\"nav-item\",\"dropdown\",{dropup:t.dropup,show:t.visible}]},[n(\"a\",{ref:\"button\",class:[\"nav-link\",t.dropdownToggle,{disabled:t.disabled}],attrs:{href:\"#\",id:t.id?t.id+\"__BV_button_\":null,\"aria-haspopup\":\"true\",\"aria-expanded\":t.visible?\"true\":\"false\",disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.toggle(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.toggle(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.toggle(e)):null}]}},[t._t(\"text\",[n(\"span\",{domProps:{innerHTML:t._s(t.text)}})])],2),n(\"div\",{ref:\"menu\",class:[\"dropdown-menu\",{\"dropdown-menu-right\":t.right}],attrs:{role:\"menu\",\"aria-labelledby\":t.id?t.id+\"__BV_button_\":null},on:{keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"tab\",9)?void t.onTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null}]}},[t._t(\"default\")],2)])},staticRenderFns:[],mixins:[clickOut,dropdown],data:function(){return{visible:!1}},computed:{dropdownToggle:function(){return this.caret?\"dropdown-toggle\":\"\"}},props:{id:{type:String},caret:{type:Boolean,default:!0}},methods:{clickOutListener:function(){this.visible=!1}}},navToggle={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"button\",{class:t.classObject,attrs:{type:\"button\",\"aria-label\":t.label,\"aria-controls\":t.target.id?t.target.id:t.target,\"aria-explanded\":t.toggleState},on:{click:t.onclick}},[n(\"span\",{staticClass:\"navbar-toggler-icon\"})])},staticRenderFns:[],computed:{classObject:function(){return[\"navbar-toggler\",\"navbar-toggler-\"+this.position]}},data:function(){return{toggleState:!1}},props:{label:{type:String,default:\"Toggle navigation\"},position:{type:String,default:\"right\"},target:{required:!0}},methods:{onclick:function(){var t=this.target;t.toggle&&t.toggle(),this.$root.$emit(\"collapse::toggle\",this.target)}},created:function(){var t=this;this.$root.$on(\"collapse::toggle::state\",function(e,n){e===t.target&&(t.toggleState=n)})}},navbar={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"nav\",{class:t.classObject},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[\"navbar\",this.type?\"navbar-\"+this.type:null,this.variant?\"bg-\"+this.variant:null,this.fixed?\"fixed-\"+this.fixed:null,this.sticky?\"sticky-top\":null,this.toggleable?\"navbar-toggleable-\"+this.toggleBreakpoint:null]}},props:{type:{type:String,default:\"light\"},variant:{type:String},toggleable:{type:Boolean,default:!1},toggleBreakpoint:{type:String,default:\"sm\"},fixed:{type:String},sticky:{type:String}}},bPagination={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"btn-group\",\"pagination\",t.btnSize],attrs:{role:\"group\",tabindex:\"0\",\"aria-label\":t.ariaLabel?t.ariaLabel:null},on:{focusin:function(e){return e.target!==e.currentTarget?null:void t.focusCurrent(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:(e.preventDefault(),void t.focusPrev(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:(e.preventDefault(),void t.focusNext(e)):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"left\",37))&&e.shiftKey?\"button\"in e&&0!==e.button?null:(e.preventDefault(),void t.focusFirst(e)):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"right\",39))&&e.shiftKey?\"button\"in e&&2!==e.button?null:(e.preventDefault(),void t.focusLast(e)):null}]}},[n(\"button\",{ref:\"buttonPrev\",class:[\"btn\",\"btn-\"+t.secondaryVariant],attrs:{type:\"button\",disabled:t.isActive(1),\"aria-label\":t.labelPrev,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.isActive(1)?t._return:t.currentPage--}}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"«\")])]),t._v(\" \"),t.showPrev?n(\"button\",{ref:\"buttonFirst\",class:[\"btn\",\"btn-\"+t.secondaryVariant,t.isActive(1)?\"active\":\"\"],attrs:{type:\"button\",\"aria-label\":t.labelPage+\" 1\",\"aria-current\":t.isActive(1)?\"true\":\"false\",\"aria-setsize\":t.numberOfPages,\"aria-posinset\":1,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.currentPage=1}}},[t._v(\"1\")]):t._e(),t._v(\" \"),n(\"span\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.showPrev,expression:\"showPrev\"}],class:[\"btn\",\"btn-\"+t.secondaryVariant]},[t._v(\"...\")]),t._v(\" \"),t._l(t.pageLinks,function(e,i){return n(\"button\",{ref:\"buttonPages\",refInFor:!0,class:[\"btn\",t.btnVariant(i),t.isActive(i+t.diff)?\"active\":\"\",t.isActive(i+t.diff)?\"\":\"hidden-xs-down\"],attrs:{type:\"button\",\"aria-label\":t.labelPage+\" \"+(i+t.diff),\"aria-current\":t.isActive(i+t.diff)?\"true\":\"false\",\"aria-setsize\":t.numberOfPages,\"aria-posinset\":i+t.diff,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.currentPage=i+t.diff}}},[t._v(t._s(i+t.diff))])}),t._v(\" \"),n(\"span\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.showNext,expression:\"showNext\"}],class:[\"btn\",\"btn-\"+t.secondaryVariant]},[t._v(\"...\")]),t._v(\" \"),t.showNext?n(\"button\",{ref:\"buttonLast\",class:[\"btn\",\"btn-\"+t.secondaryVariant,t.isActive(t.numberOfPages)?\"active\":\"\"],attrs:{type:\"button\",\"aria-label\":t.labelPage+\" \"+t.numberOfPages,\"aria-current\":t.isActive(t.numberOfPages)?\"true\":\"false\",\"aria-setsize\":t.numberOfPages,\"aria-posinset\":t.numberOfPages,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.currentPage=t.numberOfPages}}},[t._v(t._s(t.numberOfPages))]):t._e(),t._v(\" \"),n(\"button\",{ref:\"buttonNext\",class:[\"btn\",\"btn-\"+t.secondaryVariant],attrs:{type:\"button\",disabled:t.isActive(t.numberOfPages),\"aria-label\":t.labelNext,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.isActive(t.numberOfPages)?t._return:t.currentPage++}}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"»\")])])],2)},staticRenderFns:[],data:function(){return{diff:1,showPrev:!1,showNext:!1,currentPage:this.value}},computed:{numberOfPages:function(){var t=Math.ceil(this.totalRows/this.perPage);return t<1?1:t},btnSize:function(){return this.size&&\"default\"!==this.size?\"pagination-\"+this.size:\"\"},pageLinks:function(){return this.currentPage>this.numberOfPages&&(this.currentPage=1),this.diff=1,this.showPrev=!1,this.showNext=!1,this.numberOfPages<=this.limit?this.numberOfPages:this.currentPage<=this.limit-2?(this.diff=1,this.showNext=!0,this.limit-2):this.currentPage>this.numberOfPages-this.limit+2?(this.diff=this.numberOfPages-this.limit+3,this.showPrev=!0,this.limit-2):(this.diff=this.currentPage-1,this.showPrev=this.currentPage>=this.limit,this.showNext=this.currentPage<=this.numberOfPages-this.limit+1,this.limit)}},methods:{isActive:function(t){return t===this.currentPage},btnVariant:function(t){return t+this.diff===this.currentPage?\"btn-\"+this.variant:\"btn-\"+this.secondaryVariant},getButtons:function(){var t=[this.$refs.buttonPrev];return this.showPrev&&t.push(this.$refs.buttonFirst),t=t.concat(this.$refs.buttonPages),this.showNext&&t.push(this.$refs.buttonLast),t.push(this.$refs.buttonNext),t},setBtnFocus:function(t){this.$nextTick(function(){t.focus()})},focusFirst:function(){var t=this.getButtons().find(function(t){return!t.disabled});t&&t.focus&&t!==document.activeElement&&this.setBtnFocus(t)},focusLast:function(){var t=this.getButtons().reverse().find(function(t){return!t.disabled});t&&t.focus&&t!==document.activeElement&&this.setBtnFocus(t)},focusCurrent:function(){var t=this,e=this.getButtons().find(function(e){return parseInt(e.getAttribute(\"aria-posinset\"),10)===t.currentPage});e&&e.focus?this.setBtnFocus(e):this.focusFirst()},focusPrev:function(){var t=this.getButtons(),e=t.indexOf(document.activeElement);e>0&&!t[e-1].disabled&&t[e-1].focus&&this.setBtnFocus(t[e-1])},focusNext:function(){var t=this.getButtons(),e=t.indexOf(document.activeElement),n=t.length-1;e<n&&!t[e+1].disabled&&t[e+1].focus&&this.setBtnFocus(t[e+1])},_return:function(){}},watch:{currentPage:function(t,e){t!==e&&this.$emit(\"input\",t)},value:function(t,e){t!==e&&(this.currentPage=t)}},props:{value:{type:Number,default:1},limit:{type:Number,default:3},perPage:{type:Number,default:20},totalRows:{type:Number,default:20},size:{type:String,default:\"md\"},variant:{type:String,default:\"primary\"},secondaryVariant:{type:String,default:\"secondary\"},ariaLabel:{type:String,default:\"Pagination\"},labelPrevPage:{type:String,default:\"Previous Page\"},labelNextPage:{type:String,default:\"Next Page\"},labelPage:{type:String,default:\"Page\"}}},TRIGGER_LISTENERS={click:{click:\"toggle\"},hover:{mouseenter:\"show\",mouseleave:\"hide\"},focus:{focus:\"show\",blur:\"hide\"}},PLACEMENT_PARAMS={top:\"bottom center\",bottom:\"top center\",left:\"middle right\",right:\"middle left\"},TETHER_CLASS_PREFIX=\"bs-tether\",TETHER_CLASSES={element:!1,enabled:!1},TRANSITION_DURATION=150,bPopover={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[n(\"span\",{ref:\"trigger\"},[t._t(\"default\")],2),n(\"div\",{ref:\"popover\",staticClass:\"popover fade\",class:[t.classState?\"show\":\"\",t.popoverAlignment],style:t.popoverStyle,attrs:{tabindex:\"-1\"},on:{focus:function(e){t.$emit(\"focus\")},blur:function(e){t.$emit(\"blur\")}}},[n(\"div\",{staticClass:\"popover-arrow\"}),t.title?n(\"h3\",{staticClass:\"popover-title\",domProps:{innerHTML:t._s(t.title)}}):t._e(),n(\"div\",{staticClass:\"popover-content\"},[n(\"div\",{staticClass:\"popover-content-wrapper\"},[t._t(\"content\",[n(\"span\",{domProps:{innerHTML:t._s(t.content)}})])],2)])])])},staticRenderFns:[],props:{constraints:{type:Array,default:function(){return[]}},content:{type:String,default:\"\"},debounce:{type:[Number],default:300,validator:function(t){return t>=0}},delay:{type:[Number,Object],default:0,validator:function(t){return\"number\"==typeof t?t>=0:null!==t&&\"object\"==typeof t&&(\"number\"==typeof t.show&&\"number\"==typeof t.hide&&t.show>=0&&t.hide>=0)}},offset:{type:String,default:\"0 0\",validator:function(t){return/^((0\\s?)|([+-]?[0-9]+(px|%)\\s?)){2}$/.test(t)}},placement:{type:String,default:\"top\",validator:function(t){return Object.keys(PLACEMENT_PARAMS).indexOf(t)!==-1}},popoverStyle:{type:Object,default:null},show:{type:Boolean,default:null},targetOffset:{type:String,default:\"0 0\",validator:function(t){return/^((0\\s?)|([+-]?[0-9]+(px|%)\\s?)){2}$/.test(t)}},title:{type:String,default:\"\"},triggers:{type:[Boolean,String,Array],default:function(){return[\"click\",\"focus\"]},validator:function(t){if(t===!1||\"\"===t)return!0;if(\"string\"==typeof t)return Object.keys(TRIGGER_LISTENERS).indexOf(t)!==-1;if(Array.isArray(t)){var e=Object.keys(TRIGGER_LISTENERS);return t.forEach(function(t){if(e.indexOf(t)===-1)return!1}),!0}return!1}}},data:function(){return{triggerState:this.show,classState:this.show,lastEvent:null}},computed:{normalizedTriggers:function(){return this.triggers===!1?[]:\"string\"==typeof this.triggers?[this.triggers]:this.triggers},popoverAlignment:function(){return this.placement&&\"default\"!==this.placement?\"popover-\"+this.placement:\"popover-top\"},showState:function(){return this.show!==!1&&(this.triggerState||this.show)}},watch:{constraints:function(){this.setOptions()},normalizedTriggers:function(t,e){this.updateListeners(t,e)},offset:function(){this.setOptions()},placement:function(){this.setOptions()},showState:function(t){var e=this,n=this.getDelay(t);clearTimeout(this._timeout),n?this._timeout=setTimeout(function(){return e.togglePopover(t)},n):this.togglePopover(t)}},methods:{addListener:function(t){var e=this;for(var n in TRIGGER_LISTENERS[t])e._trigger.addEventListener(n,function(t){return e.eventHandler(t)})},destroyTether:function(){if(this._tether&&!this.showState){this._tether.destroy(),\nthis._tether=null;var t=new RegExp(\"(^|[^-]\\\\b)(\"+TETHER_CLASS_PREFIX+\"\\\\S*)\",\"g\");this._trigger.className=this._trigger.className.replace(t,\"\")}},eventHandler:function(t){var e=this;if(!(this.normalizedTriggers.length>1&&this.debounce>0&&null!==this.lastEvent&&t.timeStamp<=this.lastEvent+this.debounce))for(var n in TRIGGER_LISTENERS)for(var i in TRIGGER_LISTENERS[n])if(i===t.type){var o=TRIGGER_LISTENERS[n][i];return void((\"toggle\"===o||e.triggerState&&\"hide\"===o||!e.triggerState&&\"show\"===o)&&(e.triggerState=!e.triggerState,e.lastEvent=t.timeStamp))}},getDelay:function(t){return\"object\"==typeof this.delay?t?this.delay.show:this.delay.hide:this.delay},getTetherOptions:function(){return{attachment:PLACEMENT_PARAMS[this.placement],element:this._popover,target:this._trigger,classes:TETHER_CLASSES,classPrefix:TETHER_CLASS_PREFIX,offset:this.offset,constraints:this.constraints,targetOffset:this.targetOffset}},hidePopover:function(){var t=this;this.classState=!1,clearTimeout(this._timeout),this._timeout=setTimeout(function(){t._popover.style.display=\"none\",t.destroyTether()},TRANSITION_DURATION)},refreshPosition:function(){var t=this;this._tether&&this.$nextTick(function(){t._tether.position()})},removeListener:function(t){var e=this;for(var n in TRIGGER_LISTENERS[t])e._trigger.removeEventListener(n,function(t){return e.eventHandler(t)})},setOptions:function(){this._tether&&this._tether.setOptions(this.getTetherOptions())},showPopover:function(){var e=this;clearTimeout(this._timeout),this._tether||(this._tether=new __WEBPACK_IMPORTED_MODULE_0_tether___default.a(this.getTetherOptions())),this._popover.style.display=\"block\",this.refreshPosition(),this.$nextTick(function(){e.classState=!0})},togglePopover:function(t){this.$emit(\"showChange\",t),t?(this.showPopover(),this.$root.$emit(\"shown::popover\")):(this.hidePopover(),this.$root.$emit(\"hidden::popover\"))},updateListeners:function(t,e){var n=this;void 0===e&&(e=[]);var i=[],o=[];t.forEach(function(t){e.indexOf(t)===-1&&i.push(t)}),e.forEach(function(e){t.indexOf(e)===-1&&o.push(e)}),i.forEach(function(t){return n.addListener(t)}),o.forEach(function(t){return n.removeListener(t)})}},created:function(){var t=this;this.$root.$on(\"hide::popover\",function(){t.triggerState=!1})},mounted:function(){this._trigger=this.$refs.trigger.children[0]||this.$refs.trigger,this._popover=this.$refs.popover,this._popover.style.display=\"none\",this._timeout=0,this.updateListeners(this.normalizedTriggers),this.showState&&this.showPopover()},updated:function(){this.refreshPosition()},beforeDestroy:function(){var t=this;this.normalizedTriggers.forEach(function(e){return t.removeListener(e)}),clearTimeout(this._timeout),this.destroyTether()}},progress={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"progress\"},[n(\"transition\",[n(\"div\",{class:t.classObject,style:t.styleObject,attrs:{role:\"progressbar\",\"aria-valuenow\":t.value,\"aria-valuemin\":0,\"aria-valuemax\":t.max}},[t._t(\"default\",[t.showProgress?[t._v(t._s(t.progress)+\"%\")]:t.showValue?[t._v(t._s(t.value))]:t._e()])],2)])],1)},staticRenderFns:[],computed:{classObject:function(){return[\"progress-bar\",this.progressVariant,this.striped||this.animated?\"progress-bar-striped\":\"\",this.animated?\"progress-bar-animated\":\"\"]},styleObject:function(){return{width:this.progress+\"%\"}},progressVariant:function(){return this.variant?\"bg-\"+this.variant:null},progress:function(){var t=Math.pow(10,this.precision);return Math.round(100*t*this.value/this.max)/t}},props:{striped:{type:Boolean,default:!1},animated:{type:Boolean,default:!1},precision:{type:Number,default:0},value:{type:Number,default:0},max:{type:Number,default:100},variant:{type:String,default:null},showProgress:{type:Boolean,default:!1},showValue:{type:Boolean,default:!1}}},toString=function(t){return t?t instanceof Object?Object.keys(t).map(function(e){return toString(t[e])}).join(\" \"):String(t):\"\"},defaultSortCompare=function(t,e,n){return toString(t[n]).localeCompare(toString(e[n]),void 0,{numeric:!0})},table={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"table\",{class:[\"table\",t.striped?\"table-striped\":\"\",t.hover?\"table-hover\":\"\"]},[n(\"thead\",[n(\"tr\",t._l(t.fields,function(e,i){return n(\"th\",{class:[e.sortable?\"sorting\":null,t.sortBy===i?\"sorting_\"+(t.sortDesc?\"desc\":\"asc\"):\"\",e.class?e.class:null],domProps:{innerHTML:t._s(e.label)},on:{click:function(n){t.headClick(e,i)}}})}))]),n(\"tbody\",[t._l(t._items,function(e,i){return n(\"tr\",{key:t.items_key,class:[e.state?\"table-\"+e.state:null],on:{click:function(n){t.rowClicked(e,i)}}},t._l(t.fields,function(o,s){return n(\"td\",{class:[o.class?o.class:null]},[t._t(s,[t._v(t._s(e[s]))],{value:e[s],item:e,index:i})],2)}))}),t.showEmpty&&0===t.items.length?n(\"tr\",{attrs:{colspan:t.fields.length}},[t._t(\"empty\",[n(\"div\",{staticClass:\"text-center\",domProps:{innerHTML:t._s(t.emptyText)}})])],2):t._e(),t.showEmpty&&t.items.length>0&&0===t._items.length?n(\"tr\",{attrs:{colspan:t.fields.length}},[t._t(\"emptyfiltered\",[n(\"div\",{staticClass:\"text-center\",domProps:{innerHTML:t._s(t.emptyFilteredText)}})])],2):t._e()],2)])},staticRenderFns:[],components:{bPagination:bPagination},data:function(){return{sortBy:null,sortDesc:!0}},props:{items:{type:Array,default:function(){return[]}},fields:{type:Object,default:function(){}},striped:{type:Boolean,default:!1},hover:{type:Boolean,default:!1},perPage:{type:Number,default:null},items_key:{type:String,default:null},currentPage:{type:Number,default:1},filter:{type:[String,RegExp,Function],default:null},sortCompare:{type:Function,default:null},itemsProvider:{type:Function,default:null},value:{type:Array,default:function(){return[]}},showEmpty:{type:Boolean,default:!1},emptyText:{type:String,default:\"There are no records to show\"},emptyFilteredText:{type:String,default:\"There are no records matching your request\"}},computed:{_items:function(){var t=this;if(!this.items)return[];if(this.itemsProvider)return this.itemsProvider(this);var e=this.items.slice();if(this.filter)if(this.filter instanceof Function)e=e.filter(this.filter);else{var n;n=this.filter instanceof RegExp?this.filter:new RegExp(\".*\"+this.filter+\".*\",\"ig\"),e=e.filter(function(t){var e=n.test(toString(t));return n.lastIndex=0,e})}var i=this.sortCompare||defaultSortCompare;return this.sortBy&&(e=e.sort(function(e,n){var o=i(e,n,t.sortBy);return t.sortDesc?o:o*-1})),this.$emit(\"input\",e),this.perPage&&(e=e.slice((this.currentPage-1)*this.perPage,this.currentPage*this.perPage)),e}},methods:{rowClicked:function(t,e){this.$emit(\"row-clicked\",t,e)},headClick:function(t,e){return t.sortable?(e===this.sortBy&&(this.sortDesc=!this.sortDesc),void(this.sortBy=e)):void(this.sortBy=null)}}},tabs={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",staticClass:\"tabs\",attrs:{id:t.id||null}},[t.bottom?n(\"div\",{ref:\"tabsContainer\",class:[\"tab-content\",{\"card-block\":t.card}]},[t._t(\"default\"),t.tabs&&t.tabs.length?t._e():t._t(\"empty\")],2):t._e(),n(\"div\",{class:{\"card-header\":t.card}},[n(\"ul\",{class:[\"nav\",\"nav-\"+t.navStyle,t.card?\"card-header-\"+t.navStyle:null],attrs:{role:\"tablist\",tabindex:\"0\",\"aria-setsize\":t.tabs.length,\"aria-posinset\":t.currentTab+1},on:{keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:void t.previousTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.previousTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:void t.nextTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.nextTab(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"left\",37))&&e.shiftKey?\"button\"in e&&0!==e.button?null:void t.setTab(-1,!1,1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"up\",38))&&e.shiftKey?void t.setTab(-1,!1,1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"right\",39))&&e.shiftKey?\"button\"in e&&2!==e.button?null:void t.setTab(t.tabs.length,!1,-1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"down\",40))&&e.shiftKey?void t.setTab(t.tabs.length,!1,-1):null}]}},[t._l(t.tabs,function(e,i){return n(\"li\",{staticClass:\"nav-item\",attrs:{role:\"presentation\"}},[e.headHtml?n(\"div\",{class:[\"tab-head\",{small:t.small,active:e.localActive,disabled:e.disabled}],attrs:{role:\"heading\",tabindex:\"-1\"},domProps:{innerHTML:t._s(e.headHtml)}}):n(\"a\",{class:[\"nav-link\",{small:t.small,active:e.localActive,disabled:e.disabled}],attrs:{href:e.href,role:\"tab\",\"aria-selected\":e.localActive?\"true\":\"false\",\"aria-controls\":e.id||null,id:e.controlledBy||null,tabindex:\"-1\"},domProps:{innerHTML:t._s(e.title)},on:{click:function(e){e.preventDefault(),e.stopPropagation(),t.setTab(i)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.preventDefault(),e.stopPropagation(),void t.setTab(i)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.preventDefault(),e.stopPropagation(),void t.setTab(i)):null}]}})])}),t._t(\"tabs\")],2)]),t.bottom?t._e():n(\"div\",{ref:\"tabsContainer\",class:[\"tab-content\",{\"card-block\":t.card}]},[t._t(\"default\"),t.tabs&&t.tabs.length?t._e():t._t(\"empty\")],2)])},staticRenderFns:[],data:function(){return{currentTab:this.value,tabs:[]}},props:{id:{type:String,default:\"\"},tag:{type:String,default:\"div\"},noFade:{type:Boolean,default:!1},card:{type:Boolean,default:!1},small:{type:Boolean,default:!1},value:{type:Number,default:0},pills:{type:Boolean,default:!1},lazy:{type:Boolean,default:!1},bottom:{type:Boolean,default:!1}},watch:{currentTab:function(t,e){t!==e&&(this.$root.$emit(\"changed::tab\",this,t,this.tabs[t]),this.$emit(\"input\",t),this.tabs[t].$emit(\"click\"))},value:function(t,e){t!==e&&this.setTab(t)},fade:function(t,e){var n=this;t!==e&&this.tabs.forEach(function(e){n.$set(e,\"fade\",t)})}},computed:{fade:function(){return!this.noFade},navStyle:function(){return this.pills?\"pills\":\"tabs\"}},methods:{sign:function(t){return 0===t?0:t>0?1:-1},nextTab:function(){this.setTab(this.currentTab,!1,1)},previousTab:function(){this.setTab(this.currentTab,!1,-1)},setTab:function(t,e,n){if(n=n||0,e||t+n!==this.currentTab){var i=this.tabs[t+n];if(i){if(i.disabled)return void(n&&this.setTab(t,e,n+this.sign(n)));this.tabs[this.currentTab]&&this.$set(this.tabs[this.currentTab],\"localActive\",!1),this.$set(i,\"localActive\",!0),this.currentTab=t+n}}},updateTabs:function(){var t=this;this.$slots.default?this.tabs=this.$slots.default.filter(function(t){return t.componentInstance||!1}).map(function(t){return t.componentInstance}):this.tabs=[],this.tabs.forEach(function(e){t.$set(e,\"fade\",t.fade),t.$set(e,\"lazy\",t.lazy)});var e=this.currentTab;null!==this.currentTab&&void 0!==this.currentTab||this.tabs.forEach(function(t,n){t.active&&(e=n)});var n=0;e>this.tabs.length-1&&(n=-1),this.setTab(e||0,!0,n)}},mounted:function(){this.updateTabs(),observeDOM(this.$refs.tabsContainer,this.updateTabs.bind(this),{subtree:!1})}},tab={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"transition\",{attrs:{mode:\"out-in\"},on:{enter:t.enter,\"before-leave\":t.beforeLeave}},[t.localActive||!t.lazy?n(t.tag,{directives:[{name:\"show\",rawName:\"v-show\",value:t.localActive||t.lazy,expression:\"localActive || lazy\"}],ref:\"panel\",tag:\"component\",class:[\"tab-pane\",{show:t.show,fade:t.fade,disabled:t.disabled,active:t.localActive}],attrs:{id:t.id||null,role:\"tabpanel\",\"aria-hidden\":t.localActive?\"false\":\"true\",\"aria-expanded\":t.localActive?\"true\":\"false\",\"aria-lablelledby\":t.controlledBy||null}},[t._t(\"default\")],2):t._e()],1)},staticRenderFns:[],methods:{enter:function(){this.show=!0},beforeLeave:function(){this.show=!1}},data:function(){return{fade:!1,localActive:!1,lazy:!0,show:!1}},computed:{controlledBy:function(){return this.buttonId||(this.id?this.id+\"__BV_tab_button__\":null)}},props:{id:{type:String,default:\"\"},tag:{type:String,default:\"div\"},buttonId:{type:String,default:\"\"},title:{type:String,default:\"\"},headHtml:{type:String,default:null},disabled:{type:Boolean,default:!1},active:{type:Boolean,default:!1},href:{type:String,default:\"#\"}}},tooltip={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[n(\"span\",{ref:\"trigger\"},[t._t(\"default\")],2),n(\"div\",{ref:\"popover\",class:[\"tooltip\",\"tooltip-\"+this.placement],style:{opacity:t.showState?1:0},attrs:{tabindex:\"-1\"},on:{focus:function(e){t.$emit(\"focus\")},blur:function(e){t.$emit(\"blur\")}}},[n(\"div\",{staticClass:\"tooltip-inner\"},[t._t(\"content\",[n(\"span\",{domProps:{innerHTML:t._s(t.content||t.title)}})])],2)])])},staticRenderFns:[],extends:bPopover,props:{triggers:{type:[Boolean,String,Array],default:\"hover\"}}},components=Object.freeze({bAlert:alert,bBreadcrumb:breadcrumb,bButton:bBtn,bBtn:bBtn,bButtonToolbar:buttonToolbar,bButtonGroup:buttonGroup,bButtonGroupDropdown:buttonGroupDropdown,bInputGroup:inputGroup,bInputGroupAddon:inputGroupAddon,bInputGroupButton:inputGroupButton,bCard:card,bCardGroup:cardGroup,bDropdown:dropdown$1,bDropdownItem:dropdownItem,bDropdownDivider:dropdownDivider,bDropdownHeader:dropdownHeader,bDropdownSelect:dropdownSelect,bForm:form,bFormCheckbox:formCheckbox,bFormFieldset:formFieldset,bFormFile:formFile,bFormRadio:formRadio,bFormInput:formInput,bFormInputStatic:bFormInputStatic,bFormSelect:formSelect,bJumbotron:jumbotron,bBadge:badge,bMedia:media,bModal:modal,bNavbar:navbar,bPagination:bPagination,bPopover:bPopover,bProgress:progress,bTable:table,bTooltip:tooltip,bTab:tab,bTabs:tabs,bNav:nav,bNavItem:navItem,bNavItemDropdown:navItemDropdown,bNavToggle:navToggle,bListGroupItem:listGroupItem,bListGroup:listGroup,bCarouselSlide:carouselSlide,bCarousel:carousel,bCollapse:collapse,bLink:bLink}),all_listen_types={hover:!0,click:!0,focus:!0},listen_types={click:!0},toggle={bind:function(t,e){targets(t,e,listen_types,function(t){var e=t.targets,n=t.vm;e.forEach(function(t){n.$root.$emit(\"collapse::toggle\",t)})})}},listen_types$1={click:!0},modal$1={bind:function(t,e){targets(t,e,listen_types$1,function(e){var n=e.targets,i=e.vm;n.forEach(function(e){i.$root.$emit(\"show::modal\",e,t)})})}},inBrowser$1=\"undefined\"!=typeof window,isServer=!inBrowser$1;inBrowser$1&&window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(t){var e,n=(this.document||this.ownerDocument).querySelectorAll(t),i=this;do for(e=n.length;--e>=0&&n.item(e)!==i;);while(e<0&&(i=i.parentElement));return i});var NAME=\"v-b-scrollspy\",EVENT=\"scrollspy::activate\",BVSS=\"__BV_ScrollSpy__\",Default={element:\"body\",offset:10,method:\"auto\",throttle:200},DefaultType={element:\"(string|element)\",offset:\"number\",method:\"string\",throttle:\"number\"},ClassName={DROPDOWN_ITEM:\"dropdown-item\",DROPDOWN_MENU:\"dropdown-menu\",DROPDOWN_TOGGLE:\"dropdown-toggle\",NAV_LINK:\"nav-link\",LIST_ITEM:\"list-group-item\",ACTIVE:\"active\"},Selector={ACTIVE:\".active\",NAV_LIST_GROUP:\".nav, .list-group\",NAV:\".nav\",LIST_GROUP:\".list-group\",NAV_LINKS:\".nav-link\",LIST_ITEMS:\".list-group-item\",DROPDOWN:\".dropdown\",DROPDOWN_ITEMS:\".dropdown-item\",DROPDOWN_TOGGLE:\".dropdown-toggle\"},OffsetMethod={OFFSET:\"offset\",POSITION:\"position\"};ScrollSpy.prototype.updateConfig=function(t){var e=this;t.arg&&(this._config.element=\"#\"+t.arg),Object.keys(t.modifiers).forEach(function(t){/^\\d+$/.test(t)?e._config.offset=parseInt(t,10):/^(auto|position|offset)$/.test(t)&&(e._config.method=t)}),\"string\"==typeof t.value?this._config.element=t.value:\"number\"==typeof t.value?this._config.offset=Math.round(t.value):\"object\"==typeof t.value&&Object.keys(t.value).filter(function(t){return Boolean(DefaultType[t])}).forEach(function(n){e._config[n]=t.value[n]}),typeCheckConfig(NAME,this._config,DefaultType);var n=getVm(this._$el);return n&&n.$root&&(this._$root=n.$root),this},ScrollSpy.prototype.listen=function(){var t=this._getScroller();return t&&(\"BODY\"!==t.tagName&&t.addEventListener(\"scroll\",this,!1),window.addEventListener(\"scroll\",this,!1),window.addEventListener(\"orientationchange\",this,!1),window.addEventListener(\"resize\",this,!1)),this},ScrollSpy.prototype.unListen=function(){var t=this._getScroller();return t&&(\"BODY\"!==t.tagName&&t.removeEventListener(\"scroll\",this,!1),window.removeEventListener(\"scroll\",this,!1),window.removeEventListener(\"orientationchange\",this,!1),window.removeEventListener(\"resize\",this,!1)),this},ScrollSpy.prototype.refresh=function(){var t=this,e=this._getScroller();if(!e)return this;var n=\"BODY\"===e.tagName?OffsetMethod.OFFSET:OffsetMethod.POSITION,i=\"auto\"===this._config.method?n:this._config.method,o=i===OffsetMethod.OFFSET?0:this._getScrollTop();return this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),$QSA(this._selector,this._$el).map(function(t){var n=t.getAttribute(\"href\");if(n&&\"#\"===n.charAt(0)&&\"#\"!==n&&n.indexOf(\"#/\")===-1){var s=$QS(n,e);if(!s)return null;var r=s.getBoundingClientRect();if(r.width||r.height)return{offset:(i===OffsetMethod.OFFSET?r.top:s.offsetTop)+o,href:n}}return null}).filter(function(t){return t}).sort(function(t,e){return t.offset-e.offset}).forEach(function(e){t._offsets.push(e.offset),t._targets.push(e.href)}),this},ScrollSpy.prototype.process=function(){var t=this;if(!this._getScroller)return this;var e=this._getScrollTop()+this._config.offset,n=this._getScrollHeight(),i=this._config.offset+n-this._getOffsetHeight();if(this._scrollHeight!==n&&this.refresh(),e>=i){var o=this._targets[this._targets.length-1];return this._activeTarget!==o&&this._activate(o),this}if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,this._clear(),this;for(var s=this._offsets.length;s--;){var r=t._activeTarget!==t._targets[s]&&e>=t._offsets[s]&&(void 0===t._offsets[s+1]||e<t._offsets[s+1]);r&&t._activate(t._targets[s])}return this},ScrollSpy.prototype.dispose=function(){this.unListen(),clearTimeout(this._resizeTimeout),this._resizeTimeout=null,this._$el=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null,this._$root=null},ScrollSpy.prototype.handleEvent=function(t){function e(){clearTimeout(this._resizeTimeout),this._resizeTimeout=setTimeout(function(){n.refresh().process()},n._config.throttle||Default.throttle)}var n=this;\"scroll\"===t.type?this.process():\"orientationchange\"===t.type?this.refresh().process():\"resize\"===t.type&&e()},ScrollSpy.prototype._getScroller=function(){if(isServer)return null;var t=this._config.element;return t?t&&isElement(t)?t:\"string\"==typeof t?\"body\"===t?document.body:$QS(t):null:null},ScrollSpy.prototype._getScrollTop=function(){var t=this._getScroller();return t?\"BODY\"===t.tagName?window.pageYOffset:t.scrollTop:0},ScrollSpy.prototype._getScrollHeight=function(){var t=this._getScroller();return t?\"BODY\"===t.tagName?Math.max(document.body.scrollHeight,document.documentElement.scrollHeight):t.scrollHeight:0},ScrollSpy.prototype._getOffsetHeight=function(){var t=this._getScroller();return t?\"BODY\"===t.tagName?window.innerHeight:t.getBoundingClientRect().height:0},ScrollSpy.prototype._activate=function(t){var e=this;this._activeTarget=t,this._clear();var n=this._selector.split(\",\");n=n.map(function(e){return e+'[href=\"'+t+'\"]'});var i=$QSA(n.join(\",\"),this._$el);i.forEach(function(t){if(t.classList.contains(ClassName.DROPDOWN_ITEM)){var n=closest(t,Selector.DROPDOWN);if(n){var i=$QS(Selector.DROPDOWN_TOGGLE,n);i&&e._setActiveState(i,!0)}e._setActiveState(t,!0)}else e._setActiveState(t,!0),e._setParentsSiblingActiveState(t,Selector.NAV_LIST_GROUP,[ClassName.NAV_LINK,ClassName.LIST_ITEM],!0)}),i&&i.length>0&&this._$root&&this._$root.$emit&&this._$root.$emit(EVENT,t)},ScrollSpy.prototype._clear=function(){var t=this;$QSA(this._selector,this._$el).filter(function(t){if(t.classList.contains(ClassName.ACTIVE)){var e=t.getAttribute(\"href\");return\"#\"===e.charAt(0)&&0!==e.indexOf(\"#/\")}return!1}).forEach(function(e){t._setActiveState(e,!1)})},ScrollSpy.prototype._setActiveState=function(t,e){if(t){t.classList.contains(ClassName.NAV_LINK)&&!t.classList.contains(ClassName.DROPDOWN_TOGGLE)&&(t=t.parentElement);var n=getVm(t);n&&Object.prototype.hasOwnProperty.call(n.$props,\"active\")?n.$props.active=e:t.classList[e?\"add\":\"remove\"](ClassName.ACTIVE)}},ScrollSpy.prototype._setParentsSiblingActiveState=function(t,e,n,i){var o=this;if(n){Array.isArray(n)||(n=[n]);for(var s=t;s;)if(s=closest(s,e),s&&s.previousElementSibling)for(var r=0;r<n.length-1;r++)s.previousElementSibling.classList.contains(n[r])&&o._setActiveState(s,i)}};var scrollspy={bind:function(t,e){isServer||t[BVSS]||(t[BVSS]=new ScrollSpy(t,e))},inserted:function(t,e){!isServer&&t[BVSS]&&t[BVSS].updateConfig(e).listen().refresh().process()},update:function(t,e){!isServer&&t[BVSS]&&t[BVSS].updateConfig(e).refresh().process()},componentUpdated:function(t,e){!isServer&&t[BVSS]&&t[BVSS].updateConfig(e).refresh().process()},unbind:function(t){!isServer&&t[BVSS]&&(t[BVSS].unListen().dispose(),t[BVSS]=null)}},directives=Object.freeze({bToggle:toggle,bModal:modal$1,bScrollspy:scrollspy}),VuePlugin={install:function(t){if(!t._bootstrap_vue_installed){t._bootstrap_vue_installed=!0;for(var e in components)t.component(e,components[e]);for(var n in directives)t.directive(n,directives[n])}}};\"undefined\"!=typeof window&&window.Vue&&window.Vue.use(VuePlugin);/* harmony default export */ __webpack_exports__[\"a\"] = (VuePlugin);\n//# sourceMappingURL=bootstrap-vue.esm.js.map\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(21)\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(6),\n  /* template */\n  __webpack_require__(18),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.3.3\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (false) {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (false) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (false) {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (false) {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && \"production\" !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.3';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (false) {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (false\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (false) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (false\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"production\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      \"production\" !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (false) {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (false\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$3;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$3 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"production\" !== 'production' && warn$3(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\n    false\n  ) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, warn$3)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, warn$3)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$3);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (false) {\n    warn$3('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (key, el) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}}\"\n}\n\nfunction genForScopedSlot (key, el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el)) +\n    '})'\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return genElement(el$1)\n    }\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\nfunction makeFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompiler (baseOptions) {\n  var functionCompileCache = Object.create(null);\n\n  function compile (\n    template,\n    options\n  ) {\n    var finalOptions = Object.create(baseOptions);\n    var errors = [];\n    var tips = [];\n    finalOptions.warn = function (msg, tip$$1) {\n      (tip$$1 ? tips : errors).push(msg);\n    };\n\n    if (options) {\n      // merge custom modules\n      if (options.modules) {\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n      }\n      // merge custom directives\n      if (options.directives) {\n        finalOptions.directives = extend(\n          Object.create(baseOptions.directives),\n          options.directives\n        );\n      }\n      // copy other options\n      for (var key in options) {\n        if (key !== 'modules' && key !== 'directives') {\n          finalOptions[key] = options[key];\n        }\n      }\n    }\n\n    var compiled = baseCompile(template, finalOptions);\n    if (false) {\n      errors.push.apply(errors, detectErrors(compiled.ast));\n    }\n    compiled.errors = errors;\n    compiled.tips = tips;\n    return compiled\n  }\n\n  function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (false) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (functionCompileCache[key]) {\n      return functionCompileCache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = makeFunction(compiled.render, fnGenErrors);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\n    }\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (functionCompileCache[key] = res)\n  }\n\n  return {\n    compile: compile,\n    compileToFunctions: compileToFunctions\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"production\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(24)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_musique_vue__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_musique_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_musique_vue__);\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: { musique: __WEBPACK_IMPORTED_MODULE_0__components_musique_vue___default.a },\n  name: 'app',\n  data: function data() {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    };\n  }\n});\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tone__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_tone__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__note_vue__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__note_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__note_vue__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar son = new __WEBPACK_IMPORTED_MODULE_0_tone___default.a.Synth().toMaster();\n__WEBPACK_IMPORTED_MODULE_0_tone___default.a.Transport.start();\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: { note: __WEBPACK_IMPORTED_MODULE_1__note_vue___default.a },\n  data: function data() {\n    return {\n      sequence: new __WEBPACK_IMPORTED_MODULE_0_tone___default.a.Sequence(function (t, v) {\n        console.log(v);\n        console.log(t);\n      }),\n      melodie: [0, 1, 5, 1, 2, 4, 1, 2]\n    };\n  },\n  mounted: function mounted() {\n    this.update();\n  },\n\n  methods: {\n    update: function update() {\n      var _this = this;\n\n      this.sequence.removeAll();\n      this.melodie.forEach(function (v, i) {\n        _this.sequence.add(i, v);\n      });\n      this.sequence.events = this.melodie;\n    },\n    stop: function stop() {\n      this.sequence.stop();\n    },\n    play: function play() {\n      this.sequence.start();\n    }\n  }\n});\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    note: { default: 0 }\n  },\n  data: function data() {\n    return {\n      prout: 0\n    };\n  }\n});\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__App_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bootstrap_vue__ = __webpack_require__(3);\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_2_bootstrap_vue__[\"a\" /* default */]);\n\nnew __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */]({\n  el: '#app',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_1__App_vue___default.a);\n  }\n});\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"#app{font-family:Avenir,Helvetica,Arial,sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:center;color:#2c3e50;margin-top:60px}h1,h2{font-weight:400}ul{list-style-type:none;padding:0}li{display:inline-block;margin:0 10px}a{color:#42b983}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \".note{height:15px;width:5px}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.4.0 */\n\n(function(root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require, exports, module);\n  } else {\n    root.Tether = factory();\n  }\n}(this, function(require, exports, module) {\n\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar TetherBase = undefined;\nif (typeof TetherBase === 'undefined') {\n  TetherBase = { modules: [] };\n}\n\nvar zeroElement = null;\n\n// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets\n// if the element lies within a nested document (<frame> or <iframe>-like).\nfunction getActualBoundingClientRect(node) {\n  var boundingRect = node.getBoundingClientRect();\n\n  // The original object returned by getBoundingClientRect is immutable, so we clone it\n  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9\n  var rect = {};\n  for (var k in boundingRect) {\n    rect[k] = boundingRect[k];\n  }\n\n  if (node.ownerDocument !== document) {\n    var _frameElement = node.ownerDocument.defaultView.frameElement;\n    if (_frameElement) {\n      var frameRect = getActualBoundingClientRect(_frameElement);\n      rect.top += frameRect.top;\n      rect.bottom += frameRect.top;\n      rect.left += frameRect.left;\n      rect.right += frameRect.left;\n    }\n  }\n\n  return rect;\n}\n\nfunction getScrollParents(el) {\n  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  var computedStyle = getComputedStyle(el) || {};\n  var position = computedStyle.position;\n  var parents = [];\n\n  if (position === 'fixed') {\n    return [el];\n  }\n\n  var parent = el;\n  while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {\n    var style = undefined;\n    try {\n      style = getComputedStyle(parent);\n    } catch (err) {}\n\n    if (typeof style === 'undefined' || style === null) {\n      parents.push(parent);\n      return parents;\n    }\n\n    var _style = style;\n    var overflow = _style.overflow;\n    var overflowX = _style.overflowX;\n    var overflowY = _style.overflowY;\n\n    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {\n        parents.push(parent);\n      }\n    }\n  }\n\n  parents.push(el.ownerDocument.body);\n\n  // If the node is within a frame, account for the parent window scroll\n  if (el.ownerDocument !== document) {\n    parents.push(el.ownerDocument.defaultView);\n  }\n\n  return parents;\n}\n\nvar uniqueId = (function () {\n  var id = 0;\n  return function () {\n    return ++id;\n  };\n})();\n\nvar zeroPosCache = {};\nvar getOrigin = function getOrigin() {\n  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of\n  // jitter as the user scrolls that messes with our ability to detect if two positions\n  // are equivilant or not.  We place an element at the top left of the page that will\n  // get the same jitter, so we can cancel the two out.\n  var node = zeroElement;\n  if (!node || !document.body.contains(node)) {\n    node = document.createElement('div');\n    node.setAttribute('data-tether-id', uniqueId());\n    extend(node.style, {\n      top: 0,\n      left: 0,\n      position: 'absolute'\n    });\n\n    document.body.appendChild(node);\n\n    zeroElement = node;\n  }\n\n  var id = node.getAttribute('data-tether-id');\n  if (typeof zeroPosCache[id] === 'undefined') {\n    zeroPosCache[id] = getActualBoundingClientRect(node);\n\n    // Clear the cache when this position call is done\n    defer(function () {\n      delete zeroPosCache[id];\n    });\n  }\n\n  return zeroPosCache[id];\n};\n\nfunction removeUtilElements() {\n  if (zeroElement) {\n    document.body.removeChild(zeroElement);\n  }\n  zeroElement = null;\n};\n\nfunction getBounds(el) {\n  var doc = undefined;\n  if (el === document) {\n    doc = document;\n    el = document.documentElement;\n  } else {\n    doc = el.ownerDocument;\n  }\n\n  var docEl = doc.documentElement;\n\n  var box = getActualBoundingClientRect(el);\n\n  var origin = getOrigin();\n\n  box.top -= origin.top;\n  box.left -= origin.left;\n\n  if (typeof box.width === 'undefined') {\n    box.width = document.body.scrollWidth - box.left - box.right;\n  }\n  if (typeof box.height === 'undefined') {\n    box.height = document.body.scrollHeight - box.top - box.bottom;\n  }\n\n  box.top = box.top - docEl.clientTop;\n  box.left = box.left - docEl.clientLeft;\n  box.right = doc.body.clientWidth - box.width - box.left;\n  box.bottom = doc.body.clientHeight - box.height - box.top;\n\n  return box;\n}\n\nfunction getOffsetParent(el) {\n  return el.offsetParent || document.documentElement;\n}\n\nvar _scrollBarSize = null;\nfunction getScrollBarSize() {\n  if (_scrollBarSize) {\n    return _scrollBarSize;\n  }\n  var inner = document.createElement('div');\n  inner.style.width = '100%';\n  inner.style.height = '200px';\n\n  var outer = document.createElement('div');\n  extend(outer.style, {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    pointerEvents: 'none',\n    visibility: 'hidden',\n    width: '200px',\n    height: '150px',\n    overflow: 'hidden'\n  });\n\n  outer.appendChild(inner);\n\n  document.body.appendChild(outer);\n\n  var widthContained = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  var widthScroll = inner.offsetWidth;\n\n  if (widthContained === widthScroll) {\n    widthScroll = outer.clientWidth;\n  }\n\n  document.body.removeChild(outer);\n\n  var width = widthContained - widthScroll;\n\n  _scrollBarSize = { width: width, height: width };\n  return _scrollBarSize;\n}\n\nfunction extend() {\n  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  var args = [];\n\n  Array.prototype.push.apply(args, arguments);\n\n  args.slice(1).forEach(function (obj) {\n    if (obj) {\n      for (var key in obj) {\n        if (({}).hasOwnProperty.call(obj, key)) {\n          out[key] = obj[key];\n        }\n      }\n    }\n  });\n\n  return out;\n}\n\nfunction removeClass(el, name) {\n  if (typeof el.classList !== 'undefined') {\n    name.split(' ').forEach(function (cls) {\n      if (cls.trim()) {\n        el.classList.remove(cls);\n      }\n    });\n  } else {\n    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');\n    var className = getClassName(el).replace(regex, ' ');\n    setClassName(el, className);\n  }\n}\n\nfunction addClass(el, name) {\n  if (typeof el.classList !== 'undefined') {\n    name.split(' ').forEach(function (cls) {\n      if (cls.trim()) {\n        el.classList.add(cls);\n      }\n    });\n  } else {\n    removeClass(el, name);\n    var cls = getClassName(el) + (' ' + name);\n    setClassName(el, cls);\n  }\n}\n\nfunction hasClass(el, name) {\n  if (typeof el.classList !== 'undefined') {\n    return el.classList.contains(name);\n  }\n  var className = getClassName(el);\n  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);\n}\n\nfunction getClassName(el) {\n  // Can't use just SVGAnimatedString here since nodes within a Frame in IE have\n  // completely separately SVGAnimatedString base classes\n  if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {\n    return el.className.baseVal;\n  }\n  return el.className;\n}\n\nfunction setClassName(el, className) {\n  el.setAttribute('class', className);\n}\n\nfunction updateClasses(el, add, all) {\n  // Of the set of 'all' classes, we need the 'add' classes, and only the\n  // 'add' classes to be set.\n  all.forEach(function (cls) {\n    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {\n      removeClass(el, cls);\n    }\n  });\n\n  add.forEach(function (cls) {\n    if (!hasClass(el, cls)) {\n      addClass(el, cls);\n    }\n  });\n}\n\nvar deferred = [];\n\nvar defer = function defer(fn) {\n  deferred.push(fn);\n};\n\nvar flush = function flush() {\n  var fn = undefined;\n  while (fn = deferred.pop()) {\n    fn();\n  }\n};\n\nvar Evented = (function () {\n  function Evented() {\n    _classCallCheck(this, Evented);\n  }\n\n  _createClass(Evented, [{\n    key: 'on',\n    value: function on(event, handler, ctx) {\n      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n      if (typeof this.bindings === 'undefined') {\n        this.bindings = {};\n      }\n      if (typeof this.bindings[event] === 'undefined') {\n        this.bindings[event] = [];\n      }\n      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });\n    }\n  }, {\n    key: 'once',\n    value: function once(event, handler, ctx) {\n      this.on(event, handler, ctx, true);\n    }\n  }, {\n    key: 'off',\n    value: function off(event, handler) {\n      if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {\n        return;\n      }\n\n      if (typeof handler === 'undefined') {\n        delete this.bindings[event];\n      } else {\n        var i = 0;\n        while (i < this.bindings[event].length) {\n          if (this.bindings[event][i].handler === handler) {\n            this.bindings[event].splice(i, 1);\n          } else {\n            ++i;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'trigger',\n    value: function trigger(event) {\n      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {\n        var i = 0;\n\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        while (i < this.bindings[event].length) {\n          var _bindings$event$i = this.bindings[event][i];\n          var handler = _bindings$event$i.handler;\n          var ctx = _bindings$event$i.ctx;\n          var once = _bindings$event$i.once;\n\n          var context = ctx;\n          if (typeof context === 'undefined') {\n            context = this;\n          }\n\n          handler.apply(context, args);\n\n          if (once) {\n            this.bindings[event].splice(i, 1);\n          } else {\n            ++i;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Evented;\n})();\n\nTetherBase.Utils = {\n  getActualBoundingClientRect: getActualBoundingClientRect,\n  getScrollParents: getScrollParents,\n  getBounds: getBounds,\n  getOffsetParent: getOffsetParent,\n  extend: extend,\n  addClass: addClass,\n  removeClass: removeClass,\n  hasClass: hasClass,\n  updateClasses: updateClasses,\n  defer: defer,\n  flush: flush,\n  uniqueId: uniqueId,\n  Evented: Evented,\n  getScrollBarSize: getScrollBarSize,\n  removeUtilElements: removeUtilElements\n};\n/* globals TetherBase, performance */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nif (typeof TetherBase === 'undefined') {\n  throw new Error('You must include the utils.js file before tether.js');\n}\n\nvar _TetherBase$Utils = TetherBase.Utils;\nvar getScrollParents = _TetherBase$Utils.getScrollParents;\nvar getBounds = _TetherBase$Utils.getBounds;\nvar getOffsetParent = _TetherBase$Utils.getOffsetParent;\nvar extend = _TetherBase$Utils.extend;\nvar addClass = _TetherBase$Utils.addClass;\nvar removeClass = _TetherBase$Utils.removeClass;\nvar updateClasses = _TetherBase$Utils.updateClasses;\nvar defer = _TetherBase$Utils.defer;\nvar flush = _TetherBase$Utils.flush;\nvar getScrollBarSize = _TetherBase$Utils.getScrollBarSize;\nvar removeUtilElements = _TetherBase$Utils.removeUtilElements;\n\nfunction within(a, b) {\n  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  return a + diff >= b && b >= a - diff;\n}\n\nvar transformKey = (function () {\n  if (typeof document === 'undefined') {\n    return '';\n  }\n  var el = document.createElement('div');\n\n  var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];\n  for (var i = 0; i < transforms.length; ++i) {\n    var key = transforms[i];\n    if (el.style[key] !== undefined) {\n      return key;\n    }\n  }\n})();\n\nvar tethers = [];\n\nvar position = function position() {\n  tethers.forEach(function (tether) {\n    tether.position(false);\n  });\n  flush();\n};\n\nfunction now() {\n  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {\n    return performance.now();\n  }\n  return +new Date();\n}\n\n(function () {\n  var lastCall = null;\n  var lastDuration = null;\n  var pendingTimeout = null;\n\n  var tick = function tick() {\n    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {\n      // We voluntarily throttle ourselves if we can't manage 60fps\n      lastDuration = Math.min(lastDuration - 16, 250);\n\n      // Just in case this is the last event, remember to position just once more\n      pendingTimeout = setTimeout(tick, 250);\n      return;\n    }\n\n    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {\n      // Some browsers call events a little too frequently, refuse to run more than is reasonable\n      return;\n    }\n\n    if (pendingTimeout != null) {\n      clearTimeout(pendingTimeout);\n      pendingTimeout = null;\n    }\n\n    lastCall = now();\n    position();\n    lastDuration = now() - lastCall;\n  };\n\n  if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {\n    ['resize', 'scroll', 'touchmove'].forEach(function (event) {\n      window.addEventListener(event, tick);\n    });\n  }\n})();\n\nvar MIRROR_LR = {\n  center: 'center',\n  left: 'right',\n  right: 'left'\n};\n\nvar MIRROR_TB = {\n  middle: 'middle',\n  top: 'bottom',\n  bottom: 'top'\n};\n\nvar OFFSET_MAP = {\n  top: 0,\n  left: 0,\n  middle: '50%',\n  center: '50%',\n  bottom: '100%',\n  right: '100%'\n};\n\nvar autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {\n  var left = attachment.left;\n  var top = attachment.top;\n\n  if (left === 'auto') {\n    left = MIRROR_LR[relativeToAttachment.left];\n  }\n\n  if (top === 'auto') {\n    top = MIRROR_TB[relativeToAttachment.top];\n  }\n\n  return { left: left, top: top };\n};\n\nvar attachmentToOffset = function attachmentToOffset(attachment) {\n  var left = attachment.left;\n  var top = attachment.top;\n\n  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {\n    left = OFFSET_MAP[attachment.left];\n  }\n\n  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {\n    top = OFFSET_MAP[attachment.top];\n  }\n\n  return { left: left, top: top };\n};\n\nfunction addOffset() {\n  var out = { top: 0, left: 0 };\n\n  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {\n    offsets[_key] = arguments[_key];\n  }\n\n  offsets.forEach(function (_ref) {\n    var top = _ref.top;\n    var left = _ref.left;\n\n    if (typeof top === 'string') {\n      top = parseFloat(top, 10);\n    }\n    if (typeof left === 'string') {\n      left = parseFloat(left, 10);\n    }\n\n    out.top += top;\n    out.left += left;\n  });\n\n  return out;\n}\n\nfunction offsetToPx(offset, size) {\n  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {\n    offset.left = parseFloat(offset.left, 10) / 100 * size.width;\n  }\n  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {\n    offset.top = parseFloat(offset.top, 10) / 100 * size.height;\n  }\n\n  return offset;\n}\n\nvar parseOffset = function parseOffset(value) {\n  var _value$split = value.split(' ');\n\n  var _value$split2 = _slicedToArray(_value$split, 2);\n\n  var top = _value$split2[0];\n  var left = _value$split2[1];\n\n  return { top: top, left: left };\n};\nvar parseAttachment = parseOffset;\n\nvar TetherClass = (function (_Evented) {\n  _inherits(TetherClass, _Evented);\n\n  function TetherClass(options) {\n    var _this = this;\n\n    _classCallCheck(this, TetherClass);\n\n    _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);\n    this.position = this.position.bind(this);\n\n    tethers.push(this);\n\n    this.history = [];\n\n    this.setOptions(options, false);\n\n    TetherBase.modules.forEach(function (module) {\n      if (typeof module.initialize !== 'undefined') {\n        module.initialize.call(_this);\n      }\n    });\n\n    this.position();\n  }\n\n  _createClass(TetherClass, [{\n    key: 'getClass',\n    value: function getClass() {\n      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n      var classes = this.options.classes;\n\n      if (typeof classes !== 'undefined' && classes[key]) {\n        return this.options.classes[key];\n      } else if (this.options.classPrefix) {\n        return this.options.classPrefix + '-' + key;\n      } else {\n        return key;\n      }\n    }\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      var _this2 = this;\n\n      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n      var defaults = {\n        offset: '0 0',\n        targetOffset: '0 0',\n        targetAttachment: 'auto auto',\n        classPrefix: 'tether'\n      };\n\n      this.options = extend(defaults, options);\n\n      var _options = this.options;\n      var element = _options.element;\n      var target = _options.target;\n      var targetModifier = _options.targetModifier;\n\n      this.element = element;\n      this.target = target;\n      this.targetModifier = targetModifier;\n\n      if (this.target === 'viewport') {\n        this.target = document.body;\n        this.targetModifier = 'visible';\n      } else if (this.target === 'scroll-handle') {\n        this.target = document.body;\n        this.targetModifier = 'scroll-handle';\n      }\n\n      ['element', 'target'].forEach(function (key) {\n        if (typeof _this2[key] === 'undefined') {\n          throw new Error('Tether Error: Both element and target must be defined');\n        }\n\n        if (typeof _this2[key].jquery !== 'undefined') {\n          _this2[key] = _this2[key][0];\n        } else if (typeof _this2[key] === 'string') {\n          _this2[key] = document.querySelector(_this2[key]);\n        }\n      });\n\n      addClass(this.element, this.getClass('element'));\n      if (!(this.options.addTargetClasses === false)) {\n        addClass(this.target, this.getClass('target'));\n      }\n\n      if (!this.options.attachment) {\n        throw new Error('Tether Error: You must provide an attachment');\n      }\n\n      this.targetAttachment = parseAttachment(this.options.targetAttachment);\n      this.attachment = parseAttachment(this.options.attachment);\n      this.offset = parseOffset(this.options.offset);\n      this.targetOffset = parseOffset(this.options.targetOffset);\n\n      if (typeof this.scrollParents !== 'undefined') {\n        this.disable();\n      }\n\n      if (this.targetModifier === 'scroll-handle') {\n        this.scrollParents = [this.target];\n      } else {\n        this.scrollParents = getScrollParents(this.target);\n      }\n\n      if (!(this.options.enabled === false)) {\n        this.enable(pos);\n      }\n    }\n  }, {\n    key: 'getTargetBounds',\n    value: function getTargetBounds() {\n      if (typeof this.targetModifier !== 'undefined') {\n        if (this.targetModifier === 'visible') {\n          if (this.target === document.body) {\n            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };\n          } else {\n            var bounds = getBounds(this.target);\n\n            var out = {\n              height: bounds.height,\n              width: bounds.width,\n              top: bounds.top,\n              left: bounds.left\n            };\n\n            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));\n            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));\n            out.height = Math.min(innerHeight, out.height);\n            out.height -= 2;\n\n            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));\n            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));\n            out.width = Math.min(innerWidth, out.width);\n            out.width -= 2;\n\n            if (out.top < pageYOffset) {\n              out.top = pageYOffset;\n            }\n            if (out.left < pageXOffset) {\n              out.left = pageXOffset;\n            }\n\n            return out;\n          }\n        } else if (this.targetModifier === 'scroll-handle') {\n          var bounds = undefined;\n          var target = this.target;\n          if (target === document.body) {\n            target = document.documentElement;\n\n            bounds = {\n              left: pageXOffset,\n              top: pageYOffset,\n              height: innerHeight,\n              width: innerWidth\n            };\n          } else {\n            bounds = getBounds(target);\n          }\n\n          var style = getComputedStyle(target);\n\n          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;\n\n          var scrollBottom = 0;\n          if (hasBottomScroll) {\n            scrollBottom = 15;\n          }\n\n          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;\n\n          var out = {\n            width: 15,\n            height: height * 0.975 * (height / target.scrollHeight),\n            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15\n          };\n\n          var fitAdj = 0;\n          if (height < 408 && this.target === document.body) {\n            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;\n          }\n\n          if (this.target !== document.body) {\n            out.height = Math.max(out.height, 24);\n          }\n\n          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);\n          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);\n\n          if (this.target === document.body) {\n            out.height = Math.max(out.height, 24);\n          }\n\n          return out;\n        }\n      } else {\n        return getBounds(this.target);\n      }\n    }\n  }, {\n    key: 'clearCache',\n    value: function clearCache() {\n      this._cache = {};\n    }\n  }, {\n    key: 'cache',\n    value: function cache(k, getter) {\n      // More than one module will often need the same DOM info, so\n      // we keep a cache which is cleared on each position call\n      if (typeof this._cache === 'undefined') {\n        this._cache = {};\n      }\n\n      if (typeof this._cache[k] === 'undefined') {\n        this._cache[k] = getter.call(this);\n      }\n\n      return this._cache[k];\n    }\n  }, {\n    key: 'enable',\n    value: function enable() {\n      var _this3 = this;\n\n      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      if (!(this.options.addTargetClasses === false)) {\n        addClass(this.target, this.getClass('enabled'));\n      }\n      addClass(this.element, this.getClass('enabled'));\n      this.enabled = true;\n\n      this.scrollParents.forEach(function (parent) {\n        if (parent !== _this3.target.ownerDocument) {\n          parent.addEventListener('scroll', _this3.position);\n        }\n      });\n\n      if (pos) {\n        this.position();\n      }\n    }\n  }, {\n    key: 'disable',\n    value: function disable() {\n      var _this4 = this;\n\n      removeClass(this.target, this.getClass('enabled'));\n      removeClass(this.element, this.getClass('enabled'));\n      this.enabled = false;\n\n      if (typeof this.scrollParents !== 'undefined') {\n        this.scrollParents.forEach(function (parent) {\n          parent.removeEventListener('scroll', _this4.position);\n        });\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this5 = this;\n\n      this.disable();\n\n      tethers.forEach(function (tether, i) {\n        if (tether === _this5) {\n          tethers.splice(i, 1);\n        }\n      });\n\n      // Remove any elements we were using for convenience from the DOM\n      if (tethers.length === 0) {\n        removeUtilElements();\n      }\n    }\n  }, {\n    key: 'updateAttachClasses',\n    value: function updateAttachClasses(elementAttach, targetAttach) {\n      var _this6 = this;\n\n      elementAttach = elementAttach || this.attachment;\n      targetAttach = targetAttach || this.targetAttachment;\n      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];\n\n      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {\n        // updateAttachClasses can be called more than once in a position call, so\n        // we need to clean up after ourselves such that when the last defer gets\n        // ran it doesn't add any extra classes from previous calls.\n        this._addAttachClasses.splice(0, this._addAttachClasses.length);\n      }\n\n      if (typeof this._addAttachClasses === 'undefined') {\n        this._addAttachClasses = [];\n      }\n      var add = this._addAttachClasses;\n\n      if (elementAttach.top) {\n        add.push(this.getClass('element-attached') + '-' + elementAttach.top);\n      }\n      if (elementAttach.left) {\n        add.push(this.getClass('element-attached') + '-' + elementAttach.left);\n      }\n      if (targetAttach.top) {\n        add.push(this.getClass('target-attached') + '-' + targetAttach.top);\n      }\n      if (targetAttach.left) {\n        add.push(this.getClass('target-attached') + '-' + targetAttach.left);\n      }\n\n      var all = [];\n      sides.forEach(function (side) {\n        all.push(_this6.getClass('element-attached') + '-' + side);\n        all.push(_this6.getClass('target-attached') + '-' + side);\n      });\n\n      defer(function () {\n        if (!(typeof _this6._addAttachClasses !== 'undefined')) {\n          return;\n        }\n\n        updateClasses(_this6.element, _this6._addAttachClasses, all);\n        if (!(_this6.options.addTargetClasses === false)) {\n          updateClasses(_this6.target, _this6._addAttachClasses, all);\n        }\n\n        delete _this6._addAttachClasses;\n      });\n    }\n  }, {\n    key: 'position',\n    value: function position() {\n      var _this7 = this;\n\n      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      // flushChanges commits the changes immediately, leave true unless you are positioning multiple\n      // tethers (in which case call Tether.Utils.flush yourself when you're done)\n\n      if (!this.enabled) {\n        return;\n      }\n\n      this.clearCache();\n\n      // Turn 'auto' attachments into the appropriate corner or edge\n      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);\n\n      this.updateAttachClasses(this.attachment, targetAttachment);\n\n      var elementPos = this.cache('element-bounds', function () {\n        return getBounds(_this7.element);\n      });\n\n      var width = elementPos.width;\n      var height = elementPos.height;\n\n      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {\n        var _lastSize = this.lastSize;\n\n        // We cache the height and width to make it possible to position elements that are\n        // getting hidden.\n        width = _lastSize.width;\n        height = _lastSize.height;\n      } else {\n        this.lastSize = { width: width, height: height };\n      }\n\n      var targetPos = this.cache('target-bounds', function () {\n        return _this7.getTargetBounds();\n      });\n      var targetSize = targetPos;\n\n      // Get an actual px offset from the attachment\n      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });\n      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);\n\n      var manualOffset = offsetToPx(this.offset, { width: width, height: height });\n      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);\n\n      // Add the manually provided offset\n      offset = addOffset(offset, manualOffset);\n      targetOffset = addOffset(targetOffset, manualTargetOffset);\n\n      // It's now our goal to make (element position + offset) == (target position + target offset)\n      var left = targetPos.left + targetOffset.left - offset.left;\n      var top = targetPos.top + targetOffset.top - offset.top;\n\n      for (var i = 0; i < TetherBase.modules.length; ++i) {\n        var _module2 = TetherBase.modules[i];\n        var ret = _module2.position.call(this, {\n          left: left,\n          top: top,\n          targetAttachment: targetAttachment,\n          targetPos: targetPos,\n          elementPos: elementPos,\n          offset: offset,\n          targetOffset: targetOffset,\n          manualOffset: manualOffset,\n          manualTargetOffset: manualTargetOffset,\n          scrollbarSize: scrollbarSize,\n          attachment: this.attachment\n        });\n\n        if (ret === false) {\n          return false;\n        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {\n          continue;\n        } else {\n          top = ret.top;\n          left = ret.left;\n        }\n      }\n\n      // We describe the position three different ways to give the optimizer\n      // a chance to decide the best possible way to position the element\n      // with the fewest repaints.\n      var next = {\n        // It's position relative to the page (absolute positioning when\n        // the element is a child of the body)\n        page: {\n          top: top,\n          left: left\n        },\n\n        // It's position relative to the viewport (fixed positioning)\n        viewport: {\n          top: top - pageYOffset,\n          bottom: pageYOffset - top - height + innerHeight,\n          left: left - pageXOffset,\n          right: pageXOffset - left - width + innerWidth\n        }\n      };\n\n      var doc = this.target.ownerDocument;\n      var win = doc.defaultView;\n\n      var scrollbarSize = undefined;\n      if (win.innerHeight > doc.documentElement.clientHeight) {\n        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);\n        next.viewport.bottom -= scrollbarSize.height;\n      }\n\n      if (win.innerWidth > doc.documentElement.clientWidth) {\n        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);\n        next.viewport.right -= scrollbarSize.width;\n      }\n\n      if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {\n        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'\n        next.page.bottom = doc.body.scrollHeight - top - height;\n        next.page.right = doc.body.scrollWidth - left - width;\n      }\n\n      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {\n        (function () {\n          var offsetParent = _this7.cache('target-offsetparent', function () {\n            return getOffsetParent(_this7.target);\n          });\n          var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {\n            return getBounds(offsetParent);\n          });\n          var offsetParentStyle = getComputedStyle(offsetParent);\n          var offsetParentSize = offsetPosition;\n\n          var offsetBorder = {};\n          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {\n            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);\n          });\n\n          offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;\n          offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;\n\n          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {\n            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {\n              // We're within the visible part of the target's scroll parent\n              var scrollTop = offsetParent.scrollTop;\n              var scrollLeft = offsetParent.scrollLeft;\n\n              // It's position relative to the target's offset parent (absolute positioning when\n              // the element is moved to be a child of the target's offset parent).\n              next.offset = {\n                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,\n                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left\n              };\n            }\n          }\n        })();\n      }\n\n      // We could also travel up the DOM and try each containing context, rather than only\n      // looking at the body, but we're gonna get diminishing returns.\n\n      this.move(next);\n\n      this.history.unshift(next);\n\n      if (this.history.length > 3) {\n        this.history.pop();\n      }\n\n      if (flushChanges) {\n        flush();\n      }\n\n      return true;\n    }\n\n    // THE ISSUE\n  }, {\n    key: 'move',\n    value: function move(pos) {\n      var _this8 = this;\n\n      if (!(typeof this.element.parentNode !== 'undefined')) {\n        return;\n      }\n\n      var same = {};\n\n      for (var type in pos) {\n        same[type] = {};\n\n        for (var key in pos[type]) {\n          var found = false;\n\n          for (var i = 0; i < this.history.length; ++i) {\n            var point = this.history[i];\n            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {\n              found = true;\n              break;\n            }\n          }\n\n          if (!found) {\n            same[type][key] = true;\n          }\n        }\n      }\n\n      var css = { top: '', left: '', right: '', bottom: '' };\n\n      var transcribe = function transcribe(_same, _pos) {\n        var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';\n        var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;\n        if (gpu !== false) {\n          var yPos = undefined,\n              xPos = undefined;\n          if (_same.top) {\n            css.top = 0;\n            yPos = _pos.top;\n          } else {\n            css.bottom = 0;\n            yPos = -_pos.bottom;\n          }\n\n          if (_same.left) {\n            css.left = 0;\n            xPos = _pos.left;\n          } else {\n            css.right = 0;\n            xPos = -_pos.right;\n          }\n\n          if (window.matchMedia) {\n            // HubSpot/tether#207\n            var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;\n            if (!retina) {\n              xPos = Math.round(xPos);\n              yPos = Math.round(yPos);\n            }\n          }\n\n          css[transformKey] = 'translateX(' + xPos + 'px) translateY(' + yPos + 'px)';\n\n          if (transformKey !== 'msTransform') {\n            // The Z transform will keep this in the GPU (faster, and prevents artifacts),\n            // but IE9 doesn't support 3d transforms and will choke.\n            css[transformKey] += \" translateZ(0)\";\n          }\n        } else {\n          if (_same.top) {\n            css.top = _pos.top + 'px';\n          } else {\n            css.bottom = _pos.bottom + 'px';\n          }\n\n          if (_same.left) {\n            css.left = _pos.left + 'px';\n          } else {\n            css.right = _pos.right + 'px';\n          }\n        }\n      };\n\n      var moved = false;\n      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {\n        css.position = 'absolute';\n        transcribe(same.page, pos.page);\n      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {\n        css.position = 'fixed';\n        transcribe(same.viewport, pos.viewport);\n      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {\n        (function () {\n          css.position = 'absolute';\n          var offsetParent = _this8.cache('target-offsetparent', function () {\n            return getOffsetParent(_this8.target);\n          });\n\n          if (getOffsetParent(_this8.element) !== offsetParent) {\n            defer(function () {\n              _this8.element.parentNode.removeChild(_this8.element);\n              offsetParent.appendChild(_this8.element);\n            });\n          }\n\n          transcribe(same.offset, pos.offset);\n          moved = true;\n        })();\n      } else {\n        css.position = 'absolute';\n        transcribe({ top: true, left: true }, pos.page);\n      }\n\n      if (!moved) {\n        if (this.options.bodyElement) {\n          this.options.bodyElement.appendChild(this.element);\n        } else {\n          var offsetParentIsBody = true;\n          var currentNode = this.element.parentNode;\n          while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {\n            if (getComputedStyle(currentNode).position !== 'static') {\n              offsetParentIsBody = false;\n              break;\n            }\n\n            currentNode = currentNode.parentNode;\n          }\n\n          if (!offsetParentIsBody) {\n            this.element.parentNode.removeChild(this.element);\n            this.element.ownerDocument.body.appendChild(this.element);\n          }\n        }\n      }\n\n      // Any css change will trigger a repaint, so let's avoid one if nothing changed\n      var writeCSS = {};\n      var write = false;\n      for (var key in css) {\n        var val = css[key];\n        var elVal = this.element.style[key];\n\n        if (elVal !== val) {\n          write = true;\n          writeCSS[key] = val;\n        }\n      }\n\n      if (write) {\n        defer(function () {\n          extend(_this8.element.style, writeCSS);\n          _this8.trigger('repositioned');\n        });\n      }\n    }\n  }]);\n\n  return TetherClass;\n})(Evented);\n\nTetherClass.modules = [];\n\nTetherBase.position = position;\n\nvar Tether = extend(TetherClass, TetherBase);\n/* globals TetherBase */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _TetherBase$Utils = TetherBase.Utils;\nvar getBounds = _TetherBase$Utils.getBounds;\nvar extend = _TetherBase$Utils.extend;\nvar updateClasses = _TetherBase$Utils.updateClasses;\nvar defer = _TetherBase$Utils.defer;\n\nvar BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];\n\nfunction getBoundingRect(tether, to) {\n  if (to === 'scrollParent') {\n    to = tether.scrollParents[0];\n  } else if (to === 'window') {\n    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];\n  }\n\n  if (to === document) {\n    to = to.documentElement;\n  }\n\n  if (typeof to.nodeType !== 'undefined') {\n    (function () {\n      var node = to;\n      var size = getBounds(to);\n      var pos = size;\n      var style = getComputedStyle(to);\n\n      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];\n\n      // Account any parent Frames scroll offset\n      if (node.ownerDocument !== document) {\n        var win = node.ownerDocument.defaultView;\n        to[0] += win.pageXOffset;\n        to[1] += win.pageYOffset;\n        to[2] += win.pageXOffset;\n        to[3] += win.pageYOffset;\n      }\n\n      BOUNDS_FORMAT.forEach(function (side, i) {\n        side = side[0].toUpperCase() + side.substr(1);\n        if (side === 'Top' || side === 'Left') {\n          to[i] += parseFloat(style['border' + side + 'Width']);\n        } else {\n          to[i] -= parseFloat(style['border' + side + 'Width']);\n        }\n      });\n    })();\n  }\n\n  return to;\n}\n\nTetherBase.modules.push({\n  position: function position(_ref) {\n    var _this = this;\n\n    var top = _ref.top;\n    var left = _ref.left;\n    var targetAttachment = _ref.targetAttachment;\n\n    if (!this.options.constraints) {\n      return true;\n    }\n\n    var _cache = this.cache('element-bounds', function () {\n      return getBounds(_this.element);\n    });\n\n    var height = _cache.height;\n    var width = _cache.width;\n\n    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {\n      var _lastSize = this.lastSize;\n\n      // Handle the item getting hidden as a result of our positioning without glitching\n      // the classes in and out\n      width = _lastSize.width;\n      height = _lastSize.height;\n    }\n\n    var targetSize = this.cache('target-bounds', function () {\n      return _this.getTargetBounds();\n    });\n\n    var targetHeight = targetSize.height;\n    var targetWidth = targetSize.width;\n\n    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];\n\n    this.options.constraints.forEach(function (constraint) {\n      var outOfBoundsClass = constraint.outOfBoundsClass;\n      var pinnedClass = constraint.pinnedClass;\n\n      if (outOfBoundsClass) {\n        allClasses.push(outOfBoundsClass);\n      }\n      if (pinnedClass) {\n        allClasses.push(pinnedClass);\n      }\n    });\n\n    allClasses.forEach(function (cls) {\n      ['left', 'top', 'right', 'bottom'].forEach(function (side) {\n        allClasses.push(cls + '-' + side);\n      });\n    });\n\n    var addClasses = [];\n\n    var tAttachment = extend({}, targetAttachment);\n    var eAttachment = extend({}, this.attachment);\n\n    this.options.constraints.forEach(function (constraint) {\n      var to = constraint.to;\n      var attachment = constraint.attachment;\n      var pin = constraint.pin;\n\n      if (typeof attachment === 'undefined') {\n        attachment = '';\n      }\n\n      var changeAttachX = undefined,\n          changeAttachY = undefined;\n      if (attachment.indexOf(' ') >= 0) {\n        var _attachment$split = attachment.split(' ');\n\n        var _attachment$split2 = _slicedToArray(_attachment$split, 2);\n\n        changeAttachY = _attachment$split2[0];\n        changeAttachX = _attachment$split2[1];\n      } else {\n        changeAttachX = changeAttachY = attachment;\n      }\n\n      var bounds = getBoundingRect(_this, to);\n\n      if (changeAttachY === 'target' || changeAttachY === 'both') {\n        if (top < bounds[1] && tAttachment.top === 'top') {\n          top += targetHeight;\n          tAttachment.top = 'bottom';\n        }\n\n        if (top + height > bounds[3] && tAttachment.top === 'bottom') {\n          top -= targetHeight;\n          tAttachment.top = 'top';\n        }\n      }\n\n      if (changeAttachY === 'together') {\n        if (tAttachment.top === 'top') {\n          if (eAttachment.top === 'bottom' && top < bounds[1]) {\n            top += targetHeight;\n            tAttachment.top = 'bottom';\n\n            top += height;\n            eAttachment.top = 'top';\n          } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {\n            top -= height - targetHeight;\n            tAttachment.top = 'bottom';\n\n            eAttachment.top = 'bottom';\n          }\n        }\n\n        if (tAttachment.top === 'bottom') {\n          if (eAttachment.top === 'top' && top + height > bounds[3]) {\n            top -= targetHeight;\n            tAttachment.top = 'top';\n\n            top -= height;\n            eAttachment.top = 'bottom';\n          } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {\n            top += height - targetHeight;\n            tAttachment.top = 'top';\n\n            eAttachment.top = 'top';\n          }\n        }\n\n        if (tAttachment.top === 'middle') {\n          if (top + height > bounds[3] && eAttachment.top === 'top') {\n            top -= height;\n            eAttachment.top = 'bottom';\n          } else if (top < bounds[1] && eAttachment.top === 'bottom') {\n            top += height;\n            eAttachment.top = 'top';\n          }\n        }\n      }\n\n      if (changeAttachX === 'target' || changeAttachX === 'both') {\n        if (left < bounds[0] && tAttachment.left === 'left') {\n          left += targetWidth;\n          tAttachment.left = 'right';\n        }\n\n        if (left + width > bounds[2] && tAttachment.left === 'right') {\n          left -= targetWidth;\n          tAttachment.left = 'left';\n        }\n      }\n\n      if (changeAttachX === 'together') {\n        if (left < bounds[0] && tAttachment.left === 'left') {\n          if (eAttachment.left === 'right') {\n            left += targetWidth;\n            tAttachment.left = 'right';\n\n            left += width;\n            eAttachment.left = 'left';\n          } else if (eAttachment.left === 'left') {\n            left += targetWidth;\n            tAttachment.left = 'right';\n\n            left -= width;\n            eAttachment.left = 'right';\n          }\n        } else if (left + width > bounds[2] && tAttachment.left === 'right') {\n          if (eAttachment.left === 'left') {\n            left -= targetWidth;\n            tAttachment.left = 'left';\n\n            left -= width;\n            eAttachment.left = 'right';\n          } else if (eAttachment.left === 'right') {\n            left -= targetWidth;\n            tAttachment.left = 'left';\n\n            left += width;\n            eAttachment.left = 'left';\n          }\n        } else if (tAttachment.left === 'center') {\n          if (left + width > bounds[2] && eAttachment.left === 'left') {\n            left -= width;\n            eAttachment.left = 'right';\n          } else if (left < bounds[0] && eAttachment.left === 'right') {\n            left += width;\n            eAttachment.left = 'left';\n          }\n        }\n      }\n\n      if (changeAttachY === 'element' || changeAttachY === 'both') {\n        if (top < bounds[1] && eAttachment.top === 'bottom') {\n          top += height;\n          eAttachment.top = 'top';\n        }\n\n        if (top + height > bounds[3] && eAttachment.top === 'top') {\n          top -= height;\n          eAttachment.top = 'bottom';\n        }\n      }\n\n      if (changeAttachX === 'element' || changeAttachX === 'both') {\n        if (left < bounds[0]) {\n          if (eAttachment.left === 'right') {\n            left += width;\n            eAttachment.left = 'left';\n          } else if (eAttachment.left === 'center') {\n            left += width / 2;\n            eAttachment.left = 'left';\n          }\n        }\n\n        if (left + width > bounds[2]) {\n          if (eAttachment.left === 'left') {\n            left -= width;\n            eAttachment.left = 'right';\n          } else if (eAttachment.left === 'center') {\n            left -= width / 2;\n            eAttachment.left = 'right';\n          }\n        }\n      }\n\n      if (typeof pin === 'string') {\n        pin = pin.split(',').map(function (p) {\n          return p.trim();\n        });\n      } else if (pin === true) {\n        pin = ['top', 'left', 'right', 'bottom'];\n      }\n\n      pin = pin || [];\n\n      var pinned = [];\n      var oob = [];\n\n      if (top < bounds[1]) {\n        if (pin.indexOf('top') >= 0) {\n          top = bounds[1];\n          pinned.push('top');\n        } else {\n          oob.push('top');\n        }\n      }\n\n      if (top + height > bounds[3]) {\n        if (pin.indexOf('bottom') >= 0) {\n          top = bounds[3] - height;\n          pinned.push('bottom');\n        } else {\n          oob.push('bottom');\n        }\n      }\n\n      if (left < bounds[0]) {\n        if (pin.indexOf('left') >= 0) {\n          left = bounds[0];\n          pinned.push('left');\n        } else {\n          oob.push('left');\n        }\n      }\n\n      if (left + width > bounds[2]) {\n        if (pin.indexOf('right') >= 0) {\n          left = bounds[2] - width;\n          pinned.push('right');\n        } else {\n          oob.push('right');\n        }\n      }\n\n      if (pinned.length) {\n        (function () {\n          var pinnedClass = undefined;\n          if (typeof _this.options.pinnedClass !== 'undefined') {\n            pinnedClass = _this.options.pinnedClass;\n          } else {\n            pinnedClass = _this.getClass('pinned');\n          }\n\n          addClasses.push(pinnedClass);\n          pinned.forEach(function (side) {\n            addClasses.push(pinnedClass + '-' + side);\n          });\n        })();\n      }\n\n      if (oob.length) {\n        (function () {\n          var oobClass = undefined;\n          if (typeof _this.options.outOfBoundsClass !== 'undefined') {\n            oobClass = _this.options.outOfBoundsClass;\n          } else {\n            oobClass = _this.getClass('out-of-bounds');\n          }\n\n          addClasses.push(oobClass);\n          oob.forEach(function (side) {\n            addClasses.push(oobClass + '-' + side);\n          });\n        })();\n      }\n\n      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {\n        eAttachment.left = tAttachment.left = false;\n      }\n      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {\n        eAttachment.top = tAttachment.top = false;\n      }\n\n      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {\n        _this.updateAttachClasses(eAttachment, tAttachment);\n        _this.trigger('update', {\n          attachment: eAttachment,\n          targetAttachment: tAttachment\n        });\n      }\n    });\n\n    defer(function () {\n      if (!(_this.options.addTargetClasses === false)) {\n        updateClasses(_this.target, addClasses, allClasses);\n      }\n      updateClasses(_this.element, addClasses, allClasses);\n    });\n\n    return { top: top, left: left };\n  }\n});\n/* globals TetherBase */\n\n'use strict';\n\nvar _TetherBase$Utils = TetherBase.Utils;\nvar getBounds = _TetherBase$Utils.getBounds;\nvar updateClasses = _TetherBase$Utils.updateClasses;\nvar defer = _TetherBase$Utils.defer;\n\nTetherBase.modules.push({\n  position: function position(_ref) {\n    var _this = this;\n\n    var top = _ref.top;\n    var left = _ref.left;\n\n    var _cache = this.cache('element-bounds', function () {\n      return getBounds(_this.element);\n    });\n\n    var height = _cache.height;\n    var width = _cache.width;\n\n    var targetPos = this.getTargetBounds();\n\n    var bottom = top + height;\n    var right = left + width;\n\n    var abutted = [];\n    if (top <= targetPos.bottom && bottom >= targetPos.top) {\n      ['left', 'right'].forEach(function (side) {\n        var targetPosSide = targetPos[side];\n        if (targetPosSide === left || targetPosSide === right) {\n          abutted.push(side);\n        }\n      });\n    }\n\n    if (left <= targetPos.right && right >= targetPos.left) {\n      ['top', 'bottom'].forEach(function (side) {\n        var targetPosSide = targetPos[side];\n        if (targetPosSide === top || targetPosSide === bottom) {\n          abutted.push(side);\n        }\n      });\n    }\n\n    var allClasses = [];\n    var addClasses = [];\n\n    var sides = ['left', 'top', 'right', 'bottom'];\n    allClasses.push(this.getClass('abutted'));\n    sides.forEach(function (side) {\n      allClasses.push(_this.getClass('abutted') + '-' + side);\n    });\n\n    if (abutted.length) {\n      addClasses.push(this.getClass('abutted'));\n    }\n\n    abutted.forEach(function (side) {\n      addClasses.push(_this.getClass('abutted') + '-' + side);\n    });\n\n    defer(function () {\n      if (!(_this.options.addTargetClasses === false)) {\n        updateClasses(_this.target, addClasses, allClasses);\n      }\n      updateClasses(_this.element, addClasses, allClasses);\n    });\n\n    return true;\n  }\n});\n/* globals TetherBase */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nTetherBase.modules.push({\n  position: function position(_ref) {\n    var top = _ref.top;\n    var left = _ref.left;\n\n    if (!this.options.shift) {\n      return;\n    }\n\n    var shift = this.options.shift;\n    if (typeof this.options.shift === 'function') {\n      shift = this.options.shift.call(this, { top: top, left: left });\n    }\n\n    var shiftTop = undefined,\n        shiftLeft = undefined;\n    if (typeof shift === 'string') {\n      shift = shift.split(' ');\n      shift[1] = shift[1] || shift[0];\n\n      var _shift = shift;\n\n      var _shift2 = _slicedToArray(_shift, 2);\n\n      shiftTop = _shift2[0];\n      shiftLeft = _shift2[1];\n\n      shiftTop = parseFloat(shiftTop, 10);\n      shiftLeft = parseFloat(shiftLeft, 10);\n    } else {\n      shiftTop = shift.top;\n      shiftLeft = shift.left;\n    }\n\n    top += shiftTop;\n    left += shiftLeft;\n\n    return { top: top, left: left };\n  }\n});\nreturn Tether;\n\n}));\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){\n\n\t//UMD\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn factory();\n\t\t}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t *          a lot of methods and functionality to all classes that extend\n\t\t *          it. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t    var Tone = function (inputs, outputs) {\n\t        /**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(inputs) || inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        /**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(outputs) || outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which \n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds. \n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (this.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (this.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (this.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (this.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (this.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (this.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (this.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!this.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!this.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCLASS VARS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (this.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (this.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        if (!this.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!this.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Array.isArray(this.output)) {\n\t            outputNum = this.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (this.isArray(this.output)) {\n\t            if (this.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = this.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connectSeries = function () {\n\t        if (arguments.length > 1) {\n\t            var currentUnit = arguments[0];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.chain = function () {\n\t        if (arguments.length > 0) {\n\t            var currentUnit = this;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.fan = function () {\n\t        if (arguments.length > 0) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.connect(arguments[i]);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    //give native nodes chain and fan methods\n\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUTILITIES / HELPERS / MATHS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both \n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property. \n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop.\n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return this.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    /**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t        var options = {};\n\t        if (values.length === 1 && this.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!this.isUndef(defaults)) {\n\t            return this.defaultArg(options, defaults);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t */\n\t    Tone.prototype.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t */\n\t    Tone.prototype.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t */\n\t    Tone.prototype.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t */\n\t    Tone.prototype.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t */\n\t    Tone.prototype.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states. \n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t */\n\t    Tone.prototype.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}   \n\t\t */\n\t    Tone.prototype.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}   \n\t\t */\n\t    Tone.prototype.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.prototype.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes. \n\t\t *  @private\n\t\t *  @type {Tone.Context|undefined}\n\t\t */\n\t    var audioContext;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            if (Tone.Context) {\n\t                Tone.Context.emit('init', audioContext);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    Tone.version = 'r10';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t    };\n\t    Tone.extend(Tone.SignalBase);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t        } else if (this.isFunction(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t                //default units\n\t                units = this.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (this.isString(val)) {\n\t                this.set(val);\n\t            } else if (this.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!this.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!this.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (this.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (this.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!this.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = this.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @override\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * this.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz. \n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value. \n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.prototype.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function (context) {\n\t        Tone.Emitter.call(this);\n\t        if (!context) {\n\t            context = new window.AudioContext();\n\t        }\n\t        this._context = context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = 'interactive';\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lookAhead = 0.1;\n\t        /**\n\t\t\t *  How often the update look runs\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._updateInterval = this._lookAhead / 3;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t *  @private\n\t\t\t *  @type  {WebWorker}\n\t\t\t */\n\t        this._worker = this._createWorker();\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (this.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime;\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.addEventListener('message', function () {\n\t            // tick the clock\n\t            this.emit('tick');\n\t        }.bind(this));\n\t        //lag compensation\n\t        worker.addEventListener('message', function () {\n\t            var now = this.now();\n\t            if (this.isNumber(this._lastUpdate)) {\n\t                var diff = now - this._lastUpdate;\n\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t            }\n\t            this._lastUpdate = now;\n\t        }.bind(this));\n\t        return worker;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  This is the time that the clock is falling behind\n\t\t *  the scheduled update interval. The Context automatically\n\t\t *  adjusts for the lag and schedules further in advance.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lag\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t        get: function () {\n\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t            diff = Math.max(diff, 0);\n\t            return diff;\n\t        }\n\t    });\n\t    /**\n\t\t *  The amount of time in advance that events are scheduled.\n\t\t *  The lookAhead will adjust slightly in response to the \n\t\t *  measured update time to try to avoid clicks.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lookAhead\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t        get: function () {\n\t            return this._lookAhead;\n\t        },\n\t        set: function (lA) {\n\t            this._lookAhead = lA;\n\t        }\n\t    });\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name updateInterval\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @static\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (this.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    function shimConnect() {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                if (Array.isArray(B.input)) {\n\t                    if (Tone.prototype.isUndef(inNum)) {\n\t                        inNum = 0;\n\t                    }\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Array.isArray(B.input)) {\n\t                if (Tone.prototype.isUndef(inNum)) {\n\t                    inNum = 0;\n\t                }\n\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    }\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        shimConnect();\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /** \n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  <ul>\n\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t *  </ul>\n\t\t\t *  \n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value. \n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /** \n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /** \n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /** \n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /** \n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t *  is twice is loud. \n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /** \n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /** \n\t\t\t *  Beats per minute. \n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /** \n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /** \n\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /** \n\t\t\t *  Angle between 0 and 360. \n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /** \n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /** \n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /** \n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /** \n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /** \n\t\t\t *  A frequency represented by a letter name, \n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /** \n\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /** \n\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /** \n\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t *  <ul>\n\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t *  </ul>\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time \n\t\t *  @return {Seconds} \n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (this.isNumber(time)) {\n\t            return time;\n\t        } else if (this.isUndef(time)) {\n\t            return this.now();\n\t        } else if (this.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq \n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (this.isNumber(freq)) {\n\t            return freq;\n\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (this.isNumber(time) || this.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (this.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter. \n\t\t *  @extends {Tone}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param.defaults);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by \n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = null;\n\t        if (this.isObject(options.lfo)) {\n\t            this.value = options.lfo;\n\t        } else if (!this.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter. \n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            if (this.isObject(value)) {\n\t                //throw an error if the LFO needs to be included\n\t                if (this.isUndef(Tone.LFO)) {\n\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t                }\n\t                //remove the old one\n\t                if (this._lfo) {\n\t                    this._lfo.dispose();\n\t                }\n\t                this._lfo = new Tone.LFO(value).start();\n\t                this._lfo.connect(this.input);\n\t            } else {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._param.cancelScheduledValues(0);\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return this.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return this.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        value = this._fromUnits(value);\n\t        time = this.toSeconds(time);\n\t        if (time <= this.now() + this.blockTime) {\n\t            this._param.value = value;\n\t        } else {\n\t            this._param.setValueAtTime(value, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to \n\t\t *  schedule changes from the current value. \n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = this.defaultArg(now, this.now());\n\t        var currentVal = this._param.value;\n\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t * signal.exponentialRampToValue(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t * signal.linearRampToValue(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Param} this \n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array} values    \n\t\t *  @param {Time} startTime \n\t\t *  @param {Time} duration  \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        for (var i = 0; i < values.length; i++) {\n\t            values[i] = this._fromUnits(values[i]);\n\t        }\n\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially \n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = this.defaultArg(rampTime, 0);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampToValue(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The LFO created by the signal instance. If none\n\t\t *  was created, this is null.\n\t\t *  @type {Tone.LFO}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Param#\n\t\t *  @name lfo\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t        get: function () {\n\t            return this._lfo;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param = null;\n\t        if (this._lfo) {\n\t            this._lfo.dispose();\n\t            this._lfo = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain.defaults);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    //STATIC///////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  input   The number of inputs\n\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t *  @return  {Tone}  this\n\t\t *  @internal\n\t\t */\n\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = new Tone.Gain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = new Tone.Gain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._gain = this.context.createGain();\n\t        options.param = this._gain.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this._gain.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).chain(this._gain);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._gain.disconnect();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t *         Internally, events are stored in time order for fast \n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list. \n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t *                           timeline. \n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (this.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._timeline.length) {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t        } else {\n\t            this._timeline.push(event);\n\t        }\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time) {\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t        var index = this._search(time);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        if (this._timeline.length) {\n\t            var index = this._search(time);\n\t            if (index >= 0) {\n\t                this._timeline = this._timeline.slice(index + 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Does a binary serach on the timeline array and returns the \n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time  \n\t\t *  @return  {Number} the index in the timeline array \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time) {\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event.time === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent.time === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event.time < time && nextEvent.time > time) {\n\t                return midPoint;\n\t            } else if (event.time > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else if (event.time < time) {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for \n\t\t *  removing items from the array. \n\t\t *  @param  {Function}  callback \n\t\t *  @param  {Number=}    lowerBound     \n\t\t *  @param  {Number=}    upperBound    \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback(this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        if (this._toRemove.length > 0) {\n\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t                if (index !== -1) {\n\t                    this._timeline.splice(index, 1);\n\t                }\n\t            }\n\t            this._toRemove = [];\n\t        }\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback(event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(10);\n\t        //constructors\n\t        Tone.Signal.apply(this, options);\n\t        options.param = this._param;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Curve: 'curve',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal. \n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._initial = convertedVal;\n\t            this.cancelScheduledValues();\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = this.defaultArg(scaling, 1);\n\t        //copy the array\n\t        var floats = new Array(values.length);\n\t        for (var i = 0; i < floats.length; i++) {\n\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        duration = this.toSeconds(duration);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Curve,\n\t            'value': floats,\n\t            'time': startTime,\n\t            'duration': duration\n\t        });\n\t        //set the first value\n\t        this._param.setValueAtTime(floats[0], startTime);\n\t        //schedule a lienar ramp for each of the segments\n\t        for (var j = 1; j < floats.length; j++) {\n\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after \n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t            //if the curve is still playing\n\t            //cancel the curve\n\t            this.cancelScheduledValues(time);\n\t            this.linearRampToValueAtTime(val, time);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t            this.setValueAtTime(val, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previouVal;\n\t            if (previous === null) {\n\t                previouVal = this._initial;\n\t            } else {\n\t                previouVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t        var len = curve.length;\n\t        // If time is after duration, return the last curve value\n\t        if (time >= start + duration) {\n\t            return curve[len - 1];\n\t        } else if (time <= start) {\n\t            return curve[0];\n\t        } else {\n\t            var progress = (time - start) / duration;\n\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t            var lowerVal = curve[lowerIndex];\n\t            var upperVal = curve[upperIndex];\n\t            if (upperIndex === lowerIndex) {\n\t                return lowerVal;\n\t            } else {\n\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = this.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t *                         0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        /** \n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value \n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for \n\t\t * syncronizing visual output to the envelope. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack. \n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (this.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (this.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (this.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (this.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = this.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampToValue(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampToValue(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.exponentialRampToValue(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (this.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease. \n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal. \n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves. \n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t *                               0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        this.input = null;\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's \n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser.defaults);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The return type of the analysis\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._returnType = options.returnType;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t        this.returnType = options.returnType;\n\t        this.minDecibels = options.minDecibels;\n\t        this.maxDecibels = options.maxDecibels;\n\t    };\n\t    Tone.extend(Tone.Analyser);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'returnType': 'byte',\n\t        'type': 'fft',\n\t        'smoothing': 0.8,\n\t        'maxDecibels': -30,\n\t        'minDecibels': -100\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t *  byte values are between [0,255]. float values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.ReturnType = {\n\t        Byte: 'byte',\n\t        Float: 'float'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the \n\t\t *  result as a TypedArray. \n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.analyse = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteFrequencyData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t            }\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t            }\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t *  are between 0-255. \"float\" values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t        get: function () {\n\t            return this._returnType;\n\t        },\n\t        set: function (type) {\n\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t            } else {\n\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t            }\n\t            this._returnType = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name minDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t        get: function () {\n\t            return this._analyser.minDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.minDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name maxDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t        get: function () {\n\t            return this._analyser.maxDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.maxDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor.defaults);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = this.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param.dispose();\n\t        this._param = null;\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = this.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!this.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (this.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (this.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return this.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t *          (default), -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter.defaults);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            this.connectSeries.apply(this, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit.defaults);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3.defaults);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay.defaults);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed. \n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t *          the amplitude of an incoming signal. \n\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known \n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack  \n\t\t *  @param   {Time} release \n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.Envelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming \n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return this.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = this.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock.defaults);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1,\n\t        'lookAhead': 'auto'\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'offset': offset\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t *                          when the page was loaded.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //get the frequency value to compute the value of the next loop\n\t        var now = this.now();\n\t        //if it's started\n\t        var lookAhead = this.context.lookAhead;\n\t        var updateInterval = this.context.updateInterval;\n\t        var lagCompensation = this.context.lag * 2;\n\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t        while (loopInterval > this._nextTick && this._state) {\n\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t            if (currentState !== this._lastState) {\n\t                this._lastState = currentState;\n\t                var event = this._state.get(this._nextTick);\n\t                // emit an event\n\t                if (currentState === Tone.State.Started) {\n\t                    //correct the time\n\t                    this._nextTick = event.time;\n\t                    if (!this.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this.emit('start', event.time, this.ticks);\n\t                } else if (currentState === Tone.State.Stopped) {\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                } else if (currentState === Tone.State.Paused) {\n\t                    this.emit('pause', event.time);\n\t                }\n\t            }\n\t            var tickTime = this._nextTick;\n\t            if (this.frequency) {\n\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t                if (currentState === Tone.State.Started) {\n\t                    this.callback(tickTime);\n\t                    this.ticks++;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            if (this._root !== null) {\n\t                this._root.traverse(function (node) {\n\t                    allNodes.push(node);\n\t                });\n\t            }\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized. \n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument. \n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tLOOPING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.loop = false;\n\t        /** \n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /** \n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tCLOCK/TEMPO\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t        /**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t        this._clock = new Tone.Clock({\n\t            'callback': this._processTick.bind(this),\n\t            'frequency': 0\n\t        });\n\t        this._bindClockEvents();\n\t        /**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t        this.bpm = this._clock.frequency;\n\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t        this.bpm.units = Tone.Type.BPM;\n\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t        this._readOnly('bpm');\n\t        /**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tTIMELINE EVENTS\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduledEvents = {};\n\t        /**\n\t\t\t *  The event ID counter\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eventID = 0;\n\t        /**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = new Tone.Timeline();\n\t        /**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t        /**\n\t\t\t *  Events that occur once\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._onceEvents = new Tone.Timeline();\n\t        /** \n\t\t\t *  All of the synced Signals\n\t\t\t *  @private \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._syncedSignals = [];\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tSWING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t        //8n\n\t        /**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingAmount = 0;\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks === this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //process the single occurrence events\n\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t            event.callback(tickTime);\n\t            //remove the event\n\t            delete this._scheduledEvents[event.id.toString()];\n\t        }.bind(this));\n\t        //and clear the single occurrence timeline\n\t        this._onceEvents.cancelBefore(ticks);\n\t        //fire the next tick events if their time has come\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.callback(tickTime);\n\t        });\n\t        //process the repeated events\n\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t            if ((ticks - event.time) % event.interval === 0) {\n\t                event.callback(tickTime);\n\t            }\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._timeline\n\t        };\n\t        this._timeline.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`. \n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event. \n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        if (interval <= 0) {\n\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t        }\n\t        var event = {\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t            'interval': this.toTicks(interval),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._repeatedEvents\n\t        };\n\t        this._repeatedEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t *  Note that if the given time is less than the current transport time, \n\t\t *  the event will be invoked immediately. \n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var id = this._eventID++;\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'id': id\n\t        };\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._onceEvents\n\t        };\n\t        this._onceEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = this.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._onceEvents.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!this.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (this.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time. \n\t\t *  @param {TransportTime} startPosition \n\t\t *  @param {TransportTime} endPosition   \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default value is an 8th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value \n\t\t *  after other objects have been created can cause problems. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds|String}\n\t\t *  @name latencyHint\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return Tone.Clock.latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            Tone.Clock.latencyHint = hint;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._onceEvents.dispose();\n\t        this._onceEvents = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t            //store the Transport on the context so it can be retrieved later\n\t            context.Transport = Tone.Transport;\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers). \n\t\t *          It provides useful conveniences such as the ability \n\t\t *          to set the volume and mute the entire application. \n\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume();\n\t        /**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //connections\n\t        this.input.chain(this.output, this.context.destination);\n\t    };\n\t    Tone.extend(Tone.Master);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t *  chained in the master effects chain. \n\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter \n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} this\n\t\t */\n\t    AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the \n\t\t *          start/stop of Tone.Transport. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t * \n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t * \n\t\t */\n\t    Tone.Source = function (options) {\n\t        // this.createInsOuts(0, 1);\n\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given, \n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = this.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given, \n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time. \n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this));\n\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        this._synced = false;\n\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now] \n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        this._oscillator.start(this.toSeconds(time));\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            this._oscillator.stop(this.toSeconds(time));\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240; \n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br> \n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t * PeriodicWave equations are from the \n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based \n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag \n\t\t *  @param  {NormalRange}  phase \n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Zero = function () {\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO.defaults);\n\t        /** \n\t\t\t *  The oscillator. \n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type} \n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t *         smooth gain reduction and almost completely prevent \n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback. \n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().start();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input\n\t\t * var level = meter.value;\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'smoothing'\n\t        ], Tone.Meter.defaults);\n\t        /**\n\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t *  the signal value of the input. \n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t        this._analyser.returnType = 'float';\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t        /**\n\t\t\t *  The last computed value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastValue = 0;\n\t    };\n\t    Tone.extend(Tone.Meter);\n\t    /**\n\t\t *  @private\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Meter.Type = {\n\t        Level: 'level',\n\t        Signal: 'signal'\n\t    };\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = {\n\t        'smoothing': 0.8,\n\t        'type': Tone.Meter.Type.Level\n\t    };\n\t    /**\n\t\t * The current value of the meter. A value of 1 is\n\t\t * \"unity\".\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t        get: function () {\n\t            var signal = this._analyser.analyse();\n\t            if (this.type === Tone.Meter.Type.Level) {\n\t                //rms\n\t                var sum = 0;\n\t                for (var i = 0; i < signal.length; i++) {\n\t                    sum += Math.pow(signal[i], 2);\n\t                }\n\t                var rms = Math.sqrt(sum / signal.length);\n\t                //smooth it\n\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t                this._lastValue = rms;\n\t                //scale it\n\t                var unity = 0.35;\n\t                var val = rms / unity;\n\t                //scale the output curve\n\t                return Math.sqrt(val);\n\t            } else {\n\t                return signal[0];\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        this.createInsOuts(0, 2);\n\t        /** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        /** \n\t\t\t *  Left channel output. \n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors. \n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful \n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = this.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t *  @example\n\t\t *  //pan the input signal hard right. \n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        if (this._hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner);\n\t    /**\n\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (this._hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D.defaults);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener, \n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume. \n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol.defaults);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0.5,\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate.defaults);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (this.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (this.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (this.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = this.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (this.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (this.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (this.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern.defaults);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom.defaults);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          <br><br>\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer.defaults);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (this.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._currentDownloads--;\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t *                               If the channel is more than 1, the input array\n\t\t *                               is expected to be a multidimensional array\n\t\t *                               with dimensions equal to the number of channels.\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (this.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (this.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = this.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  the total number of downloads\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._currentDownloads = 0;\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = onload || Tone.noOp;\n\t        function onError(e) {\n\t            if (onerror) {\n\t                onerror(e);\n\t                Tone.Buffer.emit('error', e);\n\t            } else {\n\t                throw new Error(e);\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._currentDownloads++;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._currentDownloads--;\n\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t                        // clear the downloads\n\t                        Tone.Buffer._downloadQueue = [];\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t            request.abort();\n\t        });\n\t        Tone.Buffer._currentDownloads = 0;\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \n\t\t */\n\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t        urls = this._flattenUrls(urls);\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (this.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Flatten an object into a single depth object. \n\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t        var toReturn = {};\n\t        for (var i in ob) {\n\t            if (!ob.hasOwnProperty(i))\n\t                continue;\n\t            if (this.isObject(ob[i])) {\n\t                var flatObject = this._flattenUrls(ob[i]);\n\t                for (var x in flatObject) {\n\t                    if (!flatObject.hasOwnProperty(x))\n\t                        continue;\n\t                    toReturn[i + '.' + x] = flatObject[x];\n\t                }\n\t            } else {\n\t                toReturn[i] = ob[i];\n\t            }\n\t        }\n\t        return toReturn;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = this.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, input) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        if (this.isUndef(input)) {\n\t            input = this.input;\n\t        }\n\t        Buses[channelName].connect(input);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Listener = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], ListenerConstructor.defaults);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.forwardX,\n\t            options.forwardY,\n\t            options.forwardZ,\n\t            options.upX,\n\t            options.upY,\n\t            options.upZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/forward\n\t        this.forwardX = options.forwardX;\n\t        this.forwardY = options.forwardY;\n\t        this.forwardZ = options.forwardZ;\n\t        this.upX = options.upX;\n\t        this.upY = options.upY;\n\t        this.upZ = options.upZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, offlineContext);\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t        //modify the lookAhead and updateInterval to one block\n\t        this.lookAhead = this.blockTime;\n\t        this.updateInterval = this.blockTime;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t *  @private\n\t\t */\n\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t        //dummy worker that does nothing\n\t        return {\n\t            postMessage: function () {\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += Tone.prototype.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t */\n\t    Tone.Effect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback']);\n\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (this.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t *                                 of the reverb. \n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        this.connectSeries.apply(this, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        this.connectSeries.apply(this, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event.defaults);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  The probability that the callback will be invoked\n\t\t\t *  at the scheduled time. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @example\n\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t * event.probability = 0.5;\n\t\t\t */\n\t        this.probability = options.probability;\n\t        /**\n\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t */\n\t        this.humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = this.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!this.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (this.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = this.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!this.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop.defaults);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t            return this._pattern.index;\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stoped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part.defaults);\n\t        /**\n\t\t\t *  If the part is looping or not\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  The playback rate of the part\n\t\t\t *  @type  {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  The start offset\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  Keeps track of the current state\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        /**\n\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //add the events\n\t        var events = this.defaultArg(options.events, []);\n\t        if (!this.isUndef(options.events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                if (Array.isArray(events[i])) {\n\t                    this.add(events[i][0], events[i][1]);\n\t                } else {\n\t                    this.add(events[i]);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!this.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!this.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        after = this.toTicks(after);\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        ctx = this.defaultArg(ctx, this);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var e = this._events[i];\n\t            if (e instanceof Tone.Part) {\n\t                e._forEach(callback, ctx);\n\t            } else {\n\t                callback.call(ctx, e);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern.defaults);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence.defaults);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!this.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (this.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (this.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now() + this.blockTime;\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime * 1000);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0. \n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the \n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start(0);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = this.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given \n\t\t *  duration. \n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'buffer',\n\t            'onended'\n\t        ], Tone.BufferSource.defaults);\n\t        /**\n\t\t\t *  The callback to invoke after the \n\t\t\t *  buffer source is done playing. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set the buffer initially\n\t        if (!this.isUndef(options.buffer)) {\n\t            this.buffer = options.buffer;\n\t        }\n\t        this.loop = options.loop;\n\t    };\n\t    Tone.extend(Tone.BufferSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t        }\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = this.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //the values in seconds\n\t            time = this.toSeconds(time);\n\t            this._source.start(time, offset);\n\t            gain = this.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            //the fadeIn time\n\t            if (this.isUndef(fadeInTime)) {\n\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t            } else {\n\t                fadeInTime = this.toSeconds(fadeInTime);\n\t            }\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time + fadeInTime;\n\t            if (!this.isUndef(duration)) {\n\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t                duration = this.toSeconds(duration);\n\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t *  buffer out. \n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //the fadeOut time\n\t            if (this.isUndef(fadeOutTime)) {\n\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t            } else {\n\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t            }\n\t            this._stopTime = time + fadeOutTime;\n\t            //cancel the end curve\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            //set a new one\n\t            if (fadeOutTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t                time += fadeOutTime;\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t            }\n\t            // fix for safari bug and old FF\n\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t                this._source.stop(time);\n\t            }\n\t            clearTimeout(this._onendedTimeout);\n\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended. \n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t        this.dispose();\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            if (this._source) {\n\t                return this._source.buffer;\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t        set: function (buffer) {\n\t            if (buffer instanceof Tone.Buffer) {\n\t                this._source.buffer = buffer.get();\n\t            } else {\n\t                this._source.buffer = buffer;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        this.onended = null;\n\t        if (this._source) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        if (this._gainNode) {\n\t            this._gainNode.dispose();\n\t            this._gainNode = null;\n\t        }\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        this.output = null;\n\t        clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now() + this.blockTime;\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tthe noise arrays. only generated once on init\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    createBuffers();\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        Tone.Instrument.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth.defaults);\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t        //set the volume initially\n\t        this.volume.value = options.volume;\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = this.optionsObject(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player.defaults);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        if (this._buffer.loaded) {\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //make sure it has a positive duration\n\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t            duration = this.toSeconds(duration);\n\t            //the values in seconds\n\t            startTime = this.toSeconds(startTime);\n\t            //make the source\n\t            this._source = this.context.createBufferSource();\n\t            this._source.buffer = this._buffer.get();\n\t            //set the looping properties\n\t            if (this._loop) {\n\t                this._source.loop = this._loop;\n\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t            } else if (!this._synced) {\n\t                //if it's not looping, set the state change at the end of the sample\n\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t            }\n\t            //and other properties\n\t            this._source.playbackRate.value = this._playbackRate;\n\t            this._source.connect(this.output);\n\t            //start it\n\t            if (this._loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t                var loopStart = this._source.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                if (offset > loopEnd) {\n\t                    //move the offset back\n\t                    while (offset > loopEnd) {\n\t                        offset -= loopDuration;\n\t                    }\n\t                }\n\t                this._source.start(startTime, offset);\n\t            } else {\n\t                this._source.start(startTime, offset, duration);\n\t            }\n\t        } else {\n\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {String} url the url of the audio file\n\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t *  @example\n\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t * \t//repitch the sample down a half step\n\t\t * \tsampler.triggerAttack(-1);\n\t\t * }).toMaster();\n\t\t */\n\t    Tone.Sampler = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Sampler.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The sample player.\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t        this.player = new Tone.Player(options.url, options.onload);\n\t        this.player.retrigger = true;\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        this.player.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.loop = options.loop;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'reverse': false,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.1\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the start of the sample. \n\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t *                              be repitched. \n\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t        this.player.start(time);\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t *  envelope has fully released. \n\t\t *  \n\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerRelease();\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t *                                  sample should be pitch shifted.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t *  @memberOf Tone.Sampler#\n\t\t *  @name triggerAttackRelease\n\t\t *  @method triggerAttackRelease\n\t\t */\n\t    /**\n\t\t * If the output sample should loop or not.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t        get: function () {\n\t            return this.player.loop;\n\t        },\n\t        set: function (loop) {\n\t            this.player.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.player.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.player.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The buffer to play.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t        get: function () {\n\t            return this.player.buffer;\n\t        },\n\t        set: function (buff) {\n\t            this.player.buffer = buff;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.player.dispose();\n\t        this.player = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t *                                                to the MultiPlayer\n\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var multiPlayer = new MultiPlayer({\n\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t * }, function(){\n\t\t * \tmultiPlayer.start(\"kick\");\n\t\t * });\n\t\t *  @example\n\t\t * //can also store the values in an array\n\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t * function(){\n\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t * \tmultiPlayer.start(1);\n\t\t * });\n\t\t */\n\t    Tone.MultiPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'urls',\n\t            'onload'\n\t        ], Tone.MultiPlayer.defaults);\n\t        if (options.urls instanceof Tone.Buffers) {\n\t            /**\n\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t */\n\t            this.buffers = options.urls;\n\t        } else {\n\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t        }\n\t        /**\n\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t *  The fade in envelope which is applied\n\t\t\t *  to the beginning of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fade out envelope which is applied\n\t\t\t *  to the end of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.MultiPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t * Make the source from the buffername\n\t\t * @param  {String} bufferName\n\t\t * @return {Tone.BufferSource}\n\t\t * @private\n\t\t */\n\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t        var buffer;\n\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t            buffer = this.buffers.get(bufferName).get();\n\t        } else if (bufferName instanceof Tone.Buffer) {\n\t            buffer = bufferName.get();\n\t        } else if (bufferName instanceof AudioBuffer) {\n\t            buffer = bufferName;\n\t        }\n\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t            this._activeSources[bufferName] = [];\n\t        }\n\t        this._activeSources[bufferName].push(source);\n\t        return source;\n\t    };\n\t    /**\n\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t        if (duration) {\n\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t        }\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.loop = true;\n\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the first played instance of the buffer name.\n\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t            time = this.toSeconds(time);\n\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t        } else {\n\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop all currently playing buffers at the given time.\n\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var bufferName in this._activeSources) {\n\t            var sources = this._activeSources[bufferName];\n\t            for (var i = 0; i < sources.length; i++) {\n\t                sources[i].stop(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add another buffer to the available buffers.\n\t\t *  @param {String} name The name to that the buffer is refered\n\t\t *                       to in start/stop methods. \n\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t *                                  or the buffer.\n\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t */\n\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t        this.buffers.add(name, url, callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source. \"started\"\n\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.MultiPlayer#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t        get: function () {\n\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.MultiPlayer#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        for (var bufferName in this._activeSources) {\n\t            this._activeSources[bufferName].forEach(function (source) {\n\t                source.dispose();\n\t            });\n\t        }\n\t        this.buffers.dispose();\n\t        this.buffers = null;\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.MultiPlayer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer.defaults);\n\t        Tone.Source.call(this);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Plays the buffer with a small envelope\n\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        /**\n\t\t\t *  The amount of time randomly added\n\t\t\t *  or subtracted from the grain's offset\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.drift = options.drift;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'drift': 0,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = this.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        //unmute the player\n\t        this._player.volume.setValueAtTime(0, time);\n\t        if (duration) {\n\t            this._stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t        //mute the player\n\t        this._player.volume.cancelScheduledValues(time);\n\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time \n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var bufferDuration = this.buffer.duration;\n\t        if (this.loop && this._loopEnd > 0) {\n\t            bufferDuration = this._loopEnd;\n\t        }\n\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t        var offset = this._offset - this._overlap + drift;\n\t        var detune = this.detune / 100;\n\t        //keep the offset within the limits of the buffer\n\t        offset = Math.max(offset, 0);\n\t        offset = Math.min(offset, bufferDuration);\n\t        var originalFadeIn = this._player.fadeIn;\n\t        if (this.loop && this._offset > bufferDuration) {\n\t            //play the end\n\t            var endSegmentDuration = this._offset - bufferDuration;\n\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t            //and play the beginning \n\t            offset = this._offset % bufferDuration;\n\t            this._offset = this._loopStart;\n\t            this._player.fadeIn = 0;\n\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t        } else if (this._offset > bufferDuration) {\n\t            //set the state to stopped. \n\t            this.stop(time);\n\t        } else {\n\t            if (offset === 0) {\n\t                this._player.fadeIn = 0;\n\t            }\n\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t        }\n\t        this._player.fadeIn = originalFadeIn;\n\t        //increment the offset\n\t        var duration = this._clock._nextTick - time;\n\t        this._offset += duration * this._playbackRate;\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {[type]}  [description]\n\t\t */\n\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the \n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between \n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            time = this.toSeconds(time);\n\t            this._overlap = time;\n\t            if (this._overlap < 0) {\n\t                this._player.fadeIn = 0.01;\n\t                this._player.fadeOut = 0.01;\n\t            } else {\n\t                this._player.fadeIn = time;\n\t                this._player.fadeOut = time;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._player.dispose();\n\t        this._player = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check \n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *         \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t * \n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t        /**\n\t\t\t *  The MediaStreamNode \n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t        return this.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (this.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                if (!device) {\n\t                    //otherwise just take the first one\n\t                    device = devices[0];\n\t                }\n\t            }\n\t            //didn't find a matching device\n\t            if (!device) {\n\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @example\n\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is \n\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the \n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(20)\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(7),\n  /* template */\n  __webpack_require__(17),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(22)\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(8),\n  /* template */\n  __webpack_require__(19),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {}, [_vm._l((_vm.melodie), function(n, i) {\n    return _c('note', {\n      key: i,\n      attrs: {\n        \"note\": n\n      },\n      on: {\n        \"change\": _vm.update\n      }\n    })\n  }), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"button\",\n      \"value\": \"play\"\n    },\n    on: {\n      \"click\": _vm.play\n    }\n  }), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"button\",\n      \"value\": \"stop\"\n    },\n    on: {\n      \"click\": _vm.stop\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"alert\"\n  })], 2)\n},staticRenderFns: []}\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"app\"\n    }\n  }, [_c('musique')], 1)\n},staticRenderFns: []}\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"note\"\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.note),\n      expression: \"note\"\n    }],\n    attrs: {\n      \"min\": \"0\",\n      \"max\": \"7\",\n      \"type\": \"range\",\n      \"step\": \"1\"\n    },\n    domProps: {\n      \"value\": (_vm.note)\n    },\n    on: {\n      \"__r\": function($event) {\n        _vm.note = $event.target.value\n      }\n    }\n  })])\n},staticRenderFns: []}\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(10);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"57699844\", content, true);\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(11);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"9b22c6e4\", content, true);\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(12);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"1e116a01\", content, true);\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// build.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8d4620bb544111cfa687","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 0\n// module chunks = 0","// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = Object.create(options.computed || null)\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n    options.computed = computed\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/component-normalizer.js\n// module id = 1\n// module chunks = 0","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = require('./listToStyles')\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader/lib/addStylesClient.js\n// module id = 2\n// module chunks = 0","function observeDOM(t,e,n){var i=window.MutationObserver||window.WebKitMutationObserver,o=window.addEventListener;if(i){var s=new i(function(t){(t[0].addedNodes.length>0||t[0].removedNodes.length>0)&&e()});s.observe(t,Object.assign({childList:!0,subtree:!0},n))}else o&&(t.addEventListener(\"DOMNodeInserted\",e,!1),t.addEventListener(\"DOMNodeRemoved\",e,!1))}function targets(t,e,n,i){var o=t.__vue__;if(!o)return void console.warn(\"__vue__ is not available on element\",t);var s=Object.keys(e.modifiers||{}).filter(function(t){return!all_listen_types[t]});e.value&&s.push(e.value);var r=function(){i({targets:s,vm:o})};Object.keys(all_listen_types).forEach(function(i){(n[i]||e.modifiers[i])&&t.addEventListener(i,r)})}function isElement(t){return t.nodeType}function closest(t,e){var n=t.closest(e);return n===t?null:n}function $QSA(t,e){return e||(e=document),isElement(e)?Array.prototype.slice.call(e.querySelectorAll(t)):[]}function $QS(t,e){return e||(e=document),isElement(e)?e.querySelector(t)||null:null}function getVm(t){return t?t.__vue__:null}function toType(t){return{}.toString.call(t).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()}function typeCheckConfig(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],s=e[i],r=s&&isElement(s)?\"element\":toType(s);new RegExp(o).test(r)||console.error(t+': Option \"'+i+'\" provided type \"'+r+'\" but expected type \"'+o+'\"')}}function ScrollSpy(t,e){this._$el=t,this._selector=[Selector.NAV_LINKS,Selector.LIST_ITEMS,Selector.DROPDOWN_ITEMS].join(\",\"),this._config=Object.assign({},Default),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,this._$root=null,this._resizeTimeout=null,this.updateConfig(e)}import t from\"tether\";var alert={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.localShow?n(\"div\",{class:t.classObject,attrs:{role:\"alert\",\"aria-live\":\"polite\",\"aria-atomic\":\"true\"}},[t.dismissible?n(\"button\",{staticClass:\"close\",attrs:{type:\"button\",\"data-dismiss\":\"alert\",\"aria-label\":\"dismissLabel\"},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.dismiss(e)}}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"×\")])]):t._e(),t._t(\"default\")],2):t._e()},staticRenderFns:[],data:function(){return{countDownTimerId:null,dismissed:!1}},created:function(){this.state&&console.warn(\"<b-alrt> state property is deprecated, please use variant instead.\")},computed:{classObject:function(){return[\"alert\",this.alertVariant,this.dismissible?\"alert-dismissible\":\"\"]},alertVariant:function(){var t=this.state||this.variant||\"info\";return\"alert-\"+t},localShow:function(){return!this.dismissed&&(this.countDownTimerId||this.show)}},props:{variant:{type:String,default:\"info\"},state:{type:String,default:null},dismissible:{type:Boolean,default:!1},dismissLabel:{type:String,default:\"Close\"},show:{type:[Boolean,Number],default:!1}},watch:{show:function(){this.showChanged()}},mounted:function(){this.showChanged()},methods:{dismiss:function(){this.dismissed=!0,this.$emit(\"dismissed\"),this.clearCounter()},clearCounter:function(){this.countDownTimerId&&clearInterval(this.countDownTimerId)},showChanged:function(){var t=this;if(this.dismissed=!1,this.show!==!0&&this.show!==!1&&null!==this.show&&0!==this.show){var e=this.show;this.$emit(\"dismiss-count-down\",e),this.clearCounter(),this.countDownTimerId=setInterval(function(){return e<2?t.dismiss():(e--,void t.$emit(\"dismiss-count-down\",e))},1e3)}}}},linkMixin={computed:{isRouterLink:function(){return Boolean(this.$router&&this.to&&!this.disabled)},_href:function(){return this.disabled?\"#\":this.href?this.href:this.to&&\"string\"==typeof this.to?this.to:void 0},linkClassObject:function(){return[this.active?this.exact?this.exactActiveClass:this.activeClass:null,this.disabled?\"disabled\":null]}},props:{active:{type:Boolean,default:!1},disabled:Boolean,href:{type:String,default:\"#\"},to:{type:[String,Object],default:null},tag:{type:String,default:\"a\"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:{type:String,default:\"active\"},exactActiveClass:{type:String,default:\"active\"},event:{type:[String,Array],default:\"click\"}},methods:{linkClick:function(t){this.disabled||(this.$root.$emit(\"clicked::link\",this),this.$emit(\"click\")),(this.disabled||!this.isRouterLink&&\"#\"===this._href)&&(t.preventDefault(),t.stopPropagation())}}},bLink={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.isRouterLink?n(\"router-link\",{tag:\"a\",class:t.linkClassObject,attrs:{\"active-class\":t.activeClass,\"exact-active-class\":t.exactActiveClass,disabled:t.disabled,\"aria-disabled\":t.disabled?\"true\":\"false\",to:t.to,exact:t.exact,append:t.append,replace:t.replace,event:t.event,tag:t.tag},on:{click:t.linkClick}},[t._t(\"default\")],2):n(\"a\",{class:t.linkClassObject,attrs:{disabled:t.disabled,\"aria-disabled\":t.disabled?\"true\":\"false\",href:t._href},on:{click:t.linkClick}},[t._t(\"default\")],2)},staticRenderFns:[],mixins:[linkMixin]},breadcrumb={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"ol\",{staticClass:\"breadcrumb\",attrs:{role:\"navigation\"}},[t._l(t.items2,function(e){return n(\"li\",{class:[\"breadcrumb-item\",e.__active?\"active\":null],attrs:{role:\"presentation\"},on:{click:function(n){t.onclick(e)}}},[e.active?n(\"span\",{domProps:{innerHTML:t._s(e.text)}}):n(\"b-link\",{attrs:{to:e.to,href:e.href||e.link},domProps:{innerHTML:t._s(e.text)},on:{click:t.onclick}})],1)}),t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},computed:{componentType:function(){return this.to?\"router-link\":\"a\"},items2:function(){var t=this.items.length>0&&this.items[this.items.length-1];return this.items.map(function(e){return\"string\"==typeof e?{text:e,link:\"#\",active:e===t}:(e.active!==!0&&e.active!==!1?e.__active=e===t:e.__active=e.active,e)})}},props:{items:{type:Array,default:function(){return[]},required:!0}},methods:{onclick:function(t){this.$emit(\"click\",t)}}},bBtn={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.componentType,{tag:\"button\",class:t.classObject,attrs:{to:t.to,href:t.href,disabled:t.disabled},on:{click:t.onclick}},[t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},computed:{classObject:function(){return[\"btn\",this.btnVariant,this.btnSize,this.btnBlock,this.btnDisabled,this.inactive?\"btn-inactive\":\"\"]},componentType:function(){return this.href||this.to?\"b-link\":\"button\"},btnBlock:function(){return this.block?\"btn-block\":\"\"},btnVariant:function(){return this.variant?\"btn-\"+this.variant:\"btn-secondary\"},btnSize:function(){return this.size?\"btn-\"+this.size:\"\"},btnDisabled:function(){return this.disabled?\"disabled\":\"\"}},props:{block:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},inactive:{type:Boolean,default:!1},size:{type:String,default:null},variant:{type:String,default:null},to:{type:[String,Object]},href:{type:String}},methods:{onclick:function(t){this.disabled?(t.stopPropagation(),t.preventDefault()):this.$emit(\"click\",t)}}},ITEM_SELECTOR=['.btn:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','.form-control:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','select:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','input[type=\"checkbox\"]:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','input[type=\"radio\"]:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),buttonToolbar={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:t.classObject,attrs:{role:\"toolbar\",tabindex:t.keyNav?\"0\":null},on:{focusin:function(e){return e.target!==e.currentTarget?null:void t.focusFirst(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:void t.focusNext(e,!1):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"left\",37))&&e.shiftKey?\"button\"in e&&0!==e.button?null:void t.focusFirst(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"up\",38))&&e.shiftKey?void t.focusFirst(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"right\",39))&&e.shiftKey?\"button\"in e&&2!==e.button?null:void t.focusLast(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"down\",40))&&e.shiftKey?void t.focusLast(e):null}]}},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[\"btn-toolbar\",this.justify&&!this.vertical?\"justify-content-between\":\"\"]}},props:{justify:{type:Boolean,default:!1},KeyNav:{type:Boolean,default:!1}},methods:{setItemFocus:function(t){this.$nextTick(function(){t.focus()})},focusNext:function(t,e){if(this.keyNav){t.preventDefault(),t.stopPropagation();var n=this.getItems();if(!(n.length<1)){var i=n.indexOf(t.target);e&&i>0?i--:!e&&i<n.length-1&&i++,i<0&&(i=0),this.setItemFocus(n[i])}}},focusFirst:function(t){if(this.keyNav){t.preventDefault(),t.stopPropagation();var e=this.getItems();e.length>0&&this.setItemFocus(e[0])}},focusLast:function(t){if(this.keyNav){t.preventDefault(),t.stopPropagation();var e=this.getItems();e.length>0&&this.setItemFocus([e.length-1])}},getItems:function(){var t=Array.prototype.slice.call(this.$el.querySelectorAll(ITEM_SELECTOR));return t.forEach(function(t){t.tabIndex=-1}),t}},mounted:function(){this.keyNav&&this.getItems()}},buttonGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:t.classObject},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[\"btn-group\",this.vertical?\"btn-group-vertical\":\"\",this.justify&&!this.vertical?\"justify-content-between\":\"\",this.size?\"btn-group-\"+this.size:\"\"]}},props:{vertical:{type:Boolean,default:!1},justify:{type:Boolean,default:!1},size:{type:String,default:null}}},clickOut={mounted:function(){\"undefined\"!=typeof document&&document.documentElement.addEventListener(\"click\",this._clickOutListener)},destroyed:function(){\"undefined\"!=typeof document&&document.removeEventListener(\"click\",this._clickOutListener)},methods:{_clickOutListener:function(t){this.$el.contains(t.target)||this.clickOutListener&&this.clickOutListener()}}},ITEM_SELECTOR$1=['.dropdown-item:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','.dropdown-header:not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),dropdown={props:{split:{type:Boolean,default:!1},text:{type:String,default:\"\"},dropup:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},right:{type:Boolean,default:!1}},created:function(){var t=this,e=function(e){e!==t&&(t.visible=!1)};this.$root.$on(\"shown::dropdown\",e),this.$root.$on(\"clicked::link\",e)},watch:{visible:function(t,e){var n=this;if(t!==e)if(t){if(this.$root.$emit(\"shown::dropdown\",this),\"undefined\"!=typeof document&&\"ontouchstart\"in document.documentElement){var i=Array.prototype.slice.call(document.body.children);i.forEach(function(t){t.addEventListener(\"mouseover\",n.noop)})}}else if(this.$root.$emit(\"hidden::dropdown\",this),\"undefined\"!=typeof document&&\"ontouchstart\"in document.documentElement){var o=Array.prototype.slice.call(document.body.children);o.forEach(function(t){t.removeEventListener(\"mouseover\",n.noop)})}}},methods:{noop:function(){},toggle:function(){return this.disabled?void(this.visible=!1):(this.visible=!this.visible,void(this.visible&&this.$nextTick(function(){var t=this.getItems();t.length>0&&t[0].focus()})))},onTab:function(){this.visible&&(this.visible=!1)},onEsc:function(t){this.visible&&(this.visible=!1,t.preventDefault(),t.stopPropagation(),this.$nextTick(function(){var t;t=this.split&&this.$refs.toggle?this.$refs.toggle.$el||this.$refs.toggle:this.$refs.button.$el||this.$refs.button,t&&t.focus&&t.focus()}))},focusNext:function(t,e){if(this.visible){t.preventDefault(),t.stopPropagation();var n=this.getItems();if(!(n.length<1)){var i=n.indexOf(t.target);e&&i>0?i--:!e&&i<n.length-1&&i++,i<0&&(i=0),n[i].focus()}}},getItems:function(){return Array.prototype.slice.call(this.$refs.menu.querySelectorAll(ITEM_SELECTOR$1))}}},buttonGroupDropdown={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"btn-group\",\"dropdown\",{dropup:t.dropup,show:t.visible}]},[n(\"b-button\",{ref:\"button\",class:{\"dropdown-toggle\":!t.split,\"btn-link\":t.link},attrs:{id:t.id?t.id+\"__BV_button_\":null,\"aria-expanded\":t.visible?\"true\":\"false\",variant:t.variant,size:t.size,disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.click(e)},kedown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.click(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.click(e)):null}]}},[t._t(\"text\",[t._v(t._s(t.text))])],2),n(\"div\",{ref:\"menu\",class:[\"dropdown-menu\",{\"dropdown-menu-right\":t.right}],attrs:{role:\"menu\",\"aria-labelledby\":t.id?t.id+\"__BV_button_\":null},on:{keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"tab\",9)?void t.onTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null}]}},[t._t(\"default\")],2)],1)},staticRenderFns:[],mixins:[clickOut,dropdown],data:function(){return{visible:!1}},computed:{dropdownToggle:function(){return this.caret?\"dropdown-toggle\":\"\"}},props:{id:{type:String},caret:{type:Boolean,default:!0}},methods:{clickOutListener:function(){this.visible=!1}}},inputGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:t.classObject,attrs:{role:\"group\"}},[t._t(\"left\",[t.left?n(\"div\",{staticClass:\"input-group-addon\",domProps:{innerHTML:t._s(t.left)}}):t._e()]),t._t(\"default\"),t._t(\"right\",[t.right?n(\"div\",{staticClass:\"input-group-addon\",domProps:{innerHTML:t._s(t.right)}}):t._e()])],2)},staticRenderFns:[],computed:{classObject:function(){return[\"input-group\",this.size?\"input-group-\"+this.size:\"\",this.state?\"has-\"+this.state:\"\"]}},props:{size:{type:String,default:null},state:{type:String,default:null},left:{type:String,default:null},right:{type:String,default:null}}},inputGroupAddon={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"input-group-addon\",attrs:{id:t.id}},[t._t(\"default\")],2)},staticRenderFns:[],props:{id:{type:String,default:null}}},inputGroupButton={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"input-group-btn\"},[t._t(\"default\")],2)},staticRenderFns:[],props:{}},card={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",class:[\"card\",t.cardVariant,t.cardAlign,t.cardInverse]},[t._t(\"img\",[t.img?n(\"img\",{staticClass:\"card-img\",attrs:{src:t.img,alt:t.imgAlt}}):t._e()]),t.header||t.showHeader?n(t.headerTag,{tag:\"component\",staticClass:\"card-header\"},[t._t(\"header\",[n(\"div\",{domProps:{innerHTML:t._s(t.header)}})])],2):t._e(),t.noBlock?[t._t(\"default\")]:n(\"div\",{class:t.blockClass},[t.title?n(\"h4\",{staticClass:\"card-title\",domProps:{innerHTML:t._s(t.title)}}):t._e(),t.subTitle?n(\"h6\",{staticClass:\"card-subtitle mb-2 text-muted\",domProps:{innerHTML:t._s(t.subTitle)}}):t._e(),t._t(\"default\")],2),t.footer||t.showFooter?n(t.footerTag,{tag:\"component\",staticClass:\"card-footer\"},[t._t(\"footer\",[n(\"div\",{domProps:{innerHTML:t._s(t.footer)}})])],2):t._e()],2)},staticRenderFns:[],computed:{blockClass:function(){return[\"card-block\",this.overlay?\"card-img-overlay\":null]},cardVariant:function(){return this.variant?\"card-\"+this.variant:null},cardInverse:function(){return this.overlay||this.inverse?\"card-inverse\":null===this.inverse&&this.variant&&this.variant.length>0&&this.variant.indexOf(\"outline\")===-1?\"card-inverse\":void 0},cardAlign:function(){return this.align?\"text-\"+this.align:null}},props:{align:{type:String,default:null},inverse:{type:Boolean,default:null},variant:{type:String,default:null},tag:{type:String,default:\"div\"},header:{type:String,default:null},showHeader:{type:Boolean,default:!1},headerTag:{type:String,default:\"div\"},footer:{type:String,default:null},showFooter:{type:Boolean,default:!1},footerTag:{type:String,default:\"div\"},title:{type:String,default:null},subTitle:{type:String,default:null},noBlock:{type:Boolean,default:!1},img:{type:String,default:null},imgAlt:{type:String,default:null},overlay:{type:Boolean,default:!1}}},cardGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",class:[\"card-\"+t.type]},[t._t(\"default\")],2)},staticRenderFns:[],computed:{type:function(){return this.deck?\"deck\":this.columns?\"columns\":\"group\"}},props:{tag:{type:String,default:\"div\"},deck:{type:Boolean,default:!1},columns:{type:Boolean,default:!1}}},DIRECTION={next:{current:\"carousel-item-left\",next:\"carousel-item-right\",overlay:\"carousel-item-next\"},prev:{current:\"carousel-item-right\",next:\"carousel-item-left\",overlay:\"carousel-item-prev\"}},carousel={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"carousel slide\",style:{background:t.background,height:t.height},attrs:{role:\"region\",id:t.id||null,\"aria-busy\":t.isSliding?\"true\":\"false\"},on:{mouseenter:t.pause,mouseleave:t.start,focusin:t.pause,focusout:function(e){t.restart(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:void t.prev(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:void t.next(e):null}]}},[n(\"ol\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.indicators,expression:\"indicators\"}],staticClass:\"carousel-indicators\",attrs:{role:\"group\",\"aria-hidden\":t.indicators?\"false\":\"true\",\"aria-label\":t.indicators&&t.labelIndicators?t.labelIndicators:null,\"aria-owns\":t.indictors&&t.id?t.id+\"__BV_inner_\":null,\"aria-activedescendant\":t.slides[t.index].id||null,tabindex:t.indicators?\"0\":\"-1\"},on:{focusin:function(e){return e.target!==e.currentTarget?null:void t.focusActiveIndicator(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:(e.stopPropagation(),e.preventDefault(),void t.focusPrevIndicator(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?(e.stopPropagation(),e.preventDefault(),void t.focusPrevIndicator(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:(e.stopPropagation(),e.preventDefault(),void t.focusNextIndicator(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?(e.stopPropagation(),e.preventDefault(),void t.focusNextIndicator(e)):null}]}},t._l(t.slides.length,function(e){return n(\"li\",{ref:\"indcators\",refInFor:!0,class:{active:e-1===t.index},attrs:{role:\"button\",tabindex:\"-1\",id:t.id?t.id+\"__BV_indicator_\"+e+\"_\":null,\"aria-current\":e-1===t.index?\"true\":\"false\",\"aria-posinset\":e,\"aria-setsize\":t.slides.length,\"aria-label\":t.labelGotoSlide+\" \"+e,\"aria-describedby\":t.slides[e-1].id||null,\"aria-controls\":t.id?t.id+\"__BV_inner_\":null},on:{click:function(n){t.index=e-1},keydown:[function(n){return\"button\"in n||!t._k(n.keyCode,\"enter\",13)?(n.stopPropagation(),n.preventDefault(),void(t.index=e-1)):null},function(n){return\"button\"in n||!t._k(n.keyCode,\"space\",32)?(n.stopPropagation(),n.preventDefault(),void(t.index=e-1)):null}]}})})),n(\"div\",{staticClass:\"carousel-inner\",attrs:{role:\"list\",id:t.id?t.id+\"__BV_inner_\":null}},[t._t(\"default\")],2),t.controls?[n(\"a\",{staticClass:\"carousel-control-prev\",attrs:{href:\"#\",role:\"button\",\"data-slide\":\"prev\",\"aria-controls\":t.id?t.id+\"__BV_inner_\":null},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.prev(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.prev(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.prev(e)):null}]}},[n(\"span\",{staticClass:\"carousel-control-prev-icon\",attrs:{\"aria-hidden\":\"true\"}}),t._v(\" \"),n(\"span\",{staticClass:\"sr-only\"},[t._v(t._s(t.labelPrev))])]),n(\"a\",{staticClass:\"carousel-control-next\",attrs:{href:\"#\",role:\"button\",\"data-slide\":\"next\",\"aria-controls\":t.id?t.id+\"__BV_inner_\":null},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.next(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.next(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.next(e)):null}]}},[n(\"span\",{staticClass:\"carousel-control-next-icon\",attrs:{\"aria-hidden\":\"true\"}}),t._v(\" \"),n(\"span\",{staticClass:\"sr-only\"},[t._v(t._s(t.labelNext))])])]:t._e()],2)},staticRenderFns:[],data:function(){return{index:0,isSliding:!1,slides:[]}},props:{id:{type:String},labelPrev:{type:String,default:\"Previous Slide\"},labelNext:{type:String,default:\"Next Slide\"},labelGotoSlide:{type:String,default:\"Goto Slide\"},labelIndicators:{type:String,default:\"Select a slide to display\"},interval:{type:Number,default:5e3},indicators:{type:Boolean,default:!1},controls:{type:Boolean,default:!1},height:{type:String},background:{type:String}},methods:{prev:function(){this.index<=0?this.index=this.slides.length-1:this.index--},next:function(){this.index>=this.slides.length-1?this.index=0:this.index++},pause:function(){0!==this.interval&&\"undefined\"!=typeof this.interval&&(clearInterval(this._intervalId),this._intervalId=null,this.slides[this.index].tabIndex=0)},start:function(){var t=this;0!==this.interval&&\"undefined\"!=typeof this.interval&&(this.slides.forEach(function(t){t.tabIndex=-1}),this._intervalId=setInterval(function(){t.next()},this.interval))},restart:function(t){t.relatedTarget&&this.$el.contains(t.relatedTarget)||this.start()},focusActiveIndicator:function(){var t=this;this.indicators&this.$refs.indicators.length>0&&this.$nextTick(function(){t.$refs.indicators[t.index].focus()})},focusPrevIndicator:function(){var t=this;if(this.indicators&this.$refs.indicators.length>0){var e=this.$refs.indicators.indexOf(function(t){return Boolean(t===document.activeElement)});e>0&&this.$nextTick(function(){t.$refs.indicators[e-1].focus()})}},focusNextIndicator:function(){var t=this;if(this.indicators&this.$refs.indicators.length>0){var e=this.$refs.indicators.indexOf(function(t){return Boolean(t===document.activeElement)});e>0&&e<this.$refs.indicators-1&&this.$nextTick(function(){t.$refs.indicators[e+1].focus()})}}},mounted:function(){var t=this;this.slides=this.$el.querySelectorAll(\".carousel-item\"),this.slides[0].classList.add(\"active\"),this.slides.forEach(function(e,n){var i=n+1;e.setAttribute(\"aria-current\",0===n?\"true\":\"false\"),e.setAttribute(\"aria-posinset\",String(i)),e.setAttribute(\"aria-setsize\",String(t.slides.length)),e.tabIndex=-1,t.id&&e.setAttribute(\"aria-controlledby\",t.id+\"__BV_indicator_\"+i+\"_\")}),this._intervalId=null,this.start()},watch:{index:function(t,e){var n=this;if(t!==e){if(this.isSliding)return void(this.index=e);var i=t>e?DIRECTION.next:DIRECTION.prev;0===e&&t===this.slides.length-1?i=DIRECTION.prev:e===this.slides.length-1&&0===t&&(i=DIRECTION.next);var o=this.slides[e],s=this.slides[t];o&&s&&(this.isSliding=!0,s.classList.add(i.next,i.overlay),o.classList.add(i.current),this._carouselAnimation=setTimeout(function(){n.isSliding=!1,n.$emit(\"slide\",t),o.classList.remove(\"active\"),o.setAttribute(\"aria-current\",\"false\"),o.setAttribute(\"aria-hidden\",\"true\"),o.tabIndex=-1,s.classList.add(\"active\"),s.setAttribute(\"aria-current\",\"true\"),o.setAttribute(\"aria-hidden\",\"false\"),o.tabIndex=-1,n._intervalId||(o.tabIndex=0,n.$nextTick(function(){o.focus()})),o.classList.remove(i.current),s.classList.remove(i.next,i.overlay)},500))}}},destroyed:function(){clearTimeout(this._carouselAnimation),clearInterval(this._intervalId)}},carouselSlide={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"carousel-item\",style:{background:t.background,height:t.height},attrs:{role:\"listitem\",id:t.id||null}},[t.img?n(\"img\",{staticClass:\"d-block img-fluid\",attrs:{src:t.img,alt:t.imgAlt}}):t._e(),n(\"div\",{class:t.contentClasses},[t.caption?n(\"h3\",{domProps:{innerHTML:t._s(t.caption)}}):t._e(),t.text?n(\"p\",{domProps:{innerHTML:t._s(t.text)}}):t._e(),t._t(\"default\")],2)])},staticRenderFns:[],props:{id:{type:String},img:{type:String},imgAlt:{type:String},contentVisibleUp:{type:String},caption:{type:String},text:{type:String},background:{type:String},height:{type:String}},computed:{contentClasses:function(){var t={\"carousel-caption\":Boolean(this.caption)};return this.contentVisibleUp&&(t[\"d-none\"]=!0,t[\"d-\"+this.contentVisibleUp+\"-block\"]=!0),t}}},collapse={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"transition\",{attrs:{name:\"collapse\"},on:{enter:t.enter,\"after-enter\":t.clearHeight,leave:t.leave,\"after-leave\":t.clearHeight}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.show,expression:\"show\"}],class:t.classObject,attrs:{\"aria-expanded\":t.show?\"true\":\"false\"}},[t._t(\"default\")],2)])},staticRenderFns:[],data:function(){return{show:!1}},computed:{classObject:function(){return{\"navbar-collapse\":this.isNav,show:this.show}}},props:{isNav:{type:Boolean,default:!1},id:{type:String,required:!0}},methods:{toggle:function(){this.show=!this.show,this.emitState()},enter:function(t){t.style.height=\"auto\";var e=getComputedStyle(t).height;t.style.height=\"0px\",t.offsetHeight,t.style.height=e},leave:function(t){t.style.height=\"auto\";var e=getComputedStyle(t).height;t.style.height=e,t.offsetHeight,t.style.height=\"0px\"},clearHeight:function(t){t.style.height=null},emitState:function(){this.$root.$emit(\"collapse::toggle::state\",this.id,this.state)}},created:function(){var t=this;this.$root.$on(\"collapse::toggle\",function(e){e===t.id&&t.toggle()})},mounted:function(){this.emitState()}},dropdown$1={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"dropdown\",\"btn-group\",{dropup:t.dropup,show:t.visible}],attrs:{id:t.id||null}},[n(\"b-button\",{ref:\"button\",class:{\"dropdown-toggle\":!t.split,\"btn-link\":t.link},attrs:{id:t.id?t.id+\"__BV_button_\":null,\"aria-haspopup\":t.split?null:\"true\",\"aria-expanded\":t.split?null:t.visible?\"true\":\"false\",variant:t.variant,size:t.size,disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.click(e)}}},[t._t(\"text\",[t._v(t._s(t.text))])],2),t.split?n(\"b-button\",{ref:\"toggle\",class:[\"dropdown-toggle\",\"dropdown-toggle-split\",{\"btn-link\":t.link}],attrs:{id:t.id?t.id+\"__BV_toggle_\":null,\"aria-haspopup\":t.split?\"true\":null,\"aria-expanded\":t.split?t.visible?\"true\":\"false\":null,variant:t.variant,size:t.size,disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.toggle(e)}}},[n(\"span\",{staticClass:\"sr-only\"},[t._v(t._s(t.toggleText))])]):t._e(),n(\"div\",{ref:\"menu\",class:[\"dropdown-menu\",{\"dropdown-menu-right\":t.right}],attrs:{role:\"menu\",\"aria-labelledby\":t.id?t.id+(t.split?\"__BV_toggle_\":\"__BV_button_\"):null},on:{keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"tab\",9)?void t.onTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null}]}},[t._t(\"default\")],2)],1)},staticRenderFns:[],mixins:[clickOut,dropdown],components:{bButton:bBtn},data:function(){return{visible:!1}},props:{id:{type:String},toggleText:{type:String,default:\"Toggle Dropdown\"},size:{type:String,default:null},variant:{type:String,default:null},link:{type:Boolean,default:!1}},methods:{clickOutListener:function(){this.visible=!1},click:function(t){return this.disabled?void(this.visible=!1):void(this.split?(this.$emit(\"click\",t),this.$root.$emit(\"shown::dropdown\",this)):this.toggle())}}},dropdownItem={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"b-link\",{staticClass:\"dropdown-item\",attrs:{active:t.active,disabled:t.disabled,href:t.href,to:t.to,tag:t.tag,exact:t.exact,append:t.append,replace:t.replace,\"active-class\":t.activeClass,\"exact-active-class\":t.exactActiveClass,event:t.event},on:{click:function(e){t.$emit(\"click\")}}},[t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},mixins:[linkMixin]},dropdownDivider={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"dropdown-divider\",attrs:{role:\"separator\"}})},staticRenderFns:[],props:{}},dropdownHeader={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",staticClass:\"dropdown-header\",attrs:{tabindex:\"-1\"}},[t._t(\"default\")],2)},staticRenderFns:[],props:{tag:{type:String,default:\"h6\"}}},dropdownSelect={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"dropdown-select\",class:{open:t.show,dropdown:!t.dropup,dropup:t.dropup}},[n(\"button\",{class:[\"btn\",\"dropdown\",t.dropdownToggle,t.btnVariant,t.btnSize],attrs:{id:t.id,role:\"button\",\"aria-haspopup\":\"true\",\"aria-expanded\":\"show\",disabled:t.disabled},on:{click:function(e){e.preventDefault(),t.toggle(e)}}},[n(\"span\",{staticClass:\"checked-items\",domProps:{innerHTML:t._s(t.displayItem)}})]),n(\"ul\",{staticClass:\"dropdown-menu\",class:{\"dropdown-menu-right\":\"right\"==t.position},attrs:{\"aria-labelledby\":\"dLabel\"}},t._l(t.list,function(e){return n(\"li\",[n(\"button\",{staticClass:\"dropdown-item\",attrs:{click:t.select(e)}},[t._v(t._s(e.text))])])}))])},staticRenderFns:[],data:function(){return{show:!1,selected:!1}},computed:{btnVariant:function(){return this.variant&&\"default\"!==this.variant?\"btn-\"+this.variant:\"btn-secondary\"},btnSize:function(){return this.size&&\"default\"!==this.size?\"btn-\"+this.size:\"\"},dropdownToggle:function(){return this.caret?\"dropdown-toggle\":\"\"},displayItem:function(){if(this.returnObject&&this.model&&!this.model.text||!this.returnObject&&this.model&&0===this.model.length||this.forceDefault)return this.defaultText;if(this.returnObject&&this.model&&this.model.text)return this.model.text;if(!this.returnObject&&this.model){var t=this.model||\"\";return this.list.forEach(function(e){e.value===this.model&&(t=e.text)}),t}return\"\"}},props:{id:{type:String},model:{required:!1},list:{type:Array,default:[],required:!0},caret:{type:Boolean,default:!0},position:{type:String,default:\"left\"},size:{type:String,default:\"\"},variant:{type:String,default:\"default\"},defaultText:{type:String,default:\"Plase select one\"},forceDefault:{type:Boolean,default:!1},returnObject:{type:Boolean,default:!1},dropup:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},methods:{toggle:function(t){this.show=!this.show,this.show?(this.$root.$emit(\"shown:dropdown\",this.id),t.stopPropagation()):this.$root.$emit(\"hidden::dropdown\",this.id)},select:function(t){this.returnObject?this.model=t:this.model=t.value,this.show=!1,this.$root.$emit(\"selected::dropdown\",this.id,this.model)}},created:function(){var t=this.$root;t.$on(\"hide::dropdown\",function(){this.show=!1})}},form={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"form\",{class:t.classObject},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[this.inline?\"form-inline\":\"\"]}},props:{inline:{type:Boolean,default:!1}}},formFieldset={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"form-group\",\"row\",t.inputState],attrs:{role:\"group\",\"aria-describedby\":t.describedBy}},[t.label?n(\"label\",{class:[t.labelSrOnly?\"sr-only\":\"col-form-label\",t.labelLayout,t.labelAlignClass],\nattrs:{for:t.target,id:t.labelId},domProps:{innerHTML:t._s(t.label)}}):t._e(),n(\"div\",{ref:\"content\",class:t.inputLayout},[t._t(\"default\"),t.feedback?n(\"div\",{staticClass:\"form-text form-control-feedback\",attrs:{id:t.feedbackId,role:\"alert\",\"aria-live\":\"assertive\",\"aria-atomic\":\"true\"},domProps:{innerHTML:t._s(t.feedback)}}):t._e(),t.description?n(\"small\",{staticClass:\"form-text text-muted\",attrs:{id:t.descriptionId},domProps:{innerHTML:t._s(t.description)}}):t._e()],2)])},staticRenderFns:[],data:function(){return{target:null}},computed:{labelId:function(){return this.id&&this.label?this.id+\"__BV_label_\":null},descriptionId:function(){return this.id&&this.description?this.id+\"__BV_description_\":null},feedbackId:function(){return this.id&&this.feedback?this.id+\"__BV_feedback_\":null},describedBy:function(){return this.id&&(this.label||this.feedback||this.description)?[this.labelId,this.descriptionId,this.feedbackId].filter(function(t){return t}).join(\" \"):null},inputState:function(){return this.state?\"has-\"+this.state:\"\"},labelLayout:function(){return this.labelSrOnly?null:this.horizontal?\"col-sm-\"+this.labelSize:\"col-12\"},labelAlignClass:function(){return this.labelSrOnly?null:this.labelTextAlign?\"text-\"+this.labelTextAlign:null},inputLayout:function(){return this.horizontal?\"col-sm-\"+(12-this.labelSize):\"col-12\"}},methods:{updateTarget:function(){var t=this.$refs.content;if(!t)return null;var e=t.querySelector(this.inputSelector);this.target=e&&e.id?e.id:null}},mounted:function(){this.updateTarget()},updated:function(){this.updateTarget()},props:{id:{type:String,default:null},state:{type:String,default:null},horizontal:{type:Boolean,default:!1},labelSize:{type:Number,default:3},labelTextAlign:{type:String,default:null},label:{type:String,default:null},labelSrOnly:{type:Boolean,default:!1},description:{type:String,default:null},feedback:{type:String,default:null},inputSelector:{type:String,default:\"input,select,textarea,.form-control,.form-control-static,.dropdown,.dropup\"}}},formMixin={computed:{inputClass:function(){return[this.size?\"form-control-\"+this.size:null,this.state?\"form-control-\"+this.state:null]},custom:function(){return!this.plain}},props:{name:{type:String},disabled:{type:Boolean},plain:{type:Boolean,default:!1},state:{type:String},size:{type:String},id:{type:String}}},formCheckBoxMixin={computed:{checkboxClass:function(){return{\"custom-control\":this.custom,\"form-check-inline\":this.inline}}}},inBrowser=\"undefined\"!=typeof window,UNSAFE_UID=inBrowser&&window.UNSAFE_UID===!0||!inBrowser&&process.env.UNSAFE_UID===!0,generateId={computed:{_id:function(){return!UNSAFE_UID||this.id?this.id:\"__b_\"+this._uid+\"__\"}}},formCheckbox={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"label\",{class:[t.inputClass,t.checkboxClass,t.custom?\"custom-checkbox\":null]},[n(\"input\",{class:[t.custom?\"custom-control-input\":null],attrs:{type:\"checkbox\",id:t._id,name:t.name,disabled:t.disabled},domProps:{value:t.value,checked:t.checked===t.value},on:{change:function(e){t.$emit(\"change\",e.target.checked?t.value:t.uncheckedValue)}}}),t._v(\" \"),t.custom?n(\"span\",{staticClass:\"custom-control-indicator\"}):t._e(),t._v(\" \"),n(\"span\",{class:[t.custom?\"custom-control-description\":null]},[t._t(\"default\")],2)])},staticRenderFns:[],mixins:[formMixin,formCheckBoxMixin,generateId],model:{prop:\"checked\",event:\"change\"},props:{value:{default:!0},uncheckedValue:{default:!1},checked:{default:!0}}},formOptions={computed:{formOptions:function(){var t=this,e=this.options||{};return e=Array.isArray(e)?e.map(function(e){return\"object\"==typeof e?{value:e[t.valueField],text:e[t.textField],disabled:e.disabled||!1}:{text:String(e),value:e||{}}}):Object.keys(e).map(function(n){var i=e[n]||{};return\"object\"!=typeof i&&(i={text:String(i)}),i.value=i[t.valueField]||n,i})},selectedValue:function(){for(var t=this,e=this.formOptions,n=0;n<e.length;n++)if(e[n].value===t.localValue)return t.returnObject?e[n]:e[n].value}},props:{valueField:{type:[String],default:\"value\"},textField:{type:[String],default:\"text\"}},watch:{localValue:function(t,e){t!==e&&this.$emit(\"input\",this.selectedValue)},value:function(t,e){t!==e&&(this.localValue=t)}}},formRadio={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[t.inputClass,this.stacked?\"custom-controls-stacked\":\"\"]},t._l(t.formOptions,function(e){return n(\"label\",{class:[t.checkboxClass,t.custom?\"custom-radio\":null]},[n(\"input\",{directives:[{name:\"model\",rawName:\"v-model\",value:t.localValue,expression:\"localValue\"}],ref:\"inputs\",refInFor:!0,class:t.custom?\"custom-control-input\":null,attrs:{type:\"radio\",name:e.name,id:e.id,disabled:e.disabled},domProps:{value:e.value,checked:t._q(t.localValue,e.value)},on:{__c:function(n){t.localValue=e.value}}}),t._v(\" \"),t.custom?n(\"span\",{staticClass:\"custom-control-indicator\"}):t._e(),t._v(\" \"),n(\"span\",{class:t.custom?\"custom-control-description\":null,domProps:{innerHTML:t._s(e.text)}})])}))},staticRenderFns:[],mixins:[formMixin,formCheckBoxMixin,formOptions],data:function(){return{localValue:this.value}},computed:{inputState:function(){return this.state?\"has-\"+this.state:\"\"}},props:{value:{},options:{type:[Array,Object],default:null,required:!0},stacked:{type:Boolean,default:!1},returnObject:{type:Boolean,default:!1}}},bFormInputStatic={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"p\",{class:[\"form-control-static\",t.inputClass],attrs:{id:t._id},domProps:{innerHTML:t._s(t.staticValue)}},[t._t(\"default\")],2)},staticRenderFns:[],mixins:[formMixin,generateId],computed:{staticValue:function(){return this.formatter?this.formatter(this.value):this.value}},props:{value:{default:null},formatter:{type:Function}}},formInput={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.static?n(\"b-form-input-static\",{attrs:{id:t._id,value:t.value,formatter:t.formatter}}):n(t.textarea?\"textarea\":\"input\",{ref:\"input\",tag:\"input\",class:[\"form-control\",t.inputClass],attrs:{type:t.type,name:t.name,id:t._id,disabled:t.disabled,rows:t.rows||t.rowsCount,placeholder:t.placeholder},domProps:{value:t.value},on:{input:function(e){t.onInput(e.target.value)},change:function(e){t.onChange(e.target.value)},keyup:function(e){t.onKeyUp(e)},focus:function(e){t.$emit(\"focus\")},blur:function(e){t.$emit(\"blur\")}}})},staticRenderFns:[],mixins:[formMixin,generateId],components:{bFormInputStatic:bFormInputStatic},computed:{rowsCount:function(){return(this.value||\"\").toString().split(\"\\n\").length}},methods:{format:function(t){if(this.formatter){var e=this.formatter(t);e!==t&&(t=e,this.$refs.input.value=e)}return t},onInput:function(t){this.lazyFormatter||(t=this.format(t)),this.$emit(\"input\",t)},onChange:function(t){t=this.format(t),this.$emit(\"input\",t),this.$emit(\"change\",t)},onKeyUp:function(t){this.$emit(\"keyup\",t)}},props:{value:{default:null},type:{type:String,default:\"text\"},static:{type:Boolean,default:!1},placeholder:{type:String,default:null},rows:{type:Number,default:null},textarea:{type:Boolean,default:!1},formatter:{type:Function},lazyFormatter:{type:Boolean,default:!1}}},formFile={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"label\",{class:[t.custom?\"custom-file\":null,t.inputClass],on:{dragover:function(e){e.stopPropagation(),e.preventDefault(),t.dragover(e)}}},[t.dragging?n(\"span\",{staticClass:\"drop-here\",attrs:{\"data-drop\":t.dropLabel},on:{dragover:function(e){e.stopPropagation(),e.preventDefault(),t.dragover(e)},drop:function(e){e.stopPropagation(),e.preventDefault(),t.drop(e)},dragleave:function(e){e.stopPropagation(),e.preventDefault(),t.dragging=!1}}}):t._e(),n(\"input\",{ref:\"input\",staticClass:\"custom-file-input\",attrs:{type:\"file\",name:t.name,id:t._id,disabled:t.disabled,accept:t.accept,multiple:t.multiple,webkitdirectory:t.directory},on:{change:t.onFileChange}}),t._v(\" \"),t.custom?n(\"span\",{class:[\"custom-file-control\",t.dragging?\"dragging\":null,t.inputClass],attrs:{\"data-choose\":t.computedChooseLabel,\"data-selected\":t.selectedLabel}}):t._e()])},staticRenderFns:[],mixins:[formMixin,generateId],data:function(){return{selectedFile:null,dragging:!1}},computed:{selectedLabel:function(){return this.selectedFile&&0!==this.selectedFile.length?this.multiple?1===this.selectedFile.length?this.selectedFile[0].name:this.selectedFormat.replace(\":names\",this.selectedFile.map(function(t){return t.name}).join(\",\")).replace(\":count\",this.selectedFile.length):this.selectedFile.name:this.placeholder||\"No file chosen\"},computedChooseLabel:function(){return this.chooseLabel||(this.multiple?\"Choose Files\":\"Choose File\")}},watch:{selectedFile:function(t,e){t!==e&&(!t&&this.multiple?this.$emit(\"input\",[]):this.$emit(\"input\",t))}},methods:{onFileChange:function(t){var e=this;this.$emit(\"change\",t);var n=t.dataTransfer&&t.dataTransfer.items;if(n&&!this.noTraverse){for(var i=[],o=0;o<n.length;o++){var s=n[o].webkitGetAsEntry();s&&i.push(e.traverseFileTree(s))}return void Promise.all(i).then(function(t){e.setFiles(Array.prototype.concat.apply([],t))})}this.setFiles(t.target.files||t.dataTransfer.files)},setFiles:function(t){var e=this;if(!t)return void(this.selectedFile=null);if(!this.multiple)return void(this.selectedFile=t[0]);for(var n=[],i=0;i<t.length;i++)t[i].type.match(e.accept)&&n.push(t[i]);this.selectedFile=n},dragover:function(t){this.noDrop||(this.dragging=!0,t.dataTransfer.dropEffect=\"copy\")},drop:function(t){this.noDrop||(this.dragging=!1,t.dataTransfer.files&&t.dataTransfer.files.length>0&&this.onFileChange(t))},traverseFileTree:function(t,e){var n=this;return new Promise(function(i){e=e||\"\",t.isFile?t.file(function(t){t.$path=e,i(t)}):t.isDirectory&&t.createReader().readEntries(function(o){for(var s=[],r=0;r<o.length;r++)s.push(n.traverseFileTree(o[r],e+t.name+\"/\"));Promise.all(s).then(function(t){i(Array.prototype.concat.apply([],t))})})})}},props:{accept:{type:String,default:\"\"},placeholder:{type:String,default:null},chooseLabel:{type:String,default:null},multiple:{type:Boolean,default:!1},directory:{type:Boolean,default:!1},noTraverse:{type:Boolean,default:!1},selectedFormat:{type:String,default:\":count Files\"},noDrop:{type:Boolean,default:!1},dropLabel:{type:String,default:\"Drop files here\"}}},formSelect={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"select\",{directives:[{name:\"model\",rawName:\"v-model\",value:t.localValue,expression:\"localValue\"}],ref:\"input\",class:[t.inputClass,t.custom?\"custom-select\":null],attrs:{name:t.name,id:t._id,disabled:t.disabled},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){var e=\"_value\"in t?t._value:t.value;return e});t.localValue=e.target.multiple?n:n[0]}}},t._l(t.formOptions,function(e){return n(\"option\",{attrs:{disabled:e.disabled},domProps:{value:e.value,innerHTML:t._s(e.text)}})}))},staticRenderFns:[],mixins:[formMixin,formOptions,generateId],data:function(){return{localValue:this.value}},props:{value:{},options:{type:[Array,Object],required:!0},returnObject:{type:Boolean,default:!1}}},jumbotron={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"jumbotron\",t.fluid?\"jumbotron-fluid\":null]},[n(\"div\",{class:t.containerFluid?\"container-fluid\":\"container\"},[t.header?n(\"h1\",{staticClass:\"display-3\",domProps:{innerHTML:t._s(t.header)}}):t._e(),t.lead?n(\"p\",{staticClass:\"lead\",domProps:{innerHTML:t._s(t.lead)}}):t._e(),t._t(\"default\")],2)])},staticRenderFns:[],computed:{},props:{fluid:{type:Boolean,default:!1},containerFluid:{type:Boolean,default:!1},header:{type:String,default:null},lead:{type:String,default:null}}},badge={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"span\",{class:[\"badge\",t.badgeVariant,t.badgePill]},[t._t(\"default\")],2)},staticRenderFns:[],computed:{badgeVariant:function(){return this.variant&&\"default\"!==this.variant?\"badge-\"+this.variant:\"badge-default\"},badgePill:function(){return this.pill?\"badge-pill\":\"\"}},props:{variant:{type:String,default:\"default\"},pill:{type:Boolean,default:!1}}},listGroup={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",class:[\"list-group\",t.flush?\"list-group-flush\":null]},[t._t(\"default\")],2)},staticRenderFns:[],props:{tag:{type:String,default:\"div\"},flush:{type:Boolean,default:!1}}},actionTags=[\"a\",\"router-link\",\"button\",\"b-link\"],listGroupItem={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.myTag,{ref:\"item\",tag:\"component\",class:t.classObject,attrs:{to:t.to,href:t.href}},[t._t(\"default\")],2)},staticRenderFns:[],components:{bLink:bLink},computed:{classObject:function(){return[\"list-group-item\",this.listState,this.active?\"active\":null,this.disabled?\"disabled\":null,this.isAction?\"list-group-item-action\":null]},isAction:function(){return this.action!==!1&&(this.action||this.to||this.href||actionTags.indexOf(this.tag)!==-1)},listState:function(){return this.variant?\"list-group-item-\"+this.variant:null},myTag:function(){return this.tag?this.tag:this.to||this.href?\"b-link\":\"div\"}},props:{tag:{type:String,default:null},active:{type:Boolean,default:!1},action:{type:Boolean,default:null},disabled:{type:Boolean,default:!1},variant:{type:String,default:null},to:{type:String,default:null},href:{type:String,default:null}}},media={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"media\"},[t.rightAlign?t._e():n(\"div\",{class:[\"d-flex\",\"mr-3\",t.verticalAlignClass]},[t._t(\"aside\")],2),n(\"div\",{staticClass:\"media-body\"},[t._t(\"default\")],2),t.rightAlign?n(\"div\",{class:[\"d-flex\",\"ml-3\",t.verticalAlignClass]},[t._t(\"aside\")],2):t._e()])},staticRenderFns:[],computed:{verticalAlignClass:function(){return\"align-self-\"+this.verticalAlign}},props:{rightAlign:{type:Boolean,default:!1},verticalAlign:{type:String,default:\"top\"}}},FOCUS_SELECTOR=['button:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','input:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','select:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','textarea:not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])','a:not([disabled]):not(.disabled):not([style*=\"display: none\"]):not([style*=\"display:none\"])','[tabindex]:not([disabled]):not(.disabled):not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),modal={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[n(\"transition-group\",{attrs:{\"enter-class\":\"hidden\",\"enter-to-class\":\"\",\"enter-active-class\":\"\",\"leave-class\":\"show\",\"leave-active-class\":\"\",\"leave-to-class\":\"hidden\"},on:{\"after-enter\":t.focusFirst}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.is_visible,expression:\"is_visible\"}],key:\"modal\",class:[\"modal\",{fade:t.fade,show:t.is_visible}],attrs:{id:t.id,role:\"dialog\"},on:{click:function(e){t.onClickOut(e)},keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null}}},[n(\"div\",{class:[\"modal-dialog\",\"modal-\"+t.size]},[n(\"div\",{ref:\"content\",staticClass:\"modal-content\",attrs:{tabindex:\"-1\",role:\"document\",\"aria-labelledby\":t.hideHeader||!t.id?null:t.id+\"_modal_title\",\"aria-describedby\":t.id?t.id+\"_modal_body\":null},on:{click:function(t){t.stopPropagation()}}},[t.hideHeader?t._e():n(\"header\",{ref:\"header\",staticClass:\"modal-header\"},[t._t(\"modal-header\",[n(\"h5\",{staticClass:\"modal-title\",attrs:{id:t.id?t.id+\"_modal_title\":null}},[t._t(\"modal-title\",[t._v(t._s(t.title))])],2),t.hideHeaderClose?t._e():n(\"button\",{staticClass:\"close\",attrs:{type:\"button\",\"aria-label\":t.closeTitle},on:{click:t.hide}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"×\")])])])],2),n(\"div\",{ref:\"body\",staticClass:\"modal-body\",attrs:{id:t.id?t.id+\"_modal_body\":null}},[t._t(\"default\")],2),t.hideFooter?t._e():n(\"footer\",{ref:\"footer\",staticClass:\"modal-footer\"},[t._t(\"modal-footer\",[t.okOnly?t._e():n(\"b-btn\",{attrs:{variant:\"secondary\"},on:{click:function(e){t.hide(!1)}}},[t._v(t._s(t.closeTitle))]),n(\"b-btn\",{attrs:{variant:\"primary\"},on:{click:function(e){t.hide(!0)}}},[t._v(t._s(t.okTitle))])])],2)])])]),t.is_visible?n(\"div\",{key:\"modal-backdrop\",class:[\"modal-backdrop\",{fade:t.fade,show:t.is_visible}]}):t._e()])],1)},staticRenderFns:[],components:{bBtn:bBtn},data:function(){return{is_visible:!1,return_focus:this.returnFocus||null}},model:{prop:\"visible\",event:\"change\"},computed:{body:function(){if(\"undefined\"!=typeof document)return document.querySelector(\"body\")}},watch:{visible:function(t,e){t!==e&&(t?this.show():this.hide())}},props:{id:{type:String,default:null},title:{type:String,default:\"\"},size:{type:String,default:\"md\"},fade:{type:Boolean,default:!0},closeTitle:{type:String,default:\"Close\"},okTitle:{type:String,default:\"OK\"},closeOnBackdrop:{type:Boolean,default:!0},closeOnEsc:{type:Boolean,default:!0},hideHeader:{type:Boolean,default:!1},hideFooter:{type:Boolean,default:!1},okOnly:{type:Boolean,default:!1},hideHeaderClose:{type:Boolean,default:!1},returnFocus:{default:null}},methods:{show:function(){this.is_visible||(this.is_visible=!0,this.$root.$emit(\"shown::modal\",this.id),this.body.classList.add(\"modal-open\"),this.$emit(\"shown\"),this.$emit(\"change\",!0),\"undefined\"!=typeof document&&(document.removeEventListener(\"focusin\",this.enforceFocus,!1),document.addEventListener(\"focusin\",this.enforceFocus,!1)))},hide:function(t){if(this.is_visible){var e=!1,n={isOK:t,cancel:function(){e=!0}};this.$emit(\"change\",!1),this.$emit(\"hidden\",n),t===!0?this.$emit(\"ok\",n):t===!1&&this.$emit(\"cancel\",n),e||(\"undefined\"!=typeof document&&(document.removeEventListener(\"focusin\",this.enforceFocus,!1),this.returnFocusTo()),this.is_visible=!1,this.$root.$emit(\"hidden::modal\",this.id),this.body.classList.remove(\"modal-open\"))}},onClickOut:function(){this.closeOnBackdrop&&this.hide()},onEsc:function(){this.is_visible&&this.closeOnEsc&&this.hide()},focusFirst:function(){if(!document.activeElement||!this.$refs.content.contains(document.activeElement)){var t;this.$refs.footer&&(t=this.$refs.footer.querySelector(FOCUS_SELECTOR)),!t&&this.$refs.body&&(t=this.$refs.body.querySelector(FOCUS_SELECTOR)),!t&&this.$refs.header&&(t=this.$refs.header.querySelector(FOCUS_SELECTOR)),t||(t=this.$refs.content),t&&t.focus&&t.focus()}},returnFocusTo:function(){if(this.return_focus){var t=\"string\"==typeof this.return_focus?document.querySelector(this.returnFocus):this.return_focus;t&&t.$el&&\"function\"==typeof t.$el.focus?t.$el.focus():t&&\"function\"==typeof t.focus&&t.focus()}},enforceFocus:function(t){this.is_visible&&document!==t.target&&this.$refs.content&&this.$refs.content!==t.target&&!this.$refs.content.contains(t.target)&&this.$refs.content.focus()}},created:function(){var t=this;this.$root.$on(\"show::modal\",function(e,n){e===t.id&&(t.return_focus=n||t.return_focus||t.returnFocus||null,t.show())}),this.$root.$on(\"hide::modal\",function(e){e===t.id&&t.hide()})},mounted:function(){this.visible===!0&&this.show()},destroyed:function(){\"undefined\"!=typeof document&&document.removeEventListener(\"focusin\",this.enforceFocus,!1)}},nav={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.type,{tag:\"component\",class:t.classObject,attrs:{role:t.isNavBar?null:\"navigation\"}},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return{nav:!0,\"navbar-nav\":this.isNavBar,\"nav-tabs\":this.tabs,\"nav-pills\":this.pills,\"flex-column\":this.vertical,\"nav-fill\":this.fill}}},props:{type:{type:String,default:\"ul\"},fill:{type:Boolean,default:!1},tabs:{type:Boolean,default:!1},pills:{type:Boolean,default:!1},vertical:{type:Boolean,default:!1},isNavBar:{type:Boolean,default:!1}}},navItem={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"li\",{staticClass:\"nav-item\"},[n(\"b-link\",{staticClass:\"nav-link\",attrs:{active:t.active,disabled:t.disabled,href:t.href,to:t.to,tag:t.tag,exact:t.exact,append:t.append,replace:t.replace,\"active-class\":t.activeClass,\"exact-active-class\":t.exactActiveClass,event:t.event},on:{click:function(e){t.$emit(\"click\")}}},[t._t(\"default\")],2)],1)},staticRenderFns:[],components:{bLink:bLink},mixins:[linkMixin]},navItemDropdown={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"li\",{class:[\"nav-item\",\"dropdown\",{dropup:t.dropup,show:t.visible}]},[n(\"a\",{ref:\"button\",class:[\"nav-link\",t.dropdownToggle,{disabled:t.disabled}],attrs:{href:\"#\",id:t.id?t.id+\"__BV_button_\":null,\"aria-haspopup\":\"true\",\"aria-expanded\":t.visible?\"true\":\"false\",disabled:t.disabled},on:{click:function(e){e.stopPropagation(),e.preventDefault(),t.toggle(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.stopPropagation(),e.preventDefault(),void t.toggle(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.stopPropagation(),e.preventDefault(),void t.toggle(e)):null}]}},[t._t(\"text\",[n(\"span\",{domProps:{innerHTML:t._s(t.text)}})])],2),n(\"div\",{ref:\"menu\",class:[\"dropdown-menu\",{\"dropdown-menu-right\":t.right}],attrs:{role:\"menu\",\"aria-labelledby\":t.id?t.id+\"__BV_button_\":null},on:{keyup:function(e){return\"button\"in e||!t._k(e.keyCode,\"esc\",27)?void t.onEsc(e):null},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"tab\",9)?void t.onTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.focusNext(e,!0):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.focusNext(e,!1):null}]}},[t._t(\"default\")],2)])},staticRenderFns:[],mixins:[clickOut,dropdown],data:function(){return{visible:!1}},computed:{dropdownToggle:function(){return this.caret?\"dropdown-toggle\":\"\"}},props:{id:{type:String},caret:{type:Boolean,default:!0}},methods:{clickOutListener:function(){this.visible=!1}}},navToggle={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"button\",{class:t.classObject,attrs:{type:\"button\",\"aria-label\":t.label,\"aria-controls\":t.target.id?t.target.id:t.target,\"aria-explanded\":t.toggleState},on:{click:t.onclick}},[n(\"span\",{staticClass:\"navbar-toggler-icon\"})])},staticRenderFns:[],computed:{classObject:function(){return[\"navbar-toggler\",\"navbar-toggler-\"+this.position]}},data:function(){return{toggleState:!1}},props:{label:{type:String,default:\"Toggle navigation\"},position:{type:String,default:\"right\"},target:{required:!0}},methods:{onclick:function(){var t=this.target;t.toggle&&t.toggle(),this.$root.$emit(\"collapse::toggle\",this.target)}},created:function(){var t=this;this.$root.$on(\"collapse::toggle::state\",function(e,n){e===t.target&&(t.toggleState=n)})}},navbar={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"nav\",{class:t.classObject},[t._t(\"default\")],2)},staticRenderFns:[],computed:{classObject:function(){return[\"navbar\",this.type?\"navbar-\"+this.type:null,this.variant?\"bg-\"+this.variant:null,this.fixed?\"fixed-\"+this.fixed:null,this.sticky?\"sticky-top\":null,this.toggleable?\"navbar-toggleable-\"+this.toggleBreakpoint:null]}},props:{type:{type:String,default:\"light\"},variant:{type:String},toggleable:{type:Boolean,default:!1},toggleBreakpoint:{type:String,default:\"sm\"},fixed:{type:String},sticky:{type:String}}},bPagination={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{class:[\"btn-group\",\"pagination\",t.btnSize],attrs:{role:\"group\",tabindex:\"0\",\"aria-label\":t.ariaLabel?t.ariaLabel:null},on:{focusin:function(e){return e.target!==e.currentTarget?null:void t.focusCurrent(e)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:(e.preventDefault(),void t.focusPrev(e)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:(e.preventDefault(),void t.focusNext(e)):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"left\",37))&&e.shiftKey?\"button\"in e&&0!==e.button?null:(e.preventDefault(),void t.focusFirst(e)):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"right\",39))&&e.shiftKey?\"button\"in e&&2!==e.button?null:(e.preventDefault(),void t.focusLast(e)):null}]}},[n(\"button\",{ref:\"buttonPrev\",class:[\"btn\",\"btn-\"+t.secondaryVariant],attrs:{type:\"button\",disabled:t.isActive(1),\"aria-label\":t.labelPrev,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.isActive(1)?t._return:t.currentPage--}}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"«\")])]),t._v(\" \"),t.showPrev?n(\"button\",{ref:\"buttonFirst\",class:[\"btn\",\"btn-\"+t.secondaryVariant,t.isActive(1)?\"active\":\"\"],attrs:{type:\"button\",\"aria-label\":t.labelPage+\" 1\",\"aria-current\":t.isActive(1)?\"true\":\"false\",\"aria-setsize\":t.numberOfPages,\"aria-posinset\":1,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.currentPage=1}}},[t._v(\"1\")]):t._e(),t._v(\" \"),n(\"span\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.showPrev,expression:\"showPrev\"}],class:[\"btn\",\"btn-\"+t.secondaryVariant]},[t._v(\"...\")]),t._v(\" \"),t._l(t.pageLinks,function(e,i){return n(\"button\",{ref:\"buttonPages\",refInFor:!0,class:[\"btn\",t.btnVariant(i),t.isActive(i+t.diff)?\"active\":\"\",t.isActive(i+t.diff)?\"\":\"hidden-xs-down\"],attrs:{type:\"button\",\"aria-label\":t.labelPage+\" \"+(i+t.diff),\"aria-current\":t.isActive(i+t.diff)?\"true\":\"false\",\"aria-setsize\":t.numberOfPages,\"aria-posinset\":i+t.diff,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.currentPage=i+t.diff}}},[t._v(t._s(i+t.diff))])}),t._v(\" \"),n(\"span\",{directives:[{name:\"show\",rawName:\"v-show\",value:t.showNext,expression:\"showNext\"}],class:[\"btn\",\"btn-\"+t.secondaryVariant]},[t._v(\"...\")]),t._v(\" \"),t.showNext?n(\"button\",{ref:\"buttonLast\",class:[\"btn\",\"btn-\"+t.secondaryVariant,t.isActive(t.numberOfPages)?\"active\":\"\"],attrs:{type:\"button\",\"aria-label\":t.labelPage+\" \"+t.numberOfPages,\"aria-current\":t.isActive(t.numberOfPages)?\"true\":\"false\",\"aria-setsize\":t.numberOfPages,\"aria-posinset\":t.numberOfPages,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.currentPage=t.numberOfPages}}},[t._v(t._s(t.numberOfPages))]):t._e(),t._v(\" \"),n(\"button\",{ref:\"buttonNext\",class:[\"btn\",\"btn-\"+t.secondaryVariant],attrs:{type:\"button\",disabled:t.isActive(t.numberOfPages),\"aria-label\":t.labelNext,tabindex:\"-1\"},on:{click:function(e){e.preventDefault(),t.isActive(t.numberOfPages)?t._return:t.currentPage++}}},[n(\"span\",{attrs:{\"aria-hidden\":\"true\"}},[t._v(\"»\")])])],2)},staticRenderFns:[],data:function(){return{diff:1,showPrev:!1,showNext:!1,currentPage:this.value}},computed:{numberOfPages:function(){var t=Math.ceil(this.totalRows/this.perPage);return t<1?1:t},btnSize:function(){return this.size&&\"default\"!==this.size?\"pagination-\"+this.size:\"\"},pageLinks:function(){return this.currentPage>this.numberOfPages&&(this.currentPage=1),this.diff=1,this.showPrev=!1,this.showNext=!1,this.numberOfPages<=this.limit?this.numberOfPages:this.currentPage<=this.limit-2?(this.diff=1,this.showNext=!0,this.limit-2):this.currentPage>this.numberOfPages-this.limit+2?(this.diff=this.numberOfPages-this.limit+3,this.showPrev=!0,this.limit-2):(this.diff=this.currentPage-1,this.showPrev=this.currentPage>=this.limit,this.showNext=this.currentPage<=this.numberOfPages-this.limit+1,this.limit)}},methods:{isActive:function(t){return t===this.currentPage},btnVariant:function(t){return t+this.diff===this.currentPage?\"btn-\"+this.variant:\"btn-\"+this.secondaryVariant},getButtons:function(){var t=[this.$refs.buttonPrev];return this.showPrev&&t.push(this.$refs.buttonFirst),t=t.concat(this.$refs.buttonPages),this.showNext&&t.push(this.$refs.buttonLast),t.push(this.$refs.buttonNext),t},setBtnFocus:function(t){this.$nextTick(function(){t.focus()})},focusFirst:function(){var t=this.getButtons().find(function(t){return!t.disabled});t&&t.focus&&t!==document.activeElement&&this.setBtnFocus(t)},focusLast:function(){var t=this.getButtons().reverse().find(function(t){return!t.disabled});t&&t.focus&&t!==document.activeElement&&this.setBtnFocus(t)},focusCurrent:function(){var t=this,e=this.getButtons().find(function(e){return parseInt(e.getAttribute(\"aria-posinset\"),10)===t.currentPage});e&&e.focus?this.setBtnFocus(e):this.focusFirst()},focusPrev:function(){var t=this.getButtons(),e=t.indexOf(document.activeElement);e>0&&!t[e-1].disabled&&t[e-1].focus&&this.setBtnFocus(t[e-1])},focusNext:function(){var t=this.getButtons(),e=t.indexOf(document.activeElement),n=t.length-1;e<n&&!t[e+1].disabled&&t[e+1].focus&&this.setBtnFocus(t[e+1])},_return:function(){}},watch:{currentPage:function(t,e){t!==e&&this.$emit(\"input\",t)},value:function(t,e){t!==e&&(this.currentPage=t)}},props:{value:{type:Number,default:1},limit:{type:Number,default:3},perPage:{type:Number,default:20},totalRows:{type:Number,default:20},size:{type:String,default:\"md\"},variant:{type:String,default:\"primary\"},secondaryVariant:{type:String,default:\"secondary\"},ariaLabel:{type:String,default:\"Pagination\"},labelPrevPage:{type:String,default:\"Previous Page\"},labelNextPage:{type:String,default:\"Next Page\"},labelPage:{type:String,default:\"Page\"}}},TRIGGER_LISTENERS={click:{click:\"toggle\"},hover:{mouseenter:\"show\",mouseleave:\"hide\"},focus:{focus:\"show\",blur:\"hide\"}},PLACEMENT_PARAMS={top:\"bottom center\",bottom:\"top center\",left:\"middle right\",right:\"middle left\"},TETHER_CLASS_PREFIX=\"bs-tether\",TETHER_CLASSES={element:!1,enabled:!1},TRANSITION_DURATION=150,bPopover={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[n(\"span\",{ref:\"trigger\"},[t._t(\"default\")],2),n(\"div\",{ref:\"popover\",staticClass:\"popover fade\",class:[t.classState?\"show\":\"\",t.popoverAlignment],style:t.popoverStyle,attrs:{tabindex:\"-1\"},on:{focus:function(e){t.$emit(\"focus\")},blur:function(e){t.$emit(\"blur\")}}},[n(\"div\",{staticClass:\"popover-arrow\"}),t.title?n(\"h3\",{staticClass:\"popover-title\",domProps:{innerHTML:t._s(t.title)}}):t._e(),n(\"div\",{staticClass:\"popover-content\"},[n(\"div\",{staticClass:\"popover-content-wrapper\"},[t._t(\"content\",[n(\"span\",{domProps:{innerHTML:t._s(t.content)}})])],2)])])])},staticRenderFns:[],props:{constraints:{type:Array,default:function(){return[]}},content:{type:String,default:\"\"},debounce:{type:[Number],default:300,validator:function(t){return t>=0}},delay:{type:[Number,Object],default:0,validator:function(t){return\"number\"==typeof t?t>=0:null!==t&&\"object\"==typeof t&&(\"number\"==typeof t.show&&\"number\"==typeof t.hide&&t.show>=0&&t.hide>=0)}},offset:{type:String,default:\"0 0\",validator:function(t){return/^((0\\s?)|([+-]?[0-9]+(px|%)\\s?)){2}$/.test(t)}},placement:{type:String,default:\"top\",validator:function(t){return Object.keys(PLACEMENT_PARAMS).indexOf(t)!==-1}},popoverStyle:{type:Object,default:null},show:{type:Boolean,default:null},targetOffset:{type:String,default:\"0 0\",validator:function(t){return/^((0\\s?)|([+-]?[0-9]+(px|%)\\s?)){2}$/.test(t)}},title:{type:String,default:\"\"},triggers:{type:[Boolean,String,Array],default:function(){return[\"click\",\"focus\"]},validator:function(t){if(t===!1||\"\"===t)return!0;if(\"string\"==typeof t)return Object.keys(TRIGGER_LISTENERS).indexOf(t)!==-1;if(Array.isArray(t)){var e=Object.keys(TRIGGER_LISTENERS);return t.forEach(function(t){if(e.indexOf(t)===-1)return!1}),!0}return!1}}},data:function(){return{triggerState:this.show,classState:this.show,lastEvent:null}},computed:{normalizedTriggers:function(){return this.triggers===!1?[]:\"string\"==typeof this.triggers?[this.triggers]:this.triggers},popoverAlignment:function(){return this.placement&&\"default\"!==this.placement?\"popover-\"+this.placement:\"popover-top\"},showState:function(){return this.show!==!1&&(this.triggerState||this.show)}},watch:{constraints:function(){this.setOptions()},normalizedTriggers:function(t,e){this.updateListeners(t,e)},offset:function(){this.setOptions()},placement:function(){this.setOptions()},showState:function(t){var e=this,n=this.getDelay(t);clearTimeout(this._timeout),n?this._timeout=setTimeout(function(){return e.togglePopover(t)},n):this.togglePopover(t)}},methods:{addListener:function(t){var e=this;for(var n in TRIGGER_LISTENERS[t])e._trigger.addEventListener(n,function(t){return e.eventHandler(t)})},destroyTether:function(){if(this._tether&&!this.showState){this._tether.destroy(),\nthis._tether=null;var t=new RegExp(\"(^|[^-]\\\\b)(\"+TETHER_CLASS_PREFIX+\"\\\\S*)\",\"g\");this._trigger.className=this._trigger.className.replace(t,\"\")}},eventHandler:function(t){var e=this;if(!(this.normalizedTriggers.length>1&&this.debounce>0&&null!==this.lastEvent&&t.timeStamp<=this.lastEvent+this.debounce))for(var n in TRIGGER_LISTENERS)for(var i in TRIGGER_LISTENERS[n])if(i===t.type){var o=TRIGGER_LISTENERS[n][i];return void((\"toggle\"===o||e.triggerState&&\"hide\"===o||!e.triggerState&&\"show\"===o)&&(e.triggerState=!e.triggerState,e.lastEvent=t.timeStamp))}},getDelay:function(t){return\"object\"==typeof this.delay?t?this.delay.show:this.delay.hide:this.delay},getTetherOptions:function(){return{attachment:PLACEMENT_PARAMS[this.placement],element:this._popover,target:this._trigger,classes:TETHER_CLASSES,classPrefix:TETHER_CLASS_PREFIX,offset:this.offset,constraints:this.constraints,targetOffset:this.targetOffset}},hidePopover:function(){var t=this;this.classState=!1,clearTimeout(this._timeout),this._timeout=setTimeout(function(){t._popover.style.display=\"none\",t.destroyTether()},TRANSITION_DURATION)},refreshPosition:function(){var t=this;this._tether&&this.$nextTick(function(){t._tether.position()})},removeListener:function(t){var e=this;for(var n in TRIGGER_LISTENERS[t])e._trigger.removeEventListener(n,function(t){return e.eventHandler(t)})},setOptions:function(){this._tether&&this._tether.setOptions(this.getTetherOptions())},showPopover:function(){var e=this;clearTimeout(this._timeout),this._tether||(this._tether=new t(this.getTetherOptions())),this._popover.style.display=\"block\",this.refreshPosition(),this.$nextTick(function(){e.classState=!0})},togglePopover:function(t){this.$emit(\"showChange\",t),t?(this.showPopover(),this.$root.$emit(\"shown::popover\")):(this.hidePopover(),this.$root.$emit(\"hidden::popover\"))},updateListeners:function(t,e){var n=this;void 0===e&&(e=[]);var i=[],o=[];t.forEach(function(t){e.indexOf(t)===-1&&i.push(t)}),e.forEach(function(e){t.indexOf(e)===-1&&o.push(e)}),i.forEach(function(t){return n.addListener(t)}),o.forEach(function(t){return n.removeListener(t)})}},created:function(){var t=this;this.$root.$on(\"hide::popover\",function(){t.triggerState=!1})},mounted:function(){this._trigger=this.$refs.trigger.children[0]||this.$refs.trigger,this._popover=this.$refs.popover,this._popover.style.display=\"none\",this._timeout=0,this.updateListeners(this.normalizedTriggers),this.showState&&this.showPopover()},updated:function(){this.refreshPosition()},beforeDestroy:function(){var t=this;this.normalizedTriggers.forEach(function(e){return t.removeListener(e)}),clearTimeout(this._timeout),this.destroyTether()}},progress={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"progress\"},[n(\"transition\",[n(\"div\",{class:t.classObject,style:t.styleObject,attrs:{role:\"progressbar\",\"aria-valuenow\":t.value,\"aria-valuemin\":0,\"aria-valuemax\":t.max}},[t._t(\"default\",[t.showProgress?[t._v(t._s(t.progress)+\"%\")]:t.showValue?[t._v(t._s(t.value))]:t._e()])],2)])],1)},staticRenderFns:[],computed:{classObject:function(){return[\"progress-bar\",this.progressVariant,this.striped||this.animated?\"progress-bar-striped\":\"\",this.animated?\"progress-bar-animated\":\"\"]},styleObject:function(){return{width:this.progress+\"%\"}},progressVariant:function(){return this.variant?\"bg-\"+this.variant:null},progress:function(){var t=Math.pow(10,this.precision);return Math.round(100*t*this.value/this.max)/t}},props:{striped:{type:Boolean,default:!1},animated:{type:Boolean,default:!1},precision:{type:Number,default:0},value:{type:Number,default:0},max:{type:Number,default:100},variant:{type:String,default:null},showProgress:{type:Boolean,default:!1},showValue:{type:Boolean,default:!1}}},toString=function(t){return t?t instanceof Object?Object.keys(t).map(function(e){return toString(t[e])}).join(\" \"):String(t):\"\"},defaultSortCompare=function(t,e,n){return toString(t[n]).localeCompare(toString(e[n]),void 0,{numeric:!0})},table={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"table\",{class:[\"table\",t.striped?\"table-striped\":\"\",t.hover?\"table-hover\":\"\"]},[n(\"thead\",[n(\"tr\",t._l(t.fields,function(e,i){return n(\"th\",{class:[e.sortable?\"sorting\":null,t.sortBy===i?\"sorting_\"+(t.sortDesc?\"desc\":\"asc\"):\"\",e.class?e.class:null],domProps:{innerHTML:t._s(e.label)},on:{click:function(n){t.headClick(e,i)}}})}))]),n(\"tbody\",[t._l(t._items,function(e,i){return n(\"tr\",{key:t.items_key,class:[e.state?\"table-\"+e.state:null],on:{click:function(n){t.rowClicked(e,i)}}},t._l(t.fields,function(o,s){return n(\"td\",{class:[o.class?o.class:null]},[t._t(s,[t._v(t._s(e[s]))],{value:e[s],item:e,index:i})],2)}))}),t.showEmpty&&0===t.items.length?n(\"tr\",{attrs:{colspan:t.fields.length}},[t._t(\"empty\",[n(\"div\",{staticClass:\"text-center\",domProps:{innerHTML:t._s(t.emptyText)}})])],2):t._e(),t.showEmpty&&t.items.length>0&&0===t._items.length?n(\"tr\",{attrs:{colspan:t.fields.length}},[t._t(\"emptyfiltered\",[n(\"div\",{staticClass:\"text-center\",domProps:{innerHTML:t._s(t.emptyFilteredText)}})])],2):t._e()],2)])},staticRenderFns:[],components:{bPagination:bPagination},data:function(){return{sortBy:null,sortDesc:!0}},props:{items:{type:Array,default:function(){return[]}},fields:{type:Object,default:function(){}},striped:{type:Boolean,default:!1},hover:{type:Boolean,default:!1},perPage:{type:Number,default:null},items_key:{type:String,default:null},currentPage:{type:Number,default:1},filter:{type:[String,RegExp,Function],default:null},sortCompare:{type:Function,default:null},itemsProvider:{type:Function,default:null},value:{type:Array,default:function(){return[]}},showEmpty:{type:Boolean,default:!1},emptyText:{type:String,default:\"There are no records to show\"},emptyFilteredText:{type:String,default:\"There are no records matching your request\"}},computed:{_items:function(){var t=this;if(!this.items)return[];if(this.itemsProvider)return this.itemsProvider(this);var e=this.items.slice();if(this.filter)if(this.filter instanceof Function)e=e.filter(this.filter);else{var n;n=this.filter instanceof RegExp?this.filter:new RegExp(\".*\"+this.filter+\".*\",\"ig\"),e=e.filter(function(t){var e=n.test(toString(t));return n.lastIndex=0,e})}var i=this.sortCompare||defaultSortCompare;return this.sortBy&&(e=e.sort(function(e,n){var o=i(e,n,t.sortBy);return t.sortDesc?o:o*-1})),this.$emit(\"input\",e),this.perPage&&(e=e.slice((this.currentPage-1)*this.perPage,this.currentPage*this.perPage)),e}},methods:{rowClicked:function(t,e){this.$emit(\"row-clicked\",t,e)},headClick:function(t,e){return t.sortable?(e===this.sortBy&&(this.sortDesc=!this.sortDesc),void(this.sortBy=e)):void(this.sortBy=null)}}},tabs={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(t.tag,{tag:\"component\",staticClass:\"tabs\",attrs:{id:t.id||null}},[t.bottom?n(\"div\",{ref:\"tabsContainer\",class:[\"tab-content\",{\"card-block\":t.card}]},[t._t(\"default\"),t.tabs&&t.tabs.length?t._e():t._t(\"empty\")],2):t._e(),n(\"div\",{class:{\"card-header\":t.card}},[n(\"ul\",{class:[\"nav\",\"nav-\"+t.navStyle,t.card?\"card-header-\"+t.navStyle:null],attrs:{role:\"tablist\",tabindex:\"0\",\"aria-setsize\":t.tabs.length,\"aria-posinset\":t.currentTab+1},on:{keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"left\",37)?\"button\"in e&&0!==e.button?null:void t.previousTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"up\",38)?void t.previousTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"right\",39)?\"button\"in e&&2!==e.button?null:void t.nextTab(e):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"down\",40)?void t.nextTab(e):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"left\",37))&&e.shiftKey?\"button\"in e&&0!==e.button?null:void t.setTab(-1,!1,1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"up\",38))&&e.shiftKey?void t.setTab(-1,!1,1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"right\",39))&&e.shiftKey?\"button\"in e&&2!==e.button?null:void t.setTab(t.tabs.length,!1,-1):null},function(e){return(\"button\"in e||!t._k(e.keyCode,\"down\",40))&&e.shiftKey?void t.setTab(t.tabs.length,!1,-1):null}]}},[t._l(t.tabs,function(e,i){return n(\"li\",{staticClass:\"nav-item\",attrs:{role:\"presentation\"}},[e.headHtml?n(\"div\",{class:[\"tab-head\",{small:t.small,active:e.localActive,disabled:e.disabled}],attrs:{role:\"heading\",tabindex:\"-1\"},domProps:{innerHTML:t._s(e.headHtml)}}):n(\"a\",{class:[\"nav-link\",{small:t.small,active:e.localActive,disabled:e.disabled}],attrs:{href:e.href,role:\"tab\",\"aria-selected\":e.localActive?\"true\":\"false\",\"aria-controls\":e.id||null,id:e.controlledBy||null,tabindex:\"-1\"},domProps:{innerHTML:t._s(e.title)},on:{click:function(e){e.preventDefault(),e.stopPropagation(),t.setTab(i)},keydown:[function(e){return\"button\"in e||!t._k(e.keyCode,\"space\",32)?(e.preventDefault(),e.stopPropagation(),void t.setTab(i)):null},function(e){return\"button\"in e||!t._k(e.keyCode,\"enter\",13)?(e.preventDefault(),e.stopPropagation(),void t.setTab(i)):null}]}})])}),t._t(\"tabs\")],2)]),t.bottom?t._e():n(\"div\",{ref:\"tabsContainer\",class:[\"tab-content\",{\"card-block\":t.card}]},[t._t(\"default\"),t.tabs&&t.tabs.length?t._e():t._t(\"empty\")],2)])},staticRenderFns:[],data:function(){return{currentTab:this.value,tabs:[]}},props:{id:{type:String,default:\"\"},tag:{type:String,default:\"div\"},noFade:{type:Boolean,default:!1},card:{type:Boolean,default:!1},small:{type:Boolean,default:!1},value:{type:Number,default:0},pills:{type:Boolean,default:!1},lazy:{type:Boolean,default:!1},bottom:{type:Boolean,default:!1}},watch:{currentTab:function(t,e){t!==e&&(this.$root.$emit(\"changed::tab\",this,t,this.tabs[t]),this.$emit(\"input\",t),this.tabs[t].$emit(\"click\"))},value:function(t,e){t!==e&&this.setTab(t)},fade:function(t,e){var n=this;t!==e&&this.tabs.forEach(function(e){n.$set(e,\"fade\",t)})}},computed:{fade:function(){return!this.noFade},navStyle:function(){return this.pills?\"pills\":\"tabs\"}},methods:{sign:function(t){return 0===t?0:t>0?1:-1},nextTab:function(){this.setTab(this.currentTab,!1,1)},previousTab:function(){this.setTab(this.currentTab,!1,-1)},setTab:function(t,e,n){if(n=n||0,e||t+n!==this.currentTab){var i=this.tabs[t+n];if(i){if(i.disabled)return void(n&&this.setTab(t,e,n+this.sign(n)));this.tabs[this.currentTab]&&this.$set(this.tabs[this.currentTab],\"localActive\",!1),this.$set(i,\"localActive\",!0),this.currentTab=t+n}}},updateTabs:function(){var t=this;this.$slots.default?this.tabs=this.$slots.default.filter(function(t){return t.componentInstance||!1}).map(function(t){return t.componentInstance}):this.tabs=[],this.tabs.forEach(function(e){t.$set(e,\"fade\",t.fade),t.$set(e,\"lazy\",t.lazy)});var e=this.currentTab;null!==this.currentTab&&void 0!==this.currentTab||this.tabs.forEach(function(t,n){t.active&&(e=n)});var n=0;e>this.tabs.length-1&&(n=-1),this.setTab(e||0,!0,n)}},mounted:function(){this.updateTabs(),observeDOM(this.$refs.tabsContainer,this.updateTabs.bind(this),{subtree:!1})}},tab={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"transition\",{attrs:{mode:\"out-in\"},on:{enter:t.enter,\"before-leave\":t.beforeLeave}},[t.localActive||!t.lazy?n(t.tag,{directives:[{name:\"show\",rawName:\"v-show\",value:t.localActive||t.lazy,expression:\"localActive || lazy\"}],ref:\"panel\",tag:\"component\",class:[\"tab-pane\",{show:t.show,fade:t.fade,disabled:t.disabled,active:t.localActive}],attrs:{id:t.id||null,role:\"tabpanel\",\"aria-hidden\":t.localActive?\"false\":\"true\",\"aria-expanded\":t.localActive?\"true\":\"false\",\"aria-lablelledby\":t.controlledBy||null}},[t._t(\"default\")],2):t._e()],1)},staticRenderFns:[],methods:{enter:function(){this.show=!0},beforeLeave:function(){this.show=!1}},data:function(){return{fade:!1,localActive:!1,lazy:!0,show:!1}},computed:{controlledBy:function(){return this.buttonId||(this.id?this.id+\"__BV_tab_button__\":null)}},props:{id:{type:String,default:\"\"},tag:{type:String,default:\"div\"},buttonId:{type:String,default:\"\"},title:{type:String,default:\"\"},headHtml:{type:String,default:null},disabled:{type:Boolean,default:!1},active:{type:Boolean,default:!1},href:{type:String,default:\"#\"}}},tooltip={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",[n(\"span\",{ref:\"trigger\"},[t._t(\"default\")],2),n(\"div\",{ref:\"popover\",class:[\"tooltip\",\"tooltip-\"+this.placement],style:{opacity:t.showState?1:0},attrs:{tabindex:\"-1\"},on:{focus:function(e){t.$emit(\"focus\")},blur:function(e){t.$emit(\"blur\")}}},[n(\"div\",{staticClass:\"tooltip-inner\"},[t._t(\"content\",[n(\"span\",{domProps:{innerHTML:t._s(t.content||t.title)}})])],2)])])},staticRenderFns:[],extends:bPopover,props:{triggers:{type:[Boolean,String,Array],default:\"hover\"}}},components=Object.freeze({bAlert:alert,bBreadcrumb:breadcrumb,bButton:bBtn,bBtn:bBtn,bButtonToolbar:buttonToolbar,bButtonGroup:buttonGroup,bButtonGroupDropdown:buttonGroupDropdown,bInputGroup:inputGroup,bInputGroupAddon:inputGroupAddon,bInputGroupButton:inputGroupButton,bCard:card,bCardGroup:cardGroup,bDropdown:dropdown$1,bDropdownItem:dropdownItem,bDropdownDivider:dropdownDivider,bDropdownHeader:dropdownHeader,bDropdownSelect:dropdownSelect,bForm:form,bFormCheckbox:formCheckbox,bFormFieldset:formFieldset,bFormFile:formFile,bFormRadio:formRadio,bFormInput:formInput,bFormInputStatic:bFormInputStatic,bFormSelect:formSelect,bJumbotron:jumbotron,bBadge:badge,bMedia:media,bModal:modal,bNavbar:navbar,bPagination:bPagination,bPopover:bPopover,bProgress:progress,bTable:table,bTooltip:tooltip,bTab:tab,bTabs:tabs,bNav:nav,bNavItem:navItem,bNavItemDropdown:navItemDropdown,bNavToggle:navToggle,bListGroupItem:listGroupItem,bListGroup:listGroup,bCarouselSlide:carouselSlide,bCarousel:carousel,bCollapse:collapse,bLink:bLink}),all_listen_types={hover:!0,click:!0,focus:!0},listen_types={click:!0},toggle={bind:function(t,e){targets(t,e,listen_types,function(t){var e=t.targets,n=t.vm;e.forEach(function(t){n.$root.$emit(\"collapse::toggle\",t)})})}},listen_types$1={click:!0},modal$1={bind:function(t,e){targets(t,e,listen_types$1,function(e){var n=e.targets,i=e.vm;n.forEach(function(e){i.$root.$emit(\"show::modal\",e,t)})})}},inBrowser$1=\"undefined\"!=typeof window,isServer=!inBrowser$1;inBrowser$1&&window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(t){var e,n=(this.document||this.ownerDocument).querySelectorAll(t),i=this;do for(e=n.length;--e>=0&&n.item(e)!==i;);while(e<0&&(i=i.parentElement));return i});var NAME=\"v-b-scrollspy\",EVENT=\"scrollspy::activate\",BVSS=\"__BV_ScrollSpy__\",Default={element:\"body\",offset:10,method:\"auto\",throttle:200},DefaultType={element:\"(string|element)\",offset:\"number\",method:\"string\",throttle:\"number\"},ClassName={DROPDOWN_ITEM:\"dropdown-item\",DROPDOWN_MENU:\"dropdown-menu\",DROPDOWN_TOGGLE:\"dropdown-toggle\",NAV_LINK:\"nav-link\",LIST_ITEM:\"list-group-item\",ACTIVE:\"active\"},Selector={ACTIVE:\".active\",NAV_LIST_GROUP:\".nav, .list-group\",NAV:\".nav\",LIST_GROUP:\".list-group\",NAV_LINKS:\".nav-link\",LIST_ITEMS:\".list-group-item\",DROPDOWN:\".dropdown\",DROPDOWN_ITEMS:\".dropdown-item\",DROPDOWN_TOGGLE:\".dropdown-toggle\"},OffsetMethod={OFFSET:\"offset\",POSITION:\"position\"};ScrollSpy.prototype.updateConfig=function(t){var e=this;t.arg&&(this._config.element=\"#\"+t.arg),Object.keys(t.modifiers).forEach(function(t){/^\\d+$/.test(t)?e._config.offset=parseInt(t,10):/^(auto|position|offset)$/.test(t)&&(e._config.method=t)}),\"string\"==typeof t.value?this._config.element=t.value:\"number\"==typeof t.value?this._config.offset=Math.round(t.value):\"object\"==typeof t.value&&Object.keys(t.value).filter(function(t){return Boolean(DefaultType[t])}).forEach(function(n){e._config[n]=t.value[n]}),typeCheckConfig(NAME,this._config,DefaultType);var n=getVm(this._$el);return n&&n.$root&&(this._$root=n.$root),this},ScrollSpy.prototype.listen=function(){var t=this._getScroller();return t&&(\"BODY\"!==t.tagName&&t.addEventListener(\"scroll\",this,!1),window.addEventListener(\"scroll\",this,!1),window.addEventListener(\"orientationchange\",this,!1),window.addEventListener(\"resize\",this,!1)),this},ScrollSpy.prototype.unListen=function(){var t=this._getScroller();return t&&(\"BODY\"!==t.tagName&&t.removeEventListener(\"scroll\",this,!1),window.removeEventListener(\"scroll\",this,!1),window.removeEventListener(\"orientationchange\",this,!1),window.removeEventListener(\"resize\",this,!1)),this},ScrollSpy.prototype.refresh=function(){var t=this,e=this._getScroller();if(!e)return this;var n=\"BODY\"===e.tagName?OffsetMethod.OFFSET:OffsetMethod.POSITION,i=\"auto\"===this._config.method?n:this._config.method,o=i===OffsetMethod.OFFSET?0:this._getScrollTop();return this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),$QSA(this._selector,this._$el).map(function(t){var n=t.getAttribute(\"href\");if(n&&\"#\"===n.charAt(0)&&\"#\"!==n&&n.indexOf(\"#/\")===-1){var s=$QS(n,e);if(!s)return null;var r=s.getBoundingClientRect();if(r.width||r.height)return{offset:(i===OffsetMethod.OFFSET?r.top:s.offsetTop)+o,href:n}}return null}).filter(function(t){return t}).sort(function(t,e){return t.offset-e.offset}).forEach(function(e){t._offsets.push(e.offset),t._targets.push(e.href)}),this},ScrollSpy.prototype.process=function(){var t=this;if(!this._getScroller)return this;var e=this._getScrollTop()+this._config.offset,n=this._getScrollHeight(),i=this._config.offset+n-this._getOffsetHeight();if(this._scrollHeight!==n&&this.refresh(),e>=i){var o=this._targets[this._targets.length-1];return this._activeTarget!==o&&this._activate(o),this}if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,this._clear(),this;for(var s=this._offsets.length;s--;){var r=t._activeTarget!==t._targets[s]&&e>=t._offsets[s]&&(void 0===t._offsets[s+1]||e<t._offsets[s+1]);r&&t._activate(t._targets[s])}return this},ScrollSpy.prototype.dispose=function(){this.unListen(),clearTimeout(this._resizeTimeout),this._resizeTimeout=null,this._$el=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null,this._$root=null},ScrollSpy.prototype.handleEvent=function(t){function e(){clearTimeout(this._resizeTimeout),this._resizeTimeout=setTimeout(function(){n.refresh().process()},n._config.throttle||Default.throttle)}var n=this;\"scroll\"===t.type?this.process():\"orientationchange\"===t.type?this.refresh().process():\"resize\"===t.type&&e()},ScrollSpy.prototype._getScroller=function(){if(isServer)return null;var t=this._config.element;return t?t&&isElement(t)?t:\"string\"==typeof t?\"body\"===t?document.body:$QS(t):null:null},ScrollSpy.prototype._getScrollTop=function(){var t=this._getScroller();return t?\"BODY\"===t.tagName?window.pageYOffset:t.scrollTop:0},ScrollSpy.prototype._getScrollHeight=function(){var t=this._getScroller();return t?\"BODY\"===t.tagName?Math.max(document.body.scrollHeight,document.documentElement.scrollHeight):t.scrollHeight:0},ScrollSpy.prototype._getOffsetHeight=function(){var t=this._getScroller();return t?\"BODY\"===t.tagName?window.innerHeight:t.getBoundingClientRect().height:0},ScrollSpy.prototype._activate=function(t){var e=this;this._activeTarget=t,this._clear();var n=this._selector.split(\",\");n=n.map(function(e){return e+'[href=\"'+t+'\"]'});var i=$QSA(n.join(\",\"),this._$el);i.forEach(function(t){if(t.classList.contains(ClassName.DROPDOWN_ITEM)){var n=closest(t,Selector.DROPDOWN);if(n){var i=$QS(Selector.DROPDOWN_TOGGLE,n);i&&e._setActiveState(i,!0)}e._setActiveState(t,!0)}else e._setActiveState(t,!0),e._setParentsSiblingActiveState(t,Selector.NAV_LIST_GROUP,[ClassName.NAV_LINK,ClassName.LIST_ITEM],!0)}),i&&i.length>0&&this._$root&&this._$root.$emit&&this._$root.$emit(EVENT,t)},ScrollSpy.prototype._clear=function(){var t=this;$QSA(this._selector,this._$el).filter(function(t){if(t.classList.contains(ClassName.ACTIVE)){var e=t.getAttribute(\"href\");return\"#\"===e.charAt(0)&&0!==e.indexOf(\"#/\")}return!1}).forEach(function(e){t._setActiveState(e,!1)})},ScrollSpy.prototype._setActiveState=function(t,e){if(t){t.classList.contains(ClassName.NAV_LINK)&&!t.classList.contains(ClassName.DROPDOWN_TOGGLE)&&(t=t.parentElement);var n=getVm(t);n&&Object.prototype.hasOwnProperty.call(n.$props,\"active\")?n.$props.active=e:t.classList[e?\"add\":\"remove\"](ClassName.ACTIVE)}},ScrollSpy.prototype._setParentsSiblingActiveState=function(t,e,n,i){var o=this;if(n){Array.isArray(n)||(n=[n]);for(var s=t;s;)if(s=closest(s,e),s&&s.previousElementSibling)for(var r=0;r<n.length-1;r++)s.previousElementSibling.classList.contains(n[r])&&o._setActiveState(s,i)}};var scrollspy={bind:function(t,e){isServer||t[BVSS]||(t[BVSS]=new ScrollSpy(t,e))},inserted:function(t,e){!isServer&&t[BVSS]&&t[BVSS].updateConfig(e).listen().refresh().process()},update:function(t,e){!isServer&&t[BVSS]&&t[BVSS].updateConfig(e).refresh().process()},componentUpdated:function(t,e){!isServer&&t[BVSS]&&t[BVSS].updateConfig(e).refresh().process()},unbind:function(t){!isServer&&t[BVSS]&&(t[BVSS].unListen().dispose(),t[BVSS]=null)}},directives=Object.freeze({bToggle:toggle,bModal:modal$1,bScrollspy:scrollspy}),VuePlugin={install:function(t){if(!t._bootstrap_vue_installed){t._bootstrap_vue_installed=!0;for(var e in components)t.component(e,components[e]);for(var n in directives)t.directive(n,directives[n])}}};\"undefined\"!=typeof window&&window.Vue&&window.Vue.use(VuePlugin);export default VuePlugin;\n//# sourceMappingURL=bootstrap-vue.esm.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap-vue/dist/bootstrap-vue.esm.js\n// module id = 3\n// module chunks = 0","\n/* styles */\nrequire(\"!!vue-style-loader!css-loader?minimize!../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-3afc1888\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n\nvar Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"),\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3afc1888\\\"}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = 4\n// module chunks = 0","/*!\n * Vue.js v2.3.3\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production') {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.3';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (process.env.NODE_ENV !== 'production' &&\n              typeof console !== 'undefined' &&\n              !bailed\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers && modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (process.env.NODE_ENV !== 'production' &&\n      name === 'click' &&\n      handler && handler.modifiers && handler.modifiers.right\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$3;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$3 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && warn$3(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key\n  ) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, warn$3)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, warn$3)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$3);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length > 1 || ast.type !== 1\n  )) {\n    warn$3('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (key, el) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}}\"\n}\n\nfunction genForScopedSlot (key, el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el)) +\n    '})'\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return genElement(el$1)\n    }\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\nfunction makeFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompiler (baseOptions) {\n  var functionCompileCache = Object.create(null);\n\n  function compile (\n    template,\n    options\n  ) {\n    var finalOptions = Object.create(baseOptions);\n    var errors = [];\n    var tips = [];\n    finalOptions.warn = function (msg, tip$$1) {\n      (tip$$1 ? tips : errors).push(msg);\n    };\n\n    if (options) {\n      // merge custom modules\n      if (options.modules) {\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n      }\n      // merge custom directives\n      if (options.directives) {\n        finalOptions.directives = extend(\n          Object.create(baseOptions.directives),\n          options.directives\n        );\n      }\n      // copy other options\n      for (var key in options) {\n        if (key !== 'modules' && key !== 'directives') {\n          finalOptions[key] = options[key];\n        }\n      }\n    }\n\n    var compiled = baseCompile(template, finalOptions);\n    if (process.env.NODE_ENV !== 'production') {\n      errors.push.apply(errors, detectErrors(compiled.ast));\n    }\n    compiled.errors = errors;\n    compiled.tips = tips;\n    return compiled\n  }\n\n  function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (functionCompileCache[key]) {\n      return functionCompileCache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = makeFunction(compiled.render, fnGenErrors);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\n    }\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (functionCompileCache[key] = res)\n  }\n\n  return {\n    compile: compile,\n    compileToFunctions: compileToFunctions\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nexport default Vue$3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue/dist/vue.esm.js\n// module id = 5\n// module chunks = 0","<template>\n  <div id=\"app\">\n    <musique>\n\n    </musique>\n  </div>\n</template>\n\n<script>\nimport musique from './components/musique.vue';\nexport default {\n  components: {musique},\n  name: 'app',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// App.vue?c634b392","<template id=\"\">\n  <div class=\"\">\n    <note v-for=\"(n,i) in melodie\" :key=i :note=n @change=\"update\"></note>\n    <input type=\"button\" value=\"play\" @click=\"play\">\n    <input type=\"button\" value=\"stop\" @click=\"stop\">\n    <div class=\"alert\">\n\n    </div>\n  </div>\n</template>\n\n\n<script type=\"text/javascript\">\n\n  import Tone from 'tone';\n  var son = new Tone.Synth().toMaster();\n  Tone.Transport.start();\n\n  import note from './note.vue';\n  export default{\n    components:{note},\n    data(){\n      return {\n        sequence: new Tone.Sequence((t,v)=>{\n          console.log(v);\n          console.log(t);\n        }),\n        melodie:[0,1,5,1,2,4,1,2]\n      }\n    },\n    mounted(){\n      this.update();\n    },\n    methods:{\n      update(){\n        this.sequence.removeAll();\n        this.melodie.forEach((v,i)=>{\n          this.sequence.add(i,v)\n        })\n        this.sequence.events = this.melodie;\n      },\n      stop(){\n        this.sequence.stop();\n      },\n      play(){\n        this.sequence.start();\n      }\n    }\n  }\n</script>\n\n<style media=\"screen\">\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// musique.vue?55915d7b","<template id=\"note\">\n  <div class=\"note\">\n    <input min=0 max=7 type=\"range\" step=\"1\" v-model=\"note\">\n  </div>\n</template>\n\n<script type=\"text/javascript\">\n  export default{\n    props:{\n      note:{default:0}\n    },\n    data() {\n      return {\n        prout:0\n      }\n    }\n  }\n</script>\n\n<style media=\"screen\">\n  .note{\n    height: 15px;\n    width:  5px;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// note.vue?9f0e632a","import Vue from 'vue'\nimport App from './App.vue'\nimport bs from 'bootstrap-vue'\n\nVue.use(bs);\n\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-32d4e95a\",\"scoped\":false,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/musique.vue\n// module id = 10\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"#app{font-family:Avenir,Helvetica,Arial,sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:center;color:#2c3e50;margin-top:60px}h1,h2{font-weight:400}ul{list-style-type:none;padding:0}li{display:inline-block;margin:0 10px}a{color:#42b983}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-3afc1888\",\"scoped\":false,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/App.vue\n// module id = 11\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".note{height:15px;width:5px}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-4efda35c\",\"scoped\":false,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/note.vue\n// module id = 12\n// module chunks = 0","/*! tether 1.4.0 */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require, exports, module);\n  } else {\n    root.Tether = factory();\n  }\n}(this, function(require, exports, module) {\n\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar TetherBase = undefined;\nif (typeof TetherBase === 'undefined') {\n  TetherBase = { modules: [] };\n}\n\nvar zeroElement = null;\n\n// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets\n// if the element lies within a nested document (<frame> or <iframe>-like).\nfunction getActualBoundingClientRect(node) {\n  var boundingRect = node.getBoundingClientRect();\n\n  // The original object returned by getBoundingClientRect is immutable, so we clone it\n  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9\n  var rect = {};\n  for (var k in boundingRect) {\n    rect[k] = boundingRect[k];\n  }\n\n  if (node.ownerDocument !== document) {\n    var _frameElement = node.ownerDocument.defaultView.frameElement;\n    if (_frameElement) {\n      var frameRect = getActualBoundingClientRect(_frameElement);\n      rect.top += frameRect.top;\n      rect.bottom += frameRect.top;\n      rect.left += frameRect.left;\n      rect.right += frameRect.left;\n    }\n  }\n\n  return rect;\n}\n\nfunction getScrollParents(el) {\n  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  var computedStyle = getComputedStyle(el) || {};\n  var position = computedStyle.position;\n  var parents = [];\n\n  if (position === 'fixed') {\n    return [el];\n  }\n\n  var parent = el;\n  while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {\n    var style = undefined;\n    try {\n      style = getComputedStyle(parent);\n    } catch (err) {}\n\n    if (typeof style === 'undefined' || style === null) {\n      parents.push(parent);\n      return parents;\n    }\n\n    var _style = style;\n    var overflow = _style.overflow;\n    var overflowX = _style.overflowX;\n    var overflowY = _style.overflowY;\n\n    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {\n        parents.push(parent);\n      }\n    }\n  }\n\n  parents.push(el.ownerDocument.body);\n\n  // If the node is within a frame, account for the parent window scroll\n  if (el.ownerDocument !== document) {\n    parents.push(el.ownerDocument.defaultView);\n  }\n\n  return parents;\n}\n\nvar uniqueId = (function () {\n  var id = 0;\n  return function () {\n    return ++id;\n  };\n})();\n\nvar zeroPosCache = {};\nvar getOrigin = function getOrigin() {\n  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of\n  // jitter as the user scrolls that messes with our ability to detect if two positions\n  // are equivilant or not.  We place an element at the top left of the page that will\n  // get the same jitter, so we can cancel the two out.\n  var node = zeroElement;\n  if (!node || !document.body.contains(node)) {\n    node = document.createElement('div');\n    node.setAttribute('data-tether-id', uniqueId());\n    extend(node.style, {\n      top: 0,\n      left: 0,\n      position: 'absolute'\n    });\n\n    document.body.appendChild(node);\n\n    zeroElement = node;\n  }\n\n  var id = node.getAttribute('data-tether-id');\n  if (typeof zeroPosCache[id] === 'undefined') {\n    zeroPosCache[id] = getActualBoundingClientRect(node);\n\n    // Clear the cache when this position call is done\n    defer(function () {\n      delete zeroPosCache[id];\n    });\n  }\n\n  return zeroPosCache[id];\n};\n\nfunction removeUtilElements() {\n  if (zeroElement) {\n    document.body.removeChild(zeroElement);\n  }\n  zeroElement = null;\n};\n\nfunction getBounds(el) {\n  var doc = undefined;\n  if (el === document) {\n    doc = document;\n    el = document.documentElement;\n  } else {\n    doc = el.ownerDocument;\n  }\n\n  var docEl = doc.documentElement;\n\n  var box = getActualBoundingClientRect(el);\n\n  var origin = getOrigin();\n\n  box.top -= origin.top;\n  box.left -= origin.left;\n\n  if (typeof box.width === 'undefined') {\n    box.width = document.body.scrollWidth - box.left - box.right;\n  }\n  if (typeof box.height === 'undefined') {\n    box.height = document.body.scrollHeight - box.top - box.bottom;\n  }\n\n  box.top = box.top - docEl.clientTop;\n  box.left = box.left - docEl.clientLeft;\n  box.right = doc.body.clientWidth - box.width - box.left;\n  box.bottom = doc.body.clientHeight - box.height - box.top;\n\n  return box;\n}\n\nfunction getOffsetParent(el) {\n  return el.offsetParent || document.documentElement;\n}\n\nvar _scrollBarSize = null;\nfunction getScrollBarSize() {\n  if (_scrollBarSize) {\n    return _scrollBarSize;\n  }\n  var inner = document.createElement('div');\n  inner.style.width = '100%';\n  inner.style.height = '200px';\n\n  var outer = document.createElement('div');\n  extend(outer.style, {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    pointerEvents: 'none',\n    visibility: 'hidden',\n    width: '200px',\n    height: '150px',\n    overflow: 'hidden'\n  });\n\n  outer.appendChild(inner);\n\n  document.body.appendChild(outer);\n\n  var widthContained = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  var widthScroll = inner.offsetWidth;\n\n  if (widthContained === widthScroll) {\n    widthScroll = outer.clientWidth;\n  }\n\n  document.body.removeChild(outer);\n\n  var width = widthContained - widthScroll;\n\n  _scrollBarSize = { width: width, height: width };\n  return _scrollBarSize;\n}\n\nfunction extend() {\n  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  var args = [];\n\n  Array.prototype.push.apply(args, arguments);\n\n  args.slice(1).forEach(function (obj) {\n    if (obj) {\n      for (var key in obj) {\n        if (({}).hasOwnProperty.call(obj, key)) {\n          out[key] = obj[key];\n        }\n      }\n    }\n  });\n\n  return out;\n}\n\nfunction removeClass(el, name) {\n  if (typeof el.classList !== 'undefined') {\n    name.split(' ').forEach(function (cls) {\n      if (cls.trim()) {\n        el.classList.remove(cls);\n      }\n    });\n  } else {\n    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');\n    var className = getClassName(el).replace(regex, ' ');\n    setClassName(el, className);\n  }\n}\n\nfunction addClass(el, name) {\n  if (typeof el.classList !== 'undefined') {\n    name.split(' ').forEach(function (cls) {\n      if (cls.trim()) {\n        el.classList.add(cls);\n      }\n    });\n  } else {\n    removeClass(el, name);\n    var cls = getClassName(el) + (' ' + name);\n    setClassName(el, cls);\n  }\n}\n\nfunction hasClass(el, name) {\n  if (typeof el.classList !== 'undefined') {\n    return el.classList.contains(name);\n  }\n  var className = getClassName(el);\n  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);\n}\n\nfunction getClassName(el) {\n  // Can't use just SVGAnimatedString here since nodes within a Frame in IE have\n  // completely separately SVGAnimatedString base classes\n  if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {\n    return el.className.baseVal;\n  }\n  return el.className;\n}\n\nfunction setClassName(el, className) {\n  el.setAttribute('class', className);\n}\n\nfunction updateClasses(el, add, all) {\n  // Of the set of 'all' classes, we need the 'add' classes, and only the\n  // 'add' classes to be set.\n  all.forEach(function (cls) {\n    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {\n      removeClass(el, cls);\n    }\n  });\n\n  add.forEach(function (cls) {\n    if (!hasClass(el, cls)) {\n      addClass(el, cls);\n    }\n  });\n}\n\nvar deferred = [];\n\nvar defer = function defer(fn) {\n  deferred.push(fn);\n};\n\nvar flush = function flush() {\n  var fn = undefined;\n  while (fn = deferred.pop()) {\n    fn();\n  }\n};\n\nvar Evented = (function () {\n  function Evented() {\n    _classCallCheck(this, Evented);\n  }\n\n  _createClass(Evented, [{\n    key: 'on',\n    value: function on(event, handler, ctx) {\n      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n      if (typeof this.bindings === 'undefined') {\n        this.bindings = {};\n      }\n      if (typeof this.bindings[event] === 'undefined') {\n        this.bindings[event] = [];\n      }\n      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });\n    }\n  }, {\n    key: 'once',\n    value: function once(event, handler, ctx) {\n      this.on(event, handler, ctx, true);\n    }\n  }, {\n    key: 'off',\n    value: function off(event, handler) {\n      if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {\n        return;\n      }\n\n      if (typeof handler === 'undefined') {\n        delete this.bindings[event];\n      } else {\n        var i = 0;\n        while (i < this.bindings[event].length) {\n          if (this.bindings[event][i].handler === handler) {\n            this.bindings[event].splice(i, 1);\n          } else {\n            ++i;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'trigger',\n    value: function trigger(event) {\n      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {\n        var i = 0;\n\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        while (i < this.bindings[event].length) {\n          var _bindings$event$i = this.bindings[event][i];\n          var handler = _bindings$event$i.handler;\n          var ctx = _bindings$event$i.ctx;\n          var once = _bindings$event$i.once;\n\n          var context = ctx;\n          if (typeof context === 'undefined') {\n            context = this;\n          }\n\n          handler.apply(context, args);\n\n          if (once) {\n            this.bindings[event].splice(i, 1);\n          } else {\n            ++i;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Evented;\n})();\n\nTetherBase.Utils = {\n  getActualBoundingClientRect: getActualBoundingClientRect,\n  getScrollParents: getScrollParents,\n  getBounds: getBounds,\n  getOffsetParent: getOffsetParent,\n  extend: extend,\n  addClass: addClass,\n  removeClass: removeClass,\n  hasClass: hasClass,\n  updateClasses: updateClasses,\n  defer: defer,\n  flush: flush,\n  uniqueId: uniqueId,\n  Evented: Evented,\n  getScrollBarSize: getScrollBarSize,\n  removeUtilElements: removeUtilElements\n};\n/* globals TetherBase, performance */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nif (typeof TetherBase === 'undefined') {\n  throw new Error('You must include the utils.js file before tether.js');\n}\n\nvar _TetherBase$Utils = TetherBase.Utils;\nvar getScrollParents = _TetherBase$Utils.getScrollParents;\nvar getBounds = _TetherBase$Utils.getBounds;\nvar getOffsetParent = _TetherBase$Utils.getOffsetParent;\nvar extend = _TetherBase$Utils.extend;\nvar addClass = _TetherBase$Utils.addClass;\nvar removeClass = _TetherBase$Utils.removeClass;\nvar updateClasses = _TetherBase$Utils.updateClasses;\nvar defer = _TetherBase$Utils.defer;\nvar flush = _TetherBase$Utils.flush;\nvar getScrollBarSize = _TetherBase$Utils.getScrollBarSize;\nvar removeUtilElements = _TetherBase$Utils.removeUtilElements;\n\nfunction within(a, b) {\n  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  return a + diff >= b && b >= a - diff;\n}\n\nvar transformKey = (function () {\n  if (typeof document === 'undefined') {\n    return '';\n  }\n  var el = document.createElement('div');\n\n  var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];\n  for (var i = 0; i < transforms.length; ++i) {\n    var key = transforms[i];\n    if (el.style[key] !== undefined) {\n      return key;\n    }\n  }\n})();\n\nvar tethers = [];\n\nvar position = function position() {\n  tethers.forEach(function (tether) {\n    tether.position(false);\n  });\n  flush();\n};\n\nfunction now() {\n  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {\n    return performance.now();\n  }\n  return +new Date();\n}\n\n(function () {\n  var lastCall = null;\n  var lastDuration = null;\n  var pendingTimeout = null;\n\n  var tick = function tick() {\n    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {\n      // We voluntarily throttle ourselves if we can't manage 60fps\n      lastDuration = Math.min(lastDuration - 16, 250);\n\n      // Just in case this is the last event, remember to position just once more\n      pendingTimeout = setTimeout(tick, 250);\n      return;\n    }\n\n    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {\n      // Some browsers call events a little too frequently, refuse to run more than is reasonable\n      return;\n    }\n\n    if (pendingTimeout != null) {\n      clearTimeout(pendingTimeout);\n      pendingTimeout = null;\n    }\n\n    lastCall = now();\n    position();\n    lastDuration = now() - lastCall;\n  };\n\n  if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {\n    ['resize', 'scroll', 'touchmove'].forEach(function (event) {\n      window.addEventListener(event, tick);\n    });\n  }\n})();\n\nvar MIRROR_LR = {\n  center: 'center',\n  left: 'right',\n  right: 'left'\n};\n\nvar MIRROR_TB = {\n  middle: 'middle',\n  top: 'bottom',\n  bottom: 'top'\n};\n\nvar OFFSET_MAP = {\n  top: 0,\n  left: 0,\n  middle: '50%',\n  center: '50%',\n  bottom: '100%',\n  right: '100%'\n};\n\nvar autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {\n  var left = attachment.left;\n  var top = attachment.top;\n\n  if (left === 'auto') {\n    left = MIRROR_LR[relativeToAttachment.left];\n  }\n\n  if (top === 'auto') {\n    top = MIRROR_TB[relativeToAttachment.top];\n  }\n\n  return { left: left, top: top };\n};\n\nvar attachmentToOffset = function attachmentToOffset(attachment) {\n  var left = attachment.left;\n  var top = attachment.top;\n\n  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {\n    left = OFFSET_MAP[attachment.left];\n  }\n\n  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {\n    top = OFFSET_MAP[attachment.top];\n  }\n\n  return { left: left, top: top };\n};\n\nfunction addOffset() {\n  var out = { top: 0, left: 0 };\n\n  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {\n    offsets[_key] = arguments[_key];\n  }\n\n  offsets.forEach(function (_ref) {\n    var top = _ref.top;\n    var left = _ref.left;\n\n    if (typeof top === 'string') {\n      top = parseFloat(top, 10);\n    }\n    if (typeof left === 'string') {\n      left = parseFloat(left, 10);\n    }\n\n    out.top += top;\n    out.left += left;\n  });\n\n  return out;\n}\n\nfunction offsetToPx(offset, size) {\n  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {\n    offset.left = parseFloat(offset.left, 10) / 100 * size.width;\n  }\n  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {\n    offset.top = parseFloat(offset.top, 10) / 100 * size.height;\n  }\n\n  return offset;\n}\n\nvar parseOffset = function parseOffset(value) {\n  var _value$split = value.split(' ');\n\n  var _value$split2 = _slicedToArray(_value$split, 2);\n\n  var top = _value$split2[0];\n  var left = _value$split2[1];\n\n  return { top: top, left: left };\n};\nvar parseAttachment = parseOffset;\n\nvar TetherClass = (function (_Evented) {\n  _inherits(TetherClass, _Evented);\n\n  function TetherClass(options) {\n    var _this = this;\n\n    _classCallCheck(this, TetherClass);\n\n    _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);\n    this.position = this.position.bind(this);\n\n    tethers.push(this);\n\n    this.history = [];\n\n    this.setOptions(options, false);\n\n    TetherBase.modules.forEach(function (module) {\n      if (typeof module.initialize !== 'undefined') {\n        module.initialize.call(_this);\n      }\n    });\n\n    this.position();\n  }\n\n  _createClass(TetherClass, [{\n    key: 'getClass',\n    value: function getClass() {\n      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n      var classes = this.options.classes;\n\n      if (typeof classes !== 'undefined' && classes[key]) {\n        return this.options.classes[key];\n      } else if (this.options.classPrefix) {\n        return this.options.classPrefix + '-' + key;\n      } else {\n        return key;\n      }\n    }\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      var _this2 = this;\n\n      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n      var defaults = {\n        offset: '0 0',\n        targetOffset: '0 0',\n        targetAttachment: 'auto auto',\n        classPrefix: 'tether'\n      };\n\n      this.options = extend(defaults, options);\n\n      var _options = this.options;\n      var element = _options.element;\n      var target = _options.target;\n      var targetModifier = _options.targetModifier;\n\n      this.element = element;\n      this.target = target;\n      this.targetModifier = targetModifier;\n\n      if (this.target === 'viewport') {\n        this.target = document.body;\n        this.targetModifier = 'visible';\n      } else if (this.target === 'scroll-handle') {\n        this.target = document.body;\n        this.targetModifier = 'scroll-handle';\n      }\n\n      ['element', 'target'].forEach(function (key) {\n        if (typeof _this2[key] === 'undefined') {\n          throw new Error('Tether Error: Both element and target must be defined');\n        }\n\n        if (typeof _this2[key].jquery !== 'undefined') {\n          _this2[key] = _this2[key][0];\n        } else if (typeof _this2[key] === 'string') {\n          _this2[key] = document.querySelector(_this2[key]);\n        }\n      });\n\n      addClass(this.element, this.getClass('element'));\n      if (!(this.options.addTargetClasses === false)) {\n        addClass(this.target, this.getClass('target'));\n      }\n\n      if (!this.options.attachment) {\n        throw new Error('Tether Error: You must provide an attachment');\n      }\n\n      this.targetAttachment = parseAttachment(this.options.targetAttachment);\n      this.attachment = parseAttachment(this.options.attachment);\n      this.offset = parseOffset(this.options.offset);\n      this.targetOffset = parseOffset(this.options.targetOffset);\n\n      if (typeof this.scrollParents !== 'undefined') {\n        this.disable();\n      }\n\n      if (this.targetModifier === 'scroll-handle') {\n        this.scrollParents = [this.target];\n      } else {\n        this.scrollParents = getScrollParents(this.target);\n      }\n\n      if (!(this.options.enabled === false)) {\n        this.enable(pos);\n      }\n    }\n  }, {\n    key: 'getTargetBounds',\n    value: function getTargetBounds() {\n      if (typeof this.targetModifier !== 'undefined') {\n        if (this.targetModifier === 'visible') {\n          if (this.target === document.body) {\n            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };\n          } else {\n            var bounds = getBounds(this.target);\n\n            var out = {\n              height: bounds.height,\n              width: bounds.width,\n              top: bounds.top,\n              left: bounds.left\n            };\n\n            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));\n            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));\n            out.height = Math.min(innerHeight, out.height);\n            out.height -= 2;\n\n            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));\n            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));\n            out.width = Math.min(innerWidth, out.width);\n            out.width -= 2;\n\n            if (out.top < pageYOffset) {\n              out.top = pageYOffset;\n            }\n            if (out.left < pageXOffset) {\n              out.left = pageXOffset;\n            }\n\n            return out;\n          }\n        } else if (this.targetModifier === 'scroll-handle') {\n          var bounds = undefined;\n          var target = this.target;\n          if (target === document.body) {\n            target = document.documentElement;\n\n            bounds = {\n              left: pageXOffset,\n              top: pageYOffset,\n              height: innerHeight,\n              width: innerWidth\n            };\n          } else {\n            bounds = getBounds(target);\n          }\n\n          var style = getComputedStyle(target);\n\n          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;\n\n          var scrollBottom = 0;\n          if (hasBottomScroll) {\n            scrollBottom = 15;\n          }\n\n          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;\n\n          var out = {\n            width: 15,\n            height: height * 0.975 * (height / target.scrollHeight),\n            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15\n          };\n\n          var fitAdj = 0;\n          if (height < 408 && this.target === document.body) {\n            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;\n          }\n\n          if (this.target !== document.body) {\n            out.height = Math.max(out.height, 24);\n          }\n\n          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);\n          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);\n\n          if (this.target === document.body) {\n            out.height = Math.max(out.height, 24);\n          }\n\n          return out;\n        }\n      } else {\n        return getBounds(this.target);\n      }\n    }\n  }, {\n    key: 'clearCache',\n    value: function clearCache() {\n      this._cache = {};\n    }\n  }, {\n    key: 'cache',\n    value: function cache(k, getter) {\n      // More than one module will often need the same DOM info, so\n      // we keep a cache which is cleared on each position call\n      if (typeof this._cache === 'undefined') {\n        this._cache = {};\n      }\n\n      if (typeof this._cache[k] === 'undefined') {\n        this._cache[k] = getter.call(this);\n      }\n\n      return this._cache[k];\n    }\n  }, {\n    key: 'enable',\n    value: function enable() {\n      var _this3 = this;\n\n      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      if (!(this.options.addTargetClasses === false)) {\n        addClass(this.target, this.getClass('enabled'));\n      }\n      addClass(this.element, this.getClass('enabled'));\n      this.enabled = true;\n\n      this.scrollParents.forEach(function (parent) {\n        if (parent !== _this3.target.ownerDocument) {\n          parent.addEventListener('scroll', _this3.position);\n        }\n      });\n\n      if (pos) {\n        this.position();\n      }\n    }\n  }, {\n    key: 'disable',\n    value: function disable() {\n      var _this4 = this;\n\n      removeClass(this.target, this.getClass('enabled'));\n      removeClass(this.element, this.getClass('enabled'));\n      this.enabled = false;\n\n      if (typeof this.scrollParents !== 'undefined') {\n        this.scrollParents.forEach(function (parent) {\n          parent.removeEventListener('scroll', _this4.position);\n        });\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this5 = this;\n\n      this.disable();\n\n      tethers.forEach(function (tether, i) {\n        if (tether === _this5) {\n          tethers.splice(i, 1);\n        }\n      });\n\n      // Remove any elements we were using for convenience from the DOM\n      if (tethers.length === 0) {\n        removeUtilElements();\n      }\n    }\n  }, {\n    key: 'updateAttachClasses',\n    value: function updateAttachClasses(elementAttach, targetAttach) {\n      var _this6 = this;\n\n      elementAttach = elementAttach || this.attachment;\n      targetAttach = targetAttach || this.targetAttachment;\n      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];\n\n      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {\n        // updateAttachClasses can be called more than once in a position call, so\n        // we need to clean up after ourselves such that when the last defer gets\n        // ran it doesn't add any extra classes from previous calls.\n        this._addAttachClasses.splice(0, this._addAttachClasses.length);\n      }\n\n      if (typeof this._addAttachClasses === 'undefined') {\n        this._addAttachClasses = [];\n      }\n      var add = this._addAttachClasses;\n\n      if (elementAttach.top) {\n        add.push(this.getClass('element-attached') + '-' + elementAttach.top);\n      }\n      if (elementAttach.left) {\n        add.push(this.getClass('element-attached') + '-' + elementAttach.left);\n      }\n      if (targetAttach.top) {\n        add.push(this.getClass('target-attached') + '-' + targetAttach.top);\n      }\n      if (targetAttach.left) {\n        add.push(this.getClass('target-attached') + '-' + targetAttach.left);\n      }\n\n      var all = [];\n      sides.forEach(function (side) {\n        all.push(_this6.getClass('element-attached') + '-' + side);\n        all.push(_this6.getClass('target-attached') + '-' + side);\n      });\n\n      defer(function () {\n        if (!(typeof _this6._addAttachClasses !== 'undefined')) {\n          return;\n        }\n\n        updateClasses(_this6.element, _this6._addAttachClasses, all);\n        if (!(_this6.options.addTargetClasses === false)) {\n          updateClasses(_this6.target, _this6._addAttachClasses, all);\n        }\n\n        delete _this6._addAttachClasses;\n      });\n    }\n  }, {\n    key: 'position',\n    value: function position() {\n      var _this7 = this;\n\n      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      // flushChanges commits the changes immediately, leave true unless you are positioning multiple\n      // tethers (in which case call Tether.Utils.flush yourself when you're done)\n\n      if (!this.enabled) {\n        return;\n      }\n\n      this.clearCache();\n\n      // Turn 'auto' attachments into the appropriate corner or edge\n      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);\n\n      this.updateAttachClasses(this.attachment, targetAttachment);\n\n      var elementPos = this.cache('element-bounds', function () {\n        return getBounds(_this7.element);\n      });\n\n      var width = elementPos.width;\n      var height = elementPos.height;\n\n      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {\n        var _lastSize = this.lastSize;\n\n        // We cache the height and width to make it possible to position elements that are\n        // getting hidden.\n        width = _lastSize.width;\n        height = _lastSize.height;\n      } else {\n        this.lastSize = { width: width, height: height };\n      }\n\n      var targetPos = this.cache('target-bounds', function () {\n        return _this7.getTargetBounds();\n      });\n      var targetSize = targetPos;\n\n      // Get an actual px offset from the attachment\n      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });\n      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);\n\n      var manualOffset = offsetToPx(this.offset, { width: width, height: height });\n      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);\n\n      // Add the manually provided offset\n      offset = addOffset(offset, manualOffset);\n      targetOffset = addOffset(targetOffset, manualTargetOffset);\n\n      // It's now our goal to make (element position + offset) == (target position + target offset)\n      var left = targetPos.left + targetOffset.left - offset.left;\n      var top = targetPos.top + targetOffset.top - offset.top;\n\n      for (var i = 0; i < TetherBase.modules.length; ++i) {\n        var _module2 = TetherBase.modules[i];\n        var ret = _module2.position.call(this, {\n          left: left,\n          top: top,\n          targetAttachment: targetAttachment,\n          targetPos: targetPos,\n          elementPos: elementPos,\n          offset: offset,\n          targetOffset: targetOffset,\n          manualOffset: manualOffset,\n          manualTargetOffset: manualTargetOffset,\n          scrollbarSize: scrollbarSize,\n          attachment: this.attachment\n        });\n\n        if (ret === false) {\n          return false;\n        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {\n          continue;\n        } else {\n          top = ret.top;\n          left = ret.left;\n        }\n      }\n\n      // We describe the position three different ways to give the optimizer\n      // a chance to decide the best possible way to position the element\n      // with the fewest repaints.\n      var next = {\n        // It's position relative to the page (absolute positioning when\n        // the element is a child of the body)\n        page: {\n          top: top,\n          left: left\n        },\n\n        // It's position relative to the viewport (fixed positioning)\n        viewport: {\n          top: top - pageYOffset,\n          bottom: pageYOffset - top - height + innerHeight,\n          left: left - pageXOffset,\n          right: pageXOffset - left - width + innerWidth\n        }\n      };\n\n      var doc = this.target.ownerDocument;\n      var win = doc.defaultView;\n\n      var scrollbarSize = undefined;\n      if (win.innerHeight > doc.documentElement.clientHeight) {\n        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);\n        next.viewport.bottom -= scrollbarSize.height;\n      }\n\n      if (win.innerWidth > doc.documentElement.clientWidth) {\n        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);\n        next.viewport.right -= scrollbarSize.width;\n      }\n\n      if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {\n        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'\n        next.page.bottom = doc.body.scrollHeight - top - height;\n        next.page.right = doc.body.scrollWidth - left - width;\n      }\n\n      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {\n        (function () {\n          var offsetParent = _this7.cache('target-offsetparent', function () {\n            return getOffsetParent(_this7.target);\n          });\n          var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {\n            return getBounds(offsetParent);\n          });\n          var offsetParentStyle = getComputedStyle(offsetParent);\n          var offsetParentSize = offsetPosition;\n\n          var offsetBorder = {};\n          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {\n            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);\n          });\n\n          offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;\n          offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;\n\n          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {\n            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {\n              // We're within the visible part of the target's scroll parent\n              var scrollTop = offsetParent.scrollTop;\n              var scrollLeft = offsetParent.scrollLeft;\n\n              // It's position relative to the target's offset parent (absolute positioning when\n              // the element is moved to be a child of the target's offset parent).\n              next.offset = {\n                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,\n                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left\n              };\n            }\n          }\n        })();\n      }\n\n      // We could also travel up the DOM and try each containing context, rather than only\n      // looking at the body, but we're gonna get diminishing returns.\n\n      this.move(next);\n\n      this.history.unshift(next);\n\n      if (this.history.length > 3) {\n        this.history.pop();\n      }\n\n      if (flushChanges) {\n        flush();\n      }\n\n      return true;\n    }\n\n    // THE ISSUE\n  }, {\n    key: 'move',\n    value: function move(pos) {\n      var _this8 = this;\n\n      if (!(typeof this.element.parentNode !== 'undefined')) {\n        return;\n      }\n\n      var same = {};\n\n      for (var type in pos) {\n        same[type] = {};\n\n        for (var key in pos[type]) {\n          var found = false;\n\n          for (var i = 0; i < this.history.length; ++i) {\n            var point = this.history[i];\n            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {\n              found = true;\n              break;\n            }\n          }\n\n          if (!found) {\n            same[type][key] = true;\n          }\n        }\n      }\n\n      var css = { top: '', left: '', right: '', bottom: '' };\n\n      var transcribe = function transcribe(_same, _pos) {\n        var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';\n        var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;\n        if (gpu !== false) {\n          var yPos = undefined,\n              xPos = undefined;\n          if (_same.top) {\n            css.top = 0;\n            yPos = _pos.top;\n          } else {\n            css.bottom = 0;\n            yPos = -_pos.bottom;\n          }\n\n          if (_same.left) {\n            css.left = 0;\n            xPos = _pos.left;\n          } else {\n            css.right = 0;\n            xPos = -_pos.right;\n          }\n\n          if (window.matchMedia) {\n            // HubSpot/tether#207\n            var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;\n            if (!retina) {\n              xPos = Math.round(xPos);\n              yPos = Math.round(yPos);\n            }\n          }\n\n          css[transformKey] = 'translateX(' + xPos + 'px) translateY(' + yPos + 'px)';\n\n          if (transformKey !== 'msTransform') {\n            // The Z transform will keep this in the GPU (faster, and prevents artifacts),\n            // but IE9 doesn't support 3d transforms and will choke.\n            css[transformKey] += \" translateZ(0)\";\n          }\n        } else {\n          if (_same.top) {\n            css.top = _pos.top + 'px';\n          } else {\n            css.bottom = _pos.bottom + 'px';\n          }\n\n          if (_same.left) {\n            css.left = _pos.left + 'px';\n          } else {\n            css.right = _pos.right + 'px';\n          }\n        }\n      };\n\n      var moved = false;\n      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {\n        css.position = 'absolute';\n        transcribe(same.page, pos.page);\n      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {\n        css.position = 'fixed';\n        transcribe(same.viewport, pos.viewport);\n      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {\n        (function () {\n          css.position = 'absolute';\n          var offsetParent = _this8.cache('target-offsetparent', function () {\n            return getOffsetParent(_this8.target);\n          });\n\n          if (getOffsetParent(_this8.element) !== offsetParent) {\n            defer(function () {\n              _this8.element.parentNode.removeChild(_this8.element);\n              offsetParent.appendChild(_this8.element);\n            });\n          }\n\n          transcribe(same.offset, pos.offset);\n          moved = true;\n        })();\n      } else {\n        css.position = 'absolute';\n        transcribe({ top: true, left: true }, pos.page);\n      }\n\n      if (!moved) {\n        if (this.options.bodyElement) {\n          this.options.bodyElement.appendChild(this.element);\n        } else {\n          var offsetParentIsBody = true;\n          var currentNode = this.element.parentNode;\n          while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {\n            if (getComputedStyle(currentNode).position !== 'static') {\n              offsetParentIsBody = false;\n              break;\n            }\n\n            currentNode = currentNode.parentNode;\n          }\n\n          if (!offsetParentIsBody) {\n            this.element.parentNode.removeChild(this.element);\n            this.element.ownerDocument.body.appendChild(this.element);\n          }\n        }\n      }\n\n      // Any css change will trigger a repaint, so let's avoid one if nothing changed\n      var writeCSS = {};\n      var write = false;\n      for (var key in css) {\n        var val = css[key];\n        var elVal = this.element.style[key];\n\n        if (elVal !== val) {\n          write = true;\n          writeCSS[key] = val;\n        }\n      }\n\n      if (write) {\n        defer(function () {\n          extend(_this8.element.style, writeCSS);\n          _this8.trigger('repositioned');\n        });\n      }\n    }\n  }]);\n\n  return TetherClass;\n})(Evented);\n\nTetherClass.modules = [];\n\nTetherBase.position = position;\n\nvar Tether = extend(TetherClass, TetherBase);\n/* globals TetherBase */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _TetherBase$Utils = TetherBase.Utils;\nvar getBounds = _TetherBase$Utils.getBounds;\nvar extend = _TetherBase$Utils.extend;\nvar updateClasses = _TetherBase$Utils.updateClasses;\nvar defer = _TetherBase$Utils.defer;\n\nvar BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];\n\nfunction getBoundingRect(tether, to) {\n  if (to === 'scrollParent') {\n    to = tether.scrollParents[0];\n  } else if (to === 'window') {\n    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];\n  }\n\n  if (to === document) {\n    to = to.documentElement;\n  }\n\n  if (typeof to.nodeType !== 'undefined') {\n    (function () {\n      var node = to;\n      var size = getBounds(to);\n      var pos = size;\n      var style = getComputedStyle(to);\n\n      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];\n\n      // Account any parent Frames scroll offset\n      if (node.ownerDocument !== document) {\n        var win = node.ownerDocument.defaultView;\n        to[0] += win.pageXOffset;\n        to[1] += win.pageYOffset;\n        to[2] += win.pageXOffset;\n        to[3] += win.pageYOffset;\n      }\n\n      BOUNDS_FORMAT.forEach(function (side, i) {\n        side = side[0].toUpperCase() + side.substr(1);\n        if (side === 'Top' || side === 'Left') {\n          to[i] += parseFloat(style['border' + side + 'Width']);\n        } else {\n          to[i] -= parseFloat(style['border' + side + 'Width']);\n        }\n      });\n    })();\n  }\n\n  return to;\n}\n\nTetherBase.modules.push({\n  position: function position(_ref) {\n    var _this = this;\n\n    var top = _ref.top;\n    var left = _ref.left;\n    var targetAttachment = _ref.targetAttachment;\n\n    if (!this.options.constraints) {\n      return true;\n    }\n\n    var _cache = this.cache('element-bounds', function () {\n      return getBounds(_this.element);\n    });\n\n    var height = _cache.height;\n    var width = _cache.width;\n\n    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {\n      var _lastSize = this.lastSize;\n\n      // Handle the item getting hidden as a result of our positioning without glitching\n      // the classes in and out\n      width = _lastSize.width;\n      height = _lastSize.height;\n    }\n\n    var targetSize = this.cache('target-bounds', function () {\n      return _this.getTargetBounds();\n    });\n\n    var targetHeight = targetSize.height;\n    var targetWidth = targetSize.width;\n\n    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];\n\n    this.options.constraints.forEach(function (constraint) {\n      var outOfBoundsClass = constraint.outOfBoundsClass;\n      var pinnedClass = constraint.pinnedClass;\n\n      if (outOfBoundsClass) {\n        allClasses.push(outOfBoundsClass);\n      }\n      if (pinnedClass) {\n        allClasses.push(pinnedClass);\n      }\n    });\n\n    allClasses.forEach(function (cls) {\n      ['left', 'top', 'right', 'bottom'].forEach(function (side) {\n        allClasses.push(cls + '-' + side);\n      });\n    });\n\n    var addClasses = [];\n\n    var tAttachment = extend({}, targetAttachment);\n    var eAttachment = extend({}, this.attachment);\n\n    this.options.constraints.forEach(function (constraint) {\n      var to = constraint.to;\n      var attachment = constraint.attachment;\n      var pin = constraint.pin;\n\n      if (typeof attachment === 'undefined') {\n        attachment = '';\n      }\n\n      var changeAttachX = undefined,\n          changeAttachY = undefined;\n      if (attachment.indexOf(' ') >= 0) {\n        var _attachment$split = attachment.split(' ');\n\n        var _attachment$split2 = _slicedToArray(_attachment$split, 2);\n\n        changeAttachY = _attachment$split2[0];\n        changeAttachX = _attachment$split2[1];\n      } else {\n        changeAttachX = changeAttachY = attachment;\n      }\n\n      var bounds = getBoundingRect(_this, to);\n\n      if (changeAttachY === 'target' || changeAttachY === 'both') {\n        if (top < bounds[1] && tAttachment.top === 'top') {\n          top += targetHeight;\n          tAttachment.top = 'bottom';\n        }\n\n        if (top + height > bounds[3] && tAttachment.top === 'bottom') {\n          top -= targetHeight;\n          tAttachment.top = 'top';\n        }\n      }\n\n      if (changeAttachY === 'together') {\n        if (tAttachment.top === 'top') {\n          if (eAttachment.top === 'bottom' && top < bounds[1]) {\n            top += targetHeight;\n            tAttachment.top = 'bottom';\n\n            top += height;\n            eAttachment.top = 'top';\n          } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {\n            top -= height - targetHeight;\n            tAttachment.top = 'bottom';\n\n            eAttachment.top = 'bottom';\n          }\n        }\n\n        if (tAttachment.top === 'bottom') {\n          if (eAttachment.top === 'top' && top + height > bounds[3]) {\n            top -= targetHeight;\n            tAttachment.top = 'top';\n\n            top -= height;\n            eAttachment.top = 'bottom';\n          } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {\n            top += height - targetHeight;\n            tAttachment.top = 'top';\n\n            eAttachment.top = 'top';\n          }\n        }\n\n        if (tAttachment.top === 'middle') {\n          if (top + height > bounds[3] && eAttachment.top === 'top') {\n            top -= height;\n            eAttachment.top = 'bottom';\n          } else if (top < bounds[1] && eAttachment.top === 'bottom') {\n            top += height;\n            eAttachment.top = 'top';\n          }\n        }\n      }\n\n      if (changeAttachX === 'target' || changeAttachX === 'both') {\n        if (left < bounds[0] && tAttachment.left === 'left') {\n          left += targetWidth;\n          tAttachment.left = 'right';\n        }\n\n        if (left + width > bounds[2] && tAttachment.left === 'right') {\n          left -= targetWidth;\n          tAttachment.left = 'left';\n        }\n      }\n\n      if (changeAttachX === 'together') {\n        if (left < bounds[0] && tAttachment.left === 'left') {\n          if (eAttachment.left === 'right') {\n            left += targetWidth;\n            tAttachment.left = 'right';\n\n            left += width;\n            eAttachment.left = 'left';\n          } else if (eAttachment.left === 'left') {\n            left += targetWidth;\n            tAttachment.left = 'right';\n\n            left -= width;\n            eAttachment.left = 'right';\n          }\n        } else if (left + width > bounds[2] && tAttachment.left === 'right') {\n          if (eAttachment.left === 'left') {\n            left -= targetWidth;\n            tAttachment.left = 'left';\n\n            left -= width;\n            eAttachment.left = 'right';\n          } else if (eAttachment.left === 'right') {\n            left -= targetWidth;\n            tAttachment.left = 'left';\n\n            left += width;\n            eAttachment.left = 'left';\n          }\n        } else if (tAttachment.left === 'center') {\n          if (left + width > bounds[2] && eAttachment.left === 'left') {\n            left -= width;\n            eAttachment.left = 'right';\n          } else if (left < bounds[0] && eAttachment.left === 'right') {\n            left += width;\n            eAttachment.left = 'left';\n          }\n        }\n      }\n\n      if (changeAttachY === 'element' || changeAttachY === 'both') {\n        if (top < bounds[1] && eAttachment.top === 'bottom') {\n          top += height;\n          eAttachment.top = 'top';\n        }\n\n        if (top + height > bounds[3] && eAttachment.top === 'top') {\n          top -= height;\n          eAttachment.top = 'bottom';\n        }\n      }\n\n      if (changeAttachX === 'element' || changeAttachX === 'both') {\n        if (left < bounds[0]) {\n          if (eAttachment.left === 'right') {\n            left += width;\n            eAttachment.left = 'left';\n          } else if (eAttachment.left === 'center') {\n            left += width / 2;\n            eAttachment.left = 'left';\n          }\n        }\n\n        if (left + width > bounds[2]) {\n          if (eAttachment.left === 'left') {\n            left -= width;\n            eAttachment.left = 'right';\n          } else if (eAttachment.left === 'center') {\n            left -= width / 2;\n            eAttachment.left = 'right';\n          }\n        }\n      }\n\n      if (typeof pin === 'string') {\n        pin = pin.split(',').map(function (p) {\n          return p.trim();\n        });\n      } else if (pin === true) {\n        pin = ['top', 'left', 'right', 'bottom'];\n      }\n\n      pin = pin || [];\n\n      var pinned = [];\n      var oob = [];\n\n      if (top < bounds[1]) {\n        if (pin.indexOf('top') >= 0) {\n          top = bounds[1];\n          pinned.push('top');\n        } else {\n          oob.push('top');\n        }\n      }\n\n      if (top + height > bounds[3]) {\n        if (pin.indexOf('bottom') >= 0) {\n          top = bounds[3] - height;\n          pinned.push('bottom');\n        } else {\n          oob.push('bottom');\n        }\n      }\n\n      if (left < bounds[0]) {\n        if (pin.indexOf('left') >= 0) {\n          left = bounds[0];\n          pinned.push('left');\n        } else {\n          oob.push('left');\n        }\n      }\n\n      if (left + width > bounds[2]) {\n        if (pin.indexOf('right') >= 0) {\n          left = bounds[2] - width;\n          pinned.push('right');\n        } else {\n          oob.push('right');\n        }\n      }\n\n      if (pinned.length) {\n        (function () {\n          var pinnedClass = undefined;\n          if (typeof _this.options.pinnedClass !== 'undefined') {\n            pinnedClass = _this.options.pinnedClass;\n          } else {\n            pinnedClass = _this.getClass('pinned');\n          }\n\n          addClasses.push(pinnedClass);\n          pinned.forEach(function (side) {\n            addClasses.push(pinnedClass + '-' + side);\n          });\n        })();\n      }\n\n      if (oob.length) {\n        (function () {\n          var oobClass = undefined;\n          if (typeof _this.options.outOfBoundsClass !== 'undefined') {\n            oobClass = _this.options.outOfBoundsClass;\n          } else {\n            oobClass = _this.getClass('out-of-bounds');\n          }\n\n          addClasses.push(oobClass);\n          oob.forEach(function (side) {\n            addClasses.push(oobClass + '-' + side);\n          });\n        })();\n      }\n\n      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {\n        eAttachment.left = tAttachment.left = false;\n      }\n      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {\n        eAttachment.top = tAttachment.top = false;\n      }\n\n      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {\n        _this.updateAttachClasses(eAttachment, tAttachment);\n        _this.trigger('update', {\n          attachment: eAttachment,\n          targetAttachment: tAttachment\n        });\n      }\n    });\n\n    defer(function () {\n      if (!(_this.options.addTargetClasses === false)) {\n        updateClasses(_this.target, addClasses, allClasses);\n      }\n      updateClasses(_this.element, addClasses, allClasses);\n    });\n\n    return { top: top, left: left };\n  }\n});\n/* globals TetherBase */\n\n'use strict';\n\nvar _TetherBase$Utils = TetherBase.Utils;\nvar getBounds = _TetherBase$Utils.getBounds;\nvar updateClasses = _TetherBase$Utils.updateClasses;\nvar defer = _TetherBase$Utils.defer;\n\nTetherBase.modules.push({\n  position: function position(_ref) {\n    var _this = this;\n\n    var top = _ref.top;\n    var left = _ref.left;\n\n    var _cache = this.cache('element-bounds', function () {\n      return getBounds(_this.element);\n    });\n\n    var height = _cache.height;\n    var width = _cache.width;\n\n    var targetPos = this.getTargetBounds();\n\n    var bottom = top + height;\n    var right = left + width;\n\n    var abutted = [];\n    if (top <= targetPos.bottom && bottom >= targetPos.top) {\n      ['left', 'right'].forEach(function (side) {\n        var targetPosSide = targetPos[side];\n        if (targetPosSide === left || targetPosSide === right) {\n          abutted.push(side);\n        }\n      });\n    }\n\n    if (left <= targetPos.right && right >= targetPos.left) {\n      ['top', 'bottom'].forEach(function (side) {\n        var targetPosSide = targetPos[side];\n        if (targetPosSide === top || targetPosSide === bottom) {\n          abutted.push(side);\n        }\n      });\n    }\n\n    var allClasses = [];\n    var addClasses = [];\n\n    var sides = ['left', 'top', 'right', 'bottom'];\n    allClasses.push(this.getClass('abutted'));\n    sides.forEach(function (side) {\n      allClasses.push(_this.getClass('abutted') + '-' + side);\n    });\n\n    if (abutted.length) {\n      addClasses.push(this.getClass('abutted'));\n    }\n\n    abutted.forEach(function (side) {\n      addClasses.push(_this.getClass('abutted') + '-' + side);\n    });\n\n    defer(function () {\n      if (!(_this.options.addTargetClasses === false)) {\n        updateClasses(_this.target, addClasses, allClasses);\n      }\n      updateClasses(_this.element, addClasses, allClasses);\n    });\n\n    return true;\n  }\n});\n/* globals TetherBase */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nTetherBase.modules.push({\n  position: function position(_ref) {\n    var top = _ref.top;\n    var left = _ref.left;\n\n    if (!this.options.shift) {\n      return;\n    }\n\n    var shift = this.options.shift;\n    if (typeof this.options.shift === 'function') {\n      shift = this.options.shift.call(this, { top: top, left: left });\n    }\n\n    var shiftTop = undefined,\n        shiftLeft = undefined;\n    if (typeof shift === 'string') {\n      shift = shift.split(' ');\n      shift[1] = shift[1] || shift[0];\n\n      var _shift = shift;\n\n      var _shift2 = _slicedToArray(_shift, 2);\n\n      shiftTop = _shift2[0];\n      shiftLeft = _shift2[1];\n\n      shiftTop = parseFloat(shiftTop, 10);\n      shiftLeft = parseFloat(shiftLeft, 10);\n    } else {\n      shiftTop = shift.top;\n      shiftLeft = shift.left;\n    }\n\n    top += shiftTop;\n    left += shiftLeft;\n\n    return { top: top, left: left };\n  }\n});\nreturn Tether;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tether/dist/js/tether.js\n// module id = 13\n// module chunks = 0","(function(root, factory){\n\n\t//UMD\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine(function() {\n\t\t\treturn factory();\n\t\t});\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t *          a lot of methods and functionality to all classes that extend\n\t\t *          it. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t    var Tone = function (inputs, outputs) {\n\t        /**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(inputs) || inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        /**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(outputs) || outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which \n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds. \n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (this.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (this.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (this.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (this.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (this.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (this.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (this.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!this.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!this.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCLASS VARS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (this.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (this.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        if (!this.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!this.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Array.isArray(this.output)) {\n\t            outputNum = this.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (this.isArray(this.output)) {\n\t            if (this.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = this.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connectSeries = function () {\n\t        if (arguments.length > 1) {\n\t            var currentUnit = arguments[0];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.chain = function () {\n\t        if (arguments.length > 0) {\n\t            var currentUnit = this;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.fan = function () {\n\t        if (arguments.length > 0) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.connect(arguments[i]);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    //give native nodes chain and fan methods\n\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUTILITIES / HELPERS / MATHS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both \n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property. \n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop.\n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return this.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    /**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t        var options = {};\n\t        if (values.length === 1 && this.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!this.isUndef(defaults)) {\n\t            return this.defaultArg(options, defaults);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t */\n\t    Tone.prototype.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t */\n\t    Tone.prototype.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t */\n\t    Tone.prototype.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t */\n\t    Tone.prototype.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t */\n\t    Tone.prototype.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states. \n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t */\n\t    Tone.prototype.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}   \n\t\t */\n\t    Tone.prototype.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}   \n\t\t */\n\t    Tone.prototype.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.prototype.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes. \n\t\t *  @private\n\t\t *  @type {Tone.Context|undefined}\n\t\t */\n\t    var audioContext;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            if (Tone.Context) {\n\t                Tone.Context.emit('init', audioContext);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    Tone.version = 'r10';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t    };\n\t    Tone.extend(Tone.SignalBase);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t        } else if (this.isFunction(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t                //default units\n\t                units = this.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (this.isString(val)) {\n\t                this.set(val);\n\t            } else if (this.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!this.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!this.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (this.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (this.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!this.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = this.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @override\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * this.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz. \n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value. \n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.prototype.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function (context) {\n\t        Tone.Emitter.call(this);\n\t        if (!context) {\n\t            context = new window.AudioContext();\n\t        }\n\t        this._context = context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = 'interactive';\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lookAhead = 0.1;\n\t        /**\n\t\t\t *  How often the update look runs\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._updateInterval = this._lookAhead / 3;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t *  @private\n\t\t\t *  @type  {WebWorker}\n\t\t\t */\n\t        this._worker = this._createWorker();\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (this.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime;\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.addEventListener('message', function () {\n\t            // tick the clock\n\t            this.emit('tick');\n\t        }.bind(this));\n\t        //lag compensation\n\t        worker.addEventListener('message', function () {\n\t            var now = this.now();\n\t            if (this.isNumber(this._lastUpdate)) {\n\t                var diff = now - this._lastUpdate;\n\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t            }\n\t            this._lastUpdate = now;\n\t        }.bind(this));\n\t        return worker;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  This is the time that the clock is falling behind\n\t\t *  the scheduled update interval. The Context automatically\n\t\t *  adjusts for the lag and schedules further in advance.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lag\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t        get: function () {\n\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t            diff = Math.max(diff, 0);\n\t            return diff;\n\t        }\n\t    });\n\t    /**\n\t\t *  The amount of time in advance that events are scheduled.\n\t\t *  The lookAhead will adjust slightly in response to the \n\t\t *  measured update time to try to avoid clicks.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lookAhead\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t        get: function () {\n\t            return this._lookAhead;\n\t        },\n\t        set: function (lA) {\n\t            this._lookAhead = lA;\n\t        }\n\t    });\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name updateInterval\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @static\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (this.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    function shimConnect() {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                if (Array.isArray(B.input)) {\n\t                    if (Tone.prototype.isUndef(inNum)) {\n\t                        inNum = 0;\n\t                    }\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Array.isArray(B.input)) {\n\t                if (Tone.prototype.isUndef(inNum)) {\n\t                    inNum = 0;\n\t                }\n\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    }\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        shimConnect();\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /** \n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  <ul>\n\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t *  </ul>\n\t\t\t *  \n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value. \n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /** \n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /** \n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /** \n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /** \n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t *  is twice is loud. \n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /** \n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /** \n\t\t\t *  Beats per minute. \n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /** \n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /** \n\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /** \n\t\t\t *  Angle between 0 and 360. \n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /** \n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /** \n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /** \n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /** \n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /** \n\t\t\t *  A frequency represented by a letter name, \n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /** \n\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /** \n\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /** \n\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t *  <ul>\n\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t *  </ul>\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time \n\t\t *  @return {Seconds} \n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (this.isNumber(time)) {\n\t            return time;\n\t        } else if (this.isUndef(time)) {\n\t            return this.now();\n\t        } else if (this.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq \n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (this.isNumber(freq)) {\n\t            return freq;\n\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (this.isNumber(time) || this.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (this.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter. \n\t\t *  @extends {Tone}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param.defaults);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by \n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = null;\n\t        if (this.isObject(options.lfo)) {\n\t            this.value = options.lfo;\n\t        } else if (!this.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter. \n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            if (this.isObject(value)) {\n\t                //throw an error if the LFO needs to be included\n\t                if (this.isUndef(Tone.LFO)) {\n\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t                }\n\t                //remove the old one\n\t                if (this._lfo) {\n\t                    this._lfo.dispose();\n\t                }\n\t                this._lfo = new Tone.LFO(value).start();\n\t                this._lfo.connect(this.input);\n\t            } else {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._param.cancelScheduledValues(0);\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return this.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return this.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        value = this._fromUnits(value);\n\t        time = this.toSeconds(time);\n\t        if (time <= this.now() + this.blockTime) {\n\t            this._param.value = value;\n\t        } else {\n\t            this._param.setValueAtTime(value, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to \n\t\t *  schedule changes from the current value. \n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = this.defaultArg(now, this.now());\n\t        var currentVal = this._param.value;\n\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t * signal.exponentialRampToValue(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t * signal.linearRampToValue(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Param} this \n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array} values    \n\t\t *  @param {Time} startTime \n\t\t *  @param {Time} duration  \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        for (var i = 0; i < values.length; i++) {\n\t            values[i] = this._fromUnits(values[i]);\n\t        }\n\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially \n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = this.defaultArg(rampTime, 0);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampToValue(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The LFO created by the signal instance. If none\n\t\t *  was created, this is null.\n\t\t *  @type {Tone.LFO}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Param#\n\t\t *  @name lfo\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t        get: function () {\n\t            return this._lfo;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param = null;\n\t        if (this._lfo) {\n\t            this._lfo.dispose();\n\t            this._lfo = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain.defaults);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    //STATIC///////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  input   The number of inputs\n\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t *  @return  {Tone}  this\n\t\t *  @internal\n\t\t */\n\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = new Tone.Gain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = new Tone.Gain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._gain = this.context.createGain();\n\t        options.param = this._gain.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this._gain.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).chain(this._gain);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._gain.disconnect();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t *         Internally, events are stored in time order for fast \n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list. \n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t *                           timeline. \n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (this.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._timeline.length) {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t        } else {\n\t            this._timeline.push(event);\n\t        }\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time) {\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t        var index = this._search(time);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        if (this._timeline.length) {\n\t            var index = this._search(time);\n\t            if (index >= 0) {\n\t                this._timeline = this._timeline.slice(index + 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Does a binary serach on the timeline array and returns the \n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time  \n\t\t *  @return  {Number} the index in the timeline array \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time) {\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event.time === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent.time === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event.time < time && nextEvent.time > time) {\n\t                return midPoint;\n\t            } else if (event.time > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else if (event.time < time) {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for \n\t\t *  removing items from the array. \n\t\t *  @param  {Function}  callback \n\t\t *  @param  {Number=}    lowerBound     \n\t\t *  @param  {Number=}    upperBound    \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback(this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        if (this._toRemove.length > 0) {\n\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t                if (index !== -1) {\n\t                    this._timeline.splice(index, 1);\n\t                }\n\t            }\n\t            this._toRemove = [];\n\t        }\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback(event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(10);\n\t        //constructors\n\t        Tone.Signal.apply(this, options);\n\t        options.param = this._param;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Curve: 'curve',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal. \n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._initial = convertedVal;\n\t            this.cancelScheduledValues();\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = this.defaultArg(scaling, 1);\n\t        //copy the array\n\t        var floats = new Array(values.length);\n\t        for (var i = 0; i < floats.length; i++) {\n\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        duration = this.toSeconds(duration);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Curve,\n\t            'value': floats,\n\t            'time': startTime,\n\t            'duration': duration\n\t        });\n\t        //set the first value\n\t        this._param.setValueAtTime(floats[0], startTime);\n\t        //schedule a lienar ramp for each of the segments\n\t        for (var j = 1; j < floats.length; j++) {\n\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after \n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t            //if the curve is still playing\n\t            //cancel the curve\n\t            this.cancelScheduledValues(time);\n\t            this.linearRampToValueAtTime(val, time);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t            this.setValueAtTime(val, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previouVal;\n\t            if (previous === null) {\n\t                previouVal = this._initial;\n\t            } else {\n\t                previouVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t        var len = curve.length;\n\t        // If time is after duration, return the last curve value\n\t        if (time >= start + duration) {\n\t            return curve[len - 1];\n\t        } else if (time <= start) {\n\t            return curve[0];\n\t        } else {\n\t            var progress = (time - start) / duration;\n\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t            var lowerVal = curve[lowerIndex];\n\t            var upperVal = curve[upperIndex];\n\t            if (upperIndex === lowerIndex) {\n\t                return lowerVal;\n\t            } else {\n\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = this.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t *                         0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        /** \n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value \n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for \n\t\t * syncronizing visual output to the envelope. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack. \n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (this.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (this.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (this.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (this.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = this.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampToValue(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampToValue(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.exponentialRampToValue(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (this.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease. \n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal. \n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves. \n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t *                               0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        this.input = null;\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's \n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser.defaults);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The return type of the analysis\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._returnType = options.returnType;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t        this.returnType = options.returnType;\n\t        this.minDecibels = options.minDecibels;\n\t        this.maxDecibels = options.maxDecibels;\n\t    };\n\t    Tone.extend(Tone.Analyser);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'returnType': 'byte',\n\t        'type': 'fft',\n\t        'smoothing': 0.8,\n\t        'maxDecibels': -30,\n\t        'minDecibels': -100\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t *  byte values are between [0,255]. float values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.ReturnType = {\n\t        Byte: 'byte',\n\t        Float: 'float'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the \n\t\t *  result as a TypedArray. \n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.analyse = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteFrequencyData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t            }\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t            }\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t *  are between 0-255. \"float\" values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t        get: function () {\n\t            return this._returnType;\n\t        },\n\t        set: function (type) {\n\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t            } else {\n\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t            }\n\t            this._returnType = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name minDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t        get: function () {\n\t            return this._analyser.minDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.minDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name maxDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t        get: function () {\n\t            return this._analyser.maxDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.maxDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor.defaults);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = this.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param.dispose();\n\t        this._param = null;\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = this.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!this.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (this.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (this.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return this.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t *          (default), -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter.defaults);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            this.connectSeries.apply(this, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit.defaults);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3.defaults);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay.defaults);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed. \n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t *          the amplitude of an incoming signal. \n\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known \n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack  \n\t\t *  @param   {Time} release \n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.Envelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming \n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return this.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = this.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock.defaults);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1,\n\t        'lookAhead': 'auto'\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'offset': offset\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t *                          when the page was loaded.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //get the frequency value to compute the value of the next loop\n\t        var now = this.now();\n\t        //if it's started\n\t        var lookAhead = this.context.lookAhead;\n\t        var updateInterval = this.context.updateInterval;\n\t        var lagCompensation = this.context.lag * 2;\n\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t        while (loopInterval > this._nextTick && this._state) {\n\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t            if (currentState !== this._lastState) {\n\t                this._lastState = currentState;\n\t                var event = this._state.get(this._nextTick);\n\t                // emit an event\n\t                if (currentState === Tone.State.Started) {\n\t                    //correct the time\n\t                    this._nextTick = event.time;\n\t                    if (!this.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this.emit('start', event.time, this.ticks);\n\t                } else if (currentState === Tone.State.Stopped) {\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                } else if (currentState === Tone.State.Paused) {\n\t                    this.emit('pause', event.time);\n\t                }\n\t            }\n\t            var tickTime = this._nextTick;\n\t            if (this.frequency) {\n\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t                if (currentState === Tone.State.Started) {\n\t                    this.callback(tickTime);\n\t                    this.ticks++;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            if (this._root !== null) {\n\t                this._root.traverse(function (node) {\n\t                    allNodes.push(node);\n\t                });\n\t            }\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized. \n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument. \n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tLOOPING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.loop = false;\n\t        /** \n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /** \n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tCLOCK/TEMPO\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t        /**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t        this._clock = new Tone.Clock({\n\t            'callback': this._processTick.bind(this),\n\t            'frequency': 0\n\t        });\n\t        this._bindClockEvents();\n\t        /**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t        this.bpm = this._clock.frequency;\n\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t        this.bpm.units = Tone.Type.BPM;\n\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t        this._readOnly('bpm');\n\t        /**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tTIMELINE EVENTS\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduledEvents = {};\n\t        /**\n\t\t\t *  The event ID counter\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eventID = 0;\n\t        /**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = new Tone.Timeline();\n\t        /**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t        /**\n\t\t\t *  Events that occur once\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._onceEvents = new Tone.Timeline();\n\t        /** \n\t\t\t *  All of the synced Signals\n\t\t\t *  @private \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._syncedSignals = [];\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tSWING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t        //8n\n\t        /**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingAmount = 0;\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks === this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //process the single occurrence events\n\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t            event.callback(tickTime);\n\t            //remove the event\n\t            delete this._scheduledEvents[event.id.toString()];\n\t        }.bind(this));\n\t        //and clear the single occurrence timeline\n\t        this._onceEvents.cancelBefore(ticks);\n\t        //fire the next tick events if their time has come\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.callback(tickTime);\n\t        });\n\t        //process the repeated events\n\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t            if ((ticks - event.time) % event.interval === 0) {\n\t                event.callback(tickTime);\n\t            }\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._timeline\n\t        };\n\t        this._timeline.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`. \n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event. \n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        if (interval <= 0) {\n\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t        }\n\t        var event = {\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t            'interval': this.toTicks(interval),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._repeatedEvents\n\t        };\n\t        this._repeatedEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t *  Note that if the given time is less than the current transport time, \n\t\t *  the event will be invoked immediately. \n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var id = this._eventID++;\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'id': id\n\t        };\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._onceEvents\n\t        };\n\t        this._onceEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = this.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._onceEvents.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!this.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (this.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time. \n\t\t *  @param {TransportTime} startPosition \n\t\t *  @param {TransportTime} endPosition   \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default value is an 8th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value \n\t\t *  after other objects have been created can cause problems. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds|String}\n\t\t *  @name latencyHint\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return Tone.Clock.latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            Tone.Clock.latencyHint = hint;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._onceEvents.dispose();\n\t        this._onceEvents = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t            //store the Transport on the context so it can be retrieved later\n\t            context.Transport = Tone.Transport;\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers). \n\t\t *          It provides useful conveniences such as the ability \n\t\t *          to set the volume and mute the entire application. \n\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume();\n\t        /**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //connections\n\t        this.input.chain(this.output, this.context.destination);\n\t    };\n\t    Tone.extend(Tone.Master);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t *  chained in the master effects chain. \n\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter \n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} this\n\t\t */\n\t    AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the \n\t\t *          start/stop of Tone.Transport. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t * \n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t * \n\t\t */\n\t    Tone.Source = function (options) {\n\t        // this.createInsOuts(0, 1);\n\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given, \n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = this.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given, \n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time. \n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this));\n\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        this._synced = false;\n\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now] \n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        this._oscillator.start(this.toSeconds(time));\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            this._oscillator.stop(this.toSeconds(time));\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240; \n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br> \n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t * PeriodicWave equations are from the \n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based \n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag \n\t\t *  @param  {NormalRange}  phase \n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Zero = function () {\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO.defaults);\n\t        /** \n\t\t\t *  The oscillator. \n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type} \n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t *         smooth gain reduction and almost completely prevent \n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback. \n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().start();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input\n\t\t * var level = meter.value;\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'smoothing'\n\t        ], Tone.Meter.defaults);\n\t        /**\n\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t *  the signal value of the input. \n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t        this._analyser.returnType = 'float';\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t        /**\n\t\t\t *  The last computed value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastValue = 0;\n\t    };\n\t    Tone.extend(Tone.Meter);\n\t    /**\n\t\t *  @private\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Meter.Type = {\n\t        Level: 'level',\n\t        Signal: 'signal'\n\t    };\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = {\n\t        'smoothing': 0.8,\n\t        'type': Tone.Meter.Type.Level\n\t    };\n\t    /**\n\t\t * The current value of the meter. A value of 1 is\n\t\t * \"unity\".\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t        get: function () {\n\t            var signal = this._analyser.analyse();\n\t            if (this.type === Tone.Meter.Type.Level) {\n\t                //rms\n\t                var sum = 0;\n\t                for (var i = 0; i < signal.length; i++) {\n\t                    sum += Math.pow(signal[i], 2);\n\t                }\n\t                var rms = Math.sqrt(sum / signal.length);\n\t                //smooth it\n\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t                this._lastValue = rms;\n\t                //scale it\n\t                var unity = 0.35;\n\t                var val = rms / unity;\n\t                //scale the output curve\n\t                return Math.sqrt(val);\n\t            } else {\n\t                return signal[0];\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        this.createInsOuts(0, 2);\n\t        /** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        /** \n\t\t\t *  Left channel output. \n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors. \n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful \n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = this.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t *  @example\n\t\t *  //pan the input signal hard right. \n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        if (this._hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner);\n\t    /**\n\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (this._hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D.defaults);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener, \n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume. \n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol.defaults);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0.5,\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate.defaults);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (this.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (this.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (this.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = this.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (this.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (this.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (this.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern.defaults);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom.defaults);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          <br><br>\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer.defaults);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (this.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._currentDownloads--;\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t *                               If the channel is more than 1, the input array\n\t\t *                               is expected to be a multidimensional array\n\t\t *                               with dimensions equal to the number of channels.\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (this.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (this.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = this.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  the total number of downloads\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._currentDownloads = 0;\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = onload || Tone.noOp;\n\t        function onError(e) {\n\t            if (onerror) {\n\t                onerror(e);\n\t                Tone.Buffer.emit('error', e);\n\t            } else {\n\t                throw new Error(e);\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._currentDownloads++;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._currentDownloads--;\n\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t                        // clear the downloads\n\t                        Tone.Buffer._downloadQueue = [];\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t            request.abort();\n\t        });\n\t        Tone.Buffer._currentDownloads = 0;\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \n\t\t */\n\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t        urls = this._flattenUrls(urls);\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (this.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Flatten an object into a single depth object. \n\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t        var toReturn = {};\n\t        for (var i in ob) {\n\t            if (!ob.hasOwnProperty(i))\n\t                continue;\n\t            if (this.isObject(ob[i])) {\n\t                var flatObject = this._flattenUrls(ob[i]);\n\t                for (var x in flatObject) {\n\t                    if (!flatObject.hasOwnProperty(x))\n\t                        continue;\n\t                    toReturn[i + '.' + x] = flatObject[x];\n\t                }\n\t            } else {\n\t                toReturn[i] = ob[i];\n\t            }\n\t        }\n\t        return toReturn;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = this.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, input) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        if (this.isUndef(input)) {\n\t            input = this.input;\n\t        }\n\t        Buses[channelName].connect(input);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Listener = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], ListenerConstructor.defaults);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.forwardX,\n\t            options.forwardY,\n\t            options.forwardZ,\n\t            options.upX,\n\t            options.upY,\n\t            options.upZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/forward\n\t        this.forwardX = options.forwardX;\n\t        this.forwardY = options.forwardY;\n\t        this.forwardZ = options.forwardZ;\n\t        this.upX = options.upX;\n\t        this.upY = options.upY;\n\t        this.upZ = options.upZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, offlineContext);\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t        //modify the lookAhead and updateInterval to one block\n\t        this.lookAhead = this.blockTime;\n\t        this.updateInterval = this.blockTime;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t *  @private\n\t\t */\n\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t        //dummy worker that does nothing\n\t        return {\n\t            postMessage: function () {\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += Tone.prototype.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t */\n\t    Tone.Effect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback']);\n\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (this.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t *                                 of the reverb. \n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        this.connectSeries.apply(this, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        this.connectSeries.apply(this, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event.defaults);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  The probability that the callback will be invoked\n\t\t\t *  at the scheduled time. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @example\n\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t * event.probability = 0.5;\n\t\t\t */\n\t        this.probability = options.probability;\n\t        /**\n\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t */\n\t        this.humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = this.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!this.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (this.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = this.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!this.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop.defaults);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t            return this._pattern.index;\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stoped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part.defaults);\n\t        /**\n\t\t\t *  If the part is looping or not\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  The playback rate of the part\n\t\t\t *  @type  {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  The start offset\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  Keeps track of the current state\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        /**\n\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //add the events\n\t        var events = this.defaultArg(options.events, []);\n\t        if (!this.isUndef(options.events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                if (Array.isArray(events[i])) {\n\t                    this.add(events[i][0], events[i][1]);\n\t                } else {\n\t                    this.add(events[i]);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!this.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!this.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        after = this.toTicks(after);\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        ctx = this.defaultArg(ctx, this);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var e = this._events[i];\n\t            if (e instanceof Tone.Part) {\n\t                e._forEach(callback, ctx);\n\t            } else {\n\t                callback.call(ctx, e);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern.defaults);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence.defaults);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!this.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (this.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (this.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now() + this.blockTime;\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime * 1000);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0. \n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the \n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start(0);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = this.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given \n\t\t *  duration. \n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'buffer',\n\t            'onended'\n\t        ], Tone.BufferSource.defaults);\n\t        /**\n\t\t\t *  The callback to invoke after the \n\t\t\t *  buffer source is done playing. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set the buffer initially\n\t        if (!this.isUndef(options.buffer)) {\n\t            this.buffer = options.buffer;\n\t        }\n\t        this.loop = options.loop;\n\t    };\n\t    Tone.extend(Tone.BufferSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t        }\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = this.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //the values in seconds\n\t            time = this.toSeconds(time);\n\t            this._source.start(time, offset);\n\t            gain = this.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            //the fadeIn time\n\t            if (this.isUndef(fadeInTime)) {\n\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t            } else {\n\t                fadeInTime = this.toSeconds(fadeInTime);\n\t            }\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time + fadeInTime;\n\t            if (!this.isUndef(duration)) {\n\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t                duration = this.toSeconds(duration);\n\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t *  buffer out. \n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //the fadeOut time\n\t            if (this.isUndef(fadeOutTime)) {\n\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t            } else {\n\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t            }\n\t            this._stopTime = time + fadeOutTime;\n\t            //cancel the end curve\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            //set a new one\n\t            if (fadeOutTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t                time += fadeOutTime;\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t            }\n\t            // fix for safari bug and old FF\n\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t                this._source.stop(time);\n\t            }\n\t            clearTimeout(this._onendedTimeout);\n\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended. \n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t        this.dispose();\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            if (this._source) {\n\t                return this._source.buffer;\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t        set: function (buffer) {\n\t            if (buffer instanceof Tone.Buffer) {\n\t                this._source.buffer = buffer.get();\n\t            } else {\n\t                this._source.buffer = buffer;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        this.onended = null;\n\t        if (this._source) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        if (this._gainNode) {\n\t            this._gainNode.dispose();\n\t            this._gainNode = null;\n\t        }\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        this.output = null;\n\t        clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now() + this.blockTime;\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tthe noise arrays. only generated once on init\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    createBuffers();\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        Tone.Instrument.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth.defaults);\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t        //set the volume initially\n\t        this.volume.value = options.volume;\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = this.optionsObject(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player.defaults);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        if (this._buffer.loaded) {\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //make sure it has a positive duration\n\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t            duration = this.toSeconds(duration);\n\t            //the values in seconds\n\t            startTime = this.toSeconds(startTime);\n\t            //make the source\n\t            this._source = this.context.createBufferSource();\n\t            this._source.buffer = this._buffer.get();\n\t            //set the looping properties\n\t            if (this._loop) {\n\t                this._source.loop = this._loop;\n\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t            } else if (!this._synced) {\n\t                //if it's not looping, set the state change at the end of the sample\n\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t            }\n\t            //and other properties\n\t            this._source.playbackRate.value = this._playbackRate;\n\t            this._source.connect(this.output);\n\t            //start it\n\t            if (this._loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t                var loopStart = this._source.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                if (offset > loopEnd) {\n\t                    //move the offset back\n\t                    while (offset > loopEnd) {\n\t                        offset -= loopDuration;\n\t                    }\n\t                }\n\t                this._source.start(startTime, offset);\n\t            } else {\n\t                this._source.start(startTime, offset, duration);\n\t            }\n\t        } else {\n\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {String} url the url of the audio file\n\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t *  @example\n\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t * \t//repitch the sample down a half step\n\t\t * \tsampler.triggerAttack(-1);\n\t\t * }).toMaster();\n\t\t */\n\t    Tone.Sampler = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Sampler.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The sample player.\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t        this.player = new Tone.Player(options.url, options.onload);\n\t        this.player.retrigger = true;\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        this.player.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.loop = options.loop;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'reverse': false,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.1\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the start of the sample. \n\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t *                              be repitched. \n\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t        this.player.start(time);\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t *  envelope has fully released. \n\t\t *  \n\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerRelease();\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t *                                  sample should be pitch shifted.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t *  @memberOf Tone.Sampler#\n\t\t *  @name triggerAttackRelease\n\t\t *  @method triggerAttackRelease\n\t\t */\n\t    /**\n\t\t * If the output sample should loop or not.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t        get: function () {\n\t            return this.player.loop;\n\t        },\n\t        set: function (loop) {\n\t            this.player.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.player.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.player.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The buffer to play.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t        get: function () {\n\t            return this.player.buffer;\n\t        },\n\t        set: function (buff) {\n\t            this.player.buffer = buff;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.player.dispose();\n\t        this.player = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t *                                                to the MultiPlayer\n\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var multiPlayer = new MultiPlayer({\n\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t * }, function(){\n\t\t * \tmultiPlayer.start(\"kick\");\n\t\t * });\n\t\t *  @example\n\t\t * //can also store the values in an array\n\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t * function(){\n\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t * \tmultiPlayer.start(1);\n\t\t * });\n\t\t */\n\t    Tone.MultiPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'urls',\n\t            'onload'\n\t        ], Tone.MultiPlayer.defaults);\n\t        if (options.urls instanceof Tone.Buffers) {\n\t            /**\n\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t */\n\t            this.buffers = options.urls;\n\t        } else {\n\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t        }\n\t        /**\n\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t *  The fade in envelope which is applied\n\t\t\t *  to the beginning of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fade out envelope which is applied\n\t\t\t *  to the end of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.MultiPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t * Make the source from the buffername\n\t\t * @param  {String} bufferName\n\t\t * @return {Tone.BufferSource}\n\t\t * @private\n\t\t */\n\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t        var buffer;\n\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t            buffer = this.buffers.get(bufferName).get();\n\t        } else if (bufferName instanceof Tone.Buffer) {\n\t            buffer = bufferName.get();\n\t        } else if (bufferName instanceof AudioBuffer) {\n\t            buffer = bufferName;\n\t        }\n\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t            this._activeSources[bufferName] = [];\n\t        }\n\t        this._activeSources[bufferName].push(source);\n\t        return source;\n\t    };\n\t    /**\n\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t        if (duration) {\n\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t        }\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.loop = true;\n\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the first played instance of the buffer name.\n\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t            time = this.toSeconds(time);\n\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t        } else {\n\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop all currently playing buffers at the given time.\n\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var bufferName in this._activeSources) {\n\t            var sources = this._activeSources[bufferName];\n\t            for (var i = 0; i < sources.length; i++) {\n\t                sources[i].stop(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add another buffer to the available buffers.\n\t\t *  @param {String} name The name to that the buffer is refered\n\t\t *                       to in start/stop methods. \n\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t *                                  or the buffer.\n\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t */\n\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t        this.buffers.add(name, url, callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source. \"started\"\n\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.MultiPlayer#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t        get: function () {\n\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.MultiPlayer#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        for (var bufferName in this._activeSources) {\n\t            this._activeSources[bufferName].forEach(function (source) {\n\t                source.dispose();\n\t            });\n\t        }\n\t        this.buffers.dispose();\n\t        this.buffers = null;\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.MultiPlayer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer.defaults);\n\t        Tone.Source.call(this);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Plays the buffer with a small envelope\n\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        /**\n\t\t\t *  The amount of time randomly added\n\t\t\t *  or subtracted from the grain's offset\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.drift = options.drift;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'drift': 0,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = this.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        //unmute the player\n\t        this._player.volume.setValueAtTime(0, time);\n\t        if (duration) {\n\t            this._stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t        //mute the player\n\t        this._player.volume.cancelScheduledValues(time);\n\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time \n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var bufferDuration = this.buffer.duration;\n\t        if (this.loop && this._loopEnd > 0) {\n\t            bufferDuration = this._loopEnd;\n\t        }\n\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t        var offset = this._offset - this._overlap + drift;\n\t        var detune = this.detune / 100;\n\t        //keep the offset within the limits of the buffer\n\t        offset = Math.max(offset, 0);\n\t        offset = Math.min(offset, bufferDuration);\n\t        var originalFadeIn = this._player.fadeIn;\n\t        if (this.loop && this._offset > bufferDuration) {\n\t            //play the end\n\t            var endSegmentDuration = this._offset - bufferDuration;\n\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t            //and play the beginning \n\t            offset = this._offset % bufferDuration;\n\t            this._offset = this._loopStart;\n\t            this._player.fadeIn = 0;\n\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t        } else if (this._offset > bufferDuration) {\n\t            //set the state to stopped. \n\t            this.stop(time);\n\t        } else {\n\t            if (offset === 0) {\n\t                this._player.fadeIn = 0;\n\t            }\n\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t        }\n\t        this._player.fadeIn = originalFadeIn;\n\t        //increment the offset\n\t        var duration = this._clock._nextTick - time;\n\t        this._offset += duration * this._playbackRate;\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {[type]}  [description]\n\t\t */\n\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the \n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between \n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            time = this.toSeconds(time);\n\t            this._overlap = time;\n\t            if (this._overlap < 0) {\n\t                this._player.fadeIn = 0.01;\n\t                this._player.fadeOut = 0.01;\n\t            } else {\n\t                this._player.fadeIn = time;\n\t                this._player.fadeOut = time;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._player.dispose();\n\t        this._player = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check \n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *         \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t * \n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t        /**\n\t\t\t *  The MediaStreamNode \n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t        return this.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (this.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                if (!device) {\n\t                    //otherwise just take the first one\n\t                    device = devices[0];\n\t                }\n\t            }\n\t            //didn't find a matching device\n\t            if (!device) {\n\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @example\n\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is \n\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the \n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tone/build/Tone.js\n// module id = 14\n// module chunks = 0","\n/* styles */\nrequire(\"!!vue-style-loader!css-loader?minimize!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-32d4e95a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./musique.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./musique.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-32d4e95a\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./musique.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/musique.vue\n// module id = 15\n// module chunks = 0","\n/* styles */\nrequire(\"!!vue-style-loader!css-loader?minimize!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-4efda35c\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./note.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./note.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4efda35c\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./note.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/note.vue\n// module id = 16\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {}, [_vm._l((_vm.melodie), function(n, i) {\n    return _c('note', {\n      key: i,\n      attrs: {\n        \"note\": n\n      },\n      on: {\n        \"change\": _vm.update\n      }\n    })\n  }), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"button\",\n      \"value\": \"play\"\n    },\n    on: {\n      \"click\": _vm.play\n    }\n  }), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"button\",\n      \"value\": \"stop\"\n    },\n    on: {\n      \"click\": _vm.stop\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"alert\"\n  })], 2)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-32d4e95a\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/musique.vue\n// module id = 17\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"app\"\n    }\n  }, [_c('musique')], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-3afc1888\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = 18\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"note\"\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.note),\n      expression: \"note\"\n    }],\n    attrs: {\n      \"min\": \"0\",\n      \"max\": \"7\",\n      \"type\": \"range\",\n      \"step\": \"1\"\n    },\n    domProps: {\n      \"value\": (_vm.note)\n    },\n    on: {\n      \"__r\": function($event) {\n        _vm.note = $event.target.value\n      }\n    }\n  })])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4efda35c\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/note.vue\n// module id = 19\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?minimize!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-32d4e95a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./musique.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"57699844\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-32d4e95a\",\"scoped\":false,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/musique.vue\n// module id = 20\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-3afc1888\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"9b22c6e4\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-3afc1888\",\"scoped\":false,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/App.vue\n// module id = 21\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?minimize!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-4efda35c\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./note.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"1e116a01\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-4efda35c\",\"scoped\":false,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/note.vue\n// module id = 22\n// module chunks = 0","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader/lib/listToStyles.js\n// module id = 23\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 24\n// module chunks = 0"],"sourceRoot":""}